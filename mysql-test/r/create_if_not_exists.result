#
# WL#14722 Support IF NOT EXISTS clause
# in CREATE PROCEDURE/FUNCTION/TRIGGER
#

# 1. Stored Procedures (SPs)

# 1.1. Must execute successfully since the SP does not exist
CREATE PROCEDURE IF NOT EXISTS sp1() BEGIN END;
# 1.2. Must report a warning that the SP already exists
CREATE PROCEDURE IF NOT EXISTS sp1() BEGIN END;
Warnings:
Note	1304	PROCEDURE sp1 already exists
# 1.3. Must fail with error that the SP already exists
CREATE PROCEDURE sp1() BEGIN END;
ERROR 42000: PROCEDURE sp1 already exists
DROP PROCEDURE sp1;

# 2. Stored Functions (SFs)

# 2.1. Must execute successfully since the SF does not exist
CREATE FUNCTION IF NOT EXISTS sf1() RETURNS INT DETERMINISTIC return 0;
# 2.2. Must report a warning since the SF already exists
CREATE FUNCTION IF NOT EXISTS sf1() RETURNS INT DETERMINISTIC return 0;
Warnings:
Note	1304	FUNCTION sf1 already exists
# 2.3. Must fail with error since the SF already exists
CREATE FUNCTION sf1() RETURNS INT DETERMINISTIC return 0;
ERROR 42000: FUNCTION sf1 already exists
DROP FUNCTION sf1;
# 2.4. Must report a warning since it has the same name as a native function
CREATE FUNCTION IF NOT EXISTS abs() RETURNS INT DETERMINISTIC return 0;
Warnings:
Note	1585	This function 'abs' has the same name as a native function
DROP FUNCTION abs;
# 2.5. Must report a warning that UDF will override the SF
CREATE FUNCTION metaphon RETURNS STRING SONAME "UDF_EXAMPLE_LIB";
CREATE FUNCTION IF NOT EXISTS metaphon() RETURNS INT DETERMINISTIC return 0;
Warnings:
Note	4084	This function 'metaphon' has the same name as a loadable function (UDF). To invoke the stored function, it is necessary to qualify it with the schema name.
DROP FUNCTION metaphon;
DROP FUNCTION test.metaphon;

# 3. Loadable Functions / User Defined Functions (UDFs)

# 3.1. Must execute successfully since the UDF does not exist
CREATE FUNCTION IF NOT EXISTS metaphon RETURNS STRING SONAME "UDF_EXAMPLE_LIB";
# 3.2. Must report a warning since the UDF already exists
CREATE FUNCTION IF NOT EXISTS metaphon RETURNS STRING SONAME "UDF_EXAMPLE_LIB";
Warnings:
Note	1125	Function 'metaphon' already exists
# 3.3. Must fail with error since the UDF already exists
CREATE FUNCTION metaphon RETURNS STRING SONAME "UDF_EXAMPLE_LIB";
ERROR HY000: Function 'metaphon' already exists
DROP FUNCTION metaphon;
# 3.4. Must fail with an error since native function already exists
CREATE FUNCTION IF NOT EXISTS sum RETURNS INT SONAME "UDF_EXAMPLE_LIB";
ERROR HY000: This function 'sum' has the same name as a native function. The 'IF NOT EXISTS' clause is not supported while creating a loadable function with the same name as a native function.
# 3.5. Will succeed without warning, but UDF will override the SF
CREATE FUNCTION IF NOT EXISTS metaphon() RETURNS INT DETERMINISTIC return 0;
CREATE FUNCTION metaphon RETURNS STRING SONAME "UDF_EXAMPLE_LIB";
DROP FUNCTION metaphon;
DROP FUNCTION test.metaphon;

# 4. Triggers

CREATE TABLE t1 (a INT);
# 4.1. Must execute successfully since the trigger does not exist
CREATE TRIGGER IF NOT EXISTS trg1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN END;
# 4.2. Must report a warning since the trigger already exists on the same table
CREATE TRIGGER IF NOT EXISTS trg1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN END;
Warnings:
Note	4099	Trigger 'trg1' already exists on the table 'test'.'t1'.
# 4.3. Must fail with error since the trigger already exists on a different table
CREATE TABLE t2 (a INT);
CREATE TRIGGER IF NOT EXISTS trg1 BEFORE INSERT ON t2 FOR EACH ROW BEGIN END;
ERROR HY000: Trigger 'test'.'trg1' already exists on a different table. The 'IF NOT EXISTS' clause is only supported for triggers associated with the same table.
DROP TABLE t2;
# 4.4. Must fail with error since the trigger already exists
CREATE TRIGGER trg1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN END;
ERROR HY000: Trigger already exists
DROP TABLE t1;

#
# WL#14774 Support IF NOT EXISTS clause
# in CREATE VIEW
#

# 5. Views

# 5.1. Must execute successfully since the view does not exist
CREATE TABLE t1 (a INT);
CREATE VIEW IF NOT EXISTS v1 (v1_a) AS SELECT a FROM t1;
# 5.2. Must report a warning that the view already exists
CREATE VIEW IF NOT EXISTS v1 (v1_a) AS SELECT a FROM t1;
Warnings:
Note	1050	Table 'v1' already exists
# 5.3. Must fail with error that the view already exists
CREATE VIEW v1 (v1_a) AS SELECT a FROM t1;
ERROR 42S01: Table 'v1' already exists
# 5.4. Must report a warning that the table already exists
CREATE TABLE t2 (b INT);
CREATE VIEW IF NOT EXISTS t1 (t2_b) AS SELECT b FROM t2;
Warnings:
Note	1050	Table 't1' already exists
# 5.5. Must fail with an error if both OR REPLACE and IF NOT EXISTS
# clauses are present.
CREATE OR REPLACE VIEW IF NOT EXISTS v1 (t2_b) AS SELECT b FROM t2;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'IF NOT EXISTS v1 (t2_b) AS SELECT b FROM t2' at line 1
# 5.6. Must fail with an error when an IF NOT EXISTS clause is
# present in an ALTER VIEW statement
ALTER VIEW IF NOT EXISTS v1 (t2_b) AS SELECT b FROM t2;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'IF NOT EXISTS v1 (t2_b) AS SELECT b FROM t2' at line 1
# 5.7. Must fail with an error to create a view when a table of
# the same name already exists.
CREATE VIEW t1 AS SELECT b from t2;
ERROR 42S01: Table 't1' already exists
# 5.8. Must fail with an error to create a table when a view of 
# the same name already exists.
CREATE TABLE v1 (c INT);
ERROR 42S01: Table 'v1' already exists
# 5.9. Must fail with an error when creating a view with the same
# name as an existing view and an incorrect view definition.
CREATE VIEW v1 AS SELECT * FROM invalid_table_name;
ERROR 42S02: Table 'test.invalid_table_name' doesn't exist
CREATE VIEW v1 AS SELECT invalid_column_name FROM t1;
ERROR 42S22: Unknown column 'invalid_column_name' in 'field list'
DROP VIEW v1;
DROP TABLE t1;
DROP TABLE t2;
