#
# WL#16122: Temp table DISTINCT in the hypergraph optimizer
# Various combinations of DISTINCT and GROUP BY to test the "Temporary
# table with deduplication" plan.
#
CREATE TABLE tb1(id int , id2 int, v varchar(200));
INSERT INTO tb1(id, id2) VALUES (7, 10), (8, 11), (9, 12), (10, 10), (11, 11),
(12, 12), (1, 10), (2, 11), (3, 12), (4, 10), (5, 11), (6, 12),
(7, 100), (8, 101), (9, 102), (10, 150), (11, 150), (12, 102), (1, 10),
(3, 11), (7, 12), (9, 10), (5, 101), (1, 12);
UPDATE tb1 SET v = concat('abcd', id2%21);
ANALYZE TABLE tb1;
Table	Op	Msg_type	Msg_text
test.tb1	analyze	status	OK
SELECT SQL_SMALL_RESULT DISTINCT id2, id FROM tb1 ORDER BY id,id2;
id2	id
10	1
12	1
11	2
11	3
12	3
10	4
11	5
101	5
12	6
10	7
12	7
100	7
11	8
101	8
10	9
12	9
102	9
10	10
150	10
11	11
150	11
12	12
102	12
SELECT SQL_SMALL_RESULT id2, id FROM tb1 GROUP BY id2, id ORDER BY id,id2;
id2	id
10	1
12	1
11	2
11	3
12	3
10	4
11	5
101	5
12	6
10	7
12	7
100	7
11	8
101	8
10	9
12	9
102	9
10	10
150	10
11	11
150	11
12	12
102	12
SELECT SQL_SMALL_RESULT DISTINCT id2, (id) FROM tb1 GROUP BY id2 HAVING id < 8 ORDER BY id;
id2	id
10	7
100	7
SELECT SQL_SMALL_RESULT DISTINCT id2, any_value(id) i FROM tb1 GROUP BY i+2 ORDER BY id2, i;
id2	i
10	1
10	4
10	7
10	10
11	2
11	5
11	8
11	11
12	3
12	6
12	9
12	12
SELECT SQL_SMALL_RESULT DISTINCT id2, any_value(id2) i FROM tb1 GROUP BY id2+2 ORDER BY id2, i;
id2	i
10	10
11	11
12	12
100	100
101	101
102	102
150	150
SELECT SQL_SMALL_RESULT DISTINCT id2 FROM tb1 GROUP BY id2+2 ORDER BY id2;
id2
10
11
12
100
101
102
150
SELECT SQL_SMALL_RESULT DISTINCT id2, id i FROM tb1 GROUP BY id2+3 HAVING id2 != i ORDER BY id2+2;
id2	i
10	7
11	8
12	9
100	7
101	8
102	9
150	10
CREATE TABLE tb2(id int , id2 int, PRIMARY KEY (id));
INSERT INTO tb2 VALUES (1, 10), (2, 11), (3, 12), (4, 10), (5, 11), (6, 12), (7, 10), (8, 11), (9, 12), (10, 10), (11, 11), (12, 12);
ANALYZE TABLE tb2;
Table	Op	Msg_type	Msg_text
test.tb2	analyze	status	OK
SELECT SQL_SMALL_RESULT DISTINCT any_value(id2) i , (id) FROM tb2 HAVING i  > 10 ORDER BY i, id;
i	id
11	2
11	5
11	8
11	11
12	3
12	6
12	9
12	12
EXPLAIN FORMAT=TREE SELECT SQL_SMALL_RESULT DISTINCT id, id2 FROM tb1 GROUP BY id2, id;
EXPLAIN
-> Table scan on <temporary>  (rows=14.2)
    -> Temporary table with deduplication  (rows=14.2)
        -> Table scan on tb1  (rows=24)

SELECT SQL_SMALL_RESULT DISTINCT id, id2 FROM tb1 GROUP BY id2, id;
id	id2
7	10
8	11
9	12
10	10
11	11
12	12
1	10
2	11
3	12
4	10
5	11
6	12
7	100
8	101
9	102
10	150
11	150
12	102
3	11
7	12
9	10
5	101
1	12
SELECT SQL_SMALL_RESULT DISTINCT id +  id2 FROM tb1 GROUP BY id2, id ORDER BY 1;
id +  id2
11
13
14
15
16
17
18
19
20
21
22
24
106
107
109
111
114
160
161
SELECT SQL_SMALL_RESULT
DISTINCT 2 - sum(id*2) s, id2 DIV (2 - sum(id*2)) DIV 2
FROM tb1 GROUP BY id2  HAVING s < -17 ORDER BY (-sum(id-2));
s	id2 DIV (2 - sum(id*2)) DIV 2
-74	0
-62	0
-56	0
-40	-1
-24	-2
SELECT SQL_SMALL_RESULT
DISTINCT sum(id*2) OVER(),  id FROM tb1 GROUP BY id2 ORDER BY (-sum(id-2));
sum(id*2) OVER()	id
116	9
116	7
116	8
116	10
SELECT SQL_SMALL_RESULT
DISTINCT any_value(v) , id2 FROM tb1 GROUP BY id, id2 ORDER BY (select -id2);
any_value(v)	id2
abcd3	150
abcd18	102
abcd17	101
abcd16	100
abcd12	12
abcd11	11
abcd10	10
SELECT SQL_SMALL_RESULT
DISTINCT sum(id*2) OVER(PARTITION BY id2), id FROM tb1 GROUP BY id2 ORDER BY (-(id-2));
sum(id*2) OVER(PARTITION BY id2)	id
20	10
18	9
16	8
14	7
SELECT SQL_SMALL_RESULT any_value(id2) , any_value(id) i FROM tb1 t1 GROUP BY id2+id
HAVING i  > 10   ORDER BY (select avg(id) FROM tb1 t2 WHERE i < t2.id);
any_value(id2)	i
12	12
102	12
11	11
150	11
SELECT SQL_SMALL_RESULT  any_value(id), id2 FROM tb1 t GROUP BY id2 having
(select t.id2 FROM tb1 t2 WHERE t.id2 = t2.id2 limit 1) > 50 ORDER BY id2;
any_value(id)	id2
7	100
8	101
9	102
10	150
SELECT SQL_SMALL_RESULT DISTINCT v , id2 FROM tb1 t GROUP BY id, id2
HAVING (select t.id2 FROM tb1 t2 WHERE t.id2 = t2.id2 limit 1) > 50
ORDER BY concat(v, -id2) DESC, id2 DESC;
v	id2
abcd3	150
abcd18	102
abcd17	101
abcd16	100
SELECT SQL_SMALL_RESULT
t1.id2 i9 , (t2.id) i FROM tb1 t1 INNER JOIN tb1 t2 ON t1.id2 = t2.id2
GROUP BY t1.id2, i HAVING (select avg(id) FROM tb1 t3 WHERE i9 < t3.id)
ORDER BY i9, i;
i9	i
10	1
10	4
10	7
10	9
10	10
11	2
11	3
11	5
11	8
11	11
SELECT SQL_SMALL_RESULT
DISTINCT t1.id2, t1.id2 + 1 i,  (select abs(50-i))
FROM tb1 t1 INNER JOIN tb1 t2 ON t1.id = t2.id GROUP BY t2.id, t1.id2
ORDER BY (select DISTINCT abs(50-t_inner.id2) FROM tb1 t_inner
WHERE t_inner.id2 = t1.id2);
id2	i	(select abs(50-i))
12	13	37
11	12	38
10	11	39
100	101	51
101	102	52
102	103	53
150	151	101
SELECT SQL_SMALL_RESULT t1.id2, t1.id2 + 1 i,  (select abs(50-i))
FROM tb1 t1 INNER JOIN tb1 t2 ON t1.id = t2.id GROUP BY t2.id, t1.id2
HAVING EXISTS (SELECT * FROM tb1 t_h WHERE i =  t_h.id2 + 1
AND v IN ('abcd16', 'abcd17', 'abcd18', 'abcd10'))
ORDER BY (SELECT DISTINCT abs(50-t_inner.id2) FROM tb1 t_inner
WHERE t_inner.id2 = t1.id2);
id2	i	(select abs(50-i))
10	11	39
10	11	39
10	11	39
10	11	39
10	11	39
100	101	51
101	102	52
101	102	52
102	103	53
102	103	53
SELECT SQL_SMALL_RESULT DISTINCT t1.id2, t1.id2 + 1 i,  (select abs(50-i))
FROM tb1 t1 INNER JOIN tb1 t2 ON t1.id = t2.id GROUP BY t2.id, t1.id2
HAVING EXISTS (SELECT * FROM tb1 t_h WHERE i =  t_h.id2 + 1
AND v IN ('abcd16', 'abcd17', 'abcd18', 'abcd10'))
ORDER BY (SELECT DISTINCT abs(50-t_inner.id2) FROM tb1 t_inner
WHERE t_inner.id2 = t1.id2);
id2	i	(select abs(50-i))
10	11	39
100	101	51
101	102	52
102	103	53
SELECT SQL_SMALL_RESULT DISTINCT (count(DISTINCT id)) FROM tb1 GROUP BY id2;
(count(DISTINCT id))
5
6
1
2
SELECT SQL_SMALL_RESULT DISTINCT (2 + sum(DISTINCT id)) FROM tb1 GROUP BY id2;
(2 + sum(DISTINCT id))
33
31
40
9
15
23
SELECT SQL_SMALL_RESULT
DISTINCT COUNT(DISTINCT id) FROM tb1 GROUP BY id2;
COUNT(DISTINCT id)
5
6
1
2
SELECT SQL_SMALL_RESULT
DISTINCT COUNT(DISTINCT id) FROM tb1 GROUP BY id2 WITH ROLLUP;
COUNT(DISTINCT id)
5
6
1
2
12
SELECT SQL_SMALL_RESULT
DISTINCT SUM(id), COUNT(DISTINCT id) FROM tb1 GROUP BY id2 ;
SUM(id)	COUNT(DISTINCT id)
32	5
29	5
38	6
7	1
13	2
21	2
SELECT SQL_SMALL_RESULT
DISTINCT SUM(id), COUNT(DISTINCT id) FROM tb1 GROUP BY id2 WITH ROLLUP;
SUM(id)	COUNT(DISTINCT id)
32	5
29	5
38	6
7	1
13	2
21	2
161	12
SELECT SQL_SMALL_RESULT
DISTINCT id  FROM tb1 GROUP BY id2, id INTERSECT SELECT id2 FROM tb1;
id
10
11
12
SELECT SQL_SMALL_RESULT
id2 FROM tb1 INTERSECT  SELECT SQL_SMALL_RESULT DISTINCT id  FROM tb1 GROUP BY id2, id;
id2
10
11
12
SELECT SQL_SMALL_RESULT
id2 FROM tb1 INTERSECT  SELECT SQL_SMALL_RESULT DISTINCT id2  FROM tb1 GROUP BY id2, id;
id2
10
11
12
100
101
102
150
SELECT SQL_SMALL_RESULT
id, id2 FROM tb1 INTERSECT  SELECT SQL_SMALL_RESULT DISTINCT id, id2  FROM tb1 GROUP BY id2, id;
id	id2
7	10
8	11
9	12
10	10
11	11
12	12
1	10
2	11
3	12
4	10
5	11
6	12
7	100
8	101
9	102
10	150
11	150
12	102
3	11
7	12
9	10
5	101
1	12
EXPLAIN FORMAT=TREE SELECT SQL_SMALL_RESULT id2 FROM tb2 GROUP BY id;
EXPLAIN
-> Table scan on <temporary>  (rows=12)
    -> Temporary table with deduplication  (rows=12)
        -> Table scan on tb2  (rows=12)

SELECT SQL_SMALL_RESULT DISTINCT avg(id), JSON_ARRAYAGG(id) FROM tb1 t1
GROUP BY id2, id WITH ROLLUP ORDER BY 1, 2;
avg(id)	JSON_ARRAYAGG(id)
1.0000	[1]
1.0000	[1, 1]
2.0000	[2]
3.0000	[3]
4.0000	[4]
5.0000	[5]
5.3333	[1, 1, 4, 7, 9, 10]
5.8000	[2, 3, 5, 8, 11]
6.0000	[6]
6.3333	[1, 3, 6, 7, 9, 12]
6.5000	[5, 8]
6.7083	[1, 1, 4, 7, 9, 10, 2, 3, 5, 8, 11, 1, 3, 6, 7, 9, 12, 7, 5, 8, 9, 12, 10, 11]
7.0000	[7]
8.0000	[8]
9.0000	[9]
10.0000	[10]
10.5000	[9, 12]
10.5000	[10, 11]
11.0000	[11]
12.0000	[12]
Warnings:
Warning	1235	This version of MySQL doesn't yet support 'sorting of non-scalar JSON values'
EXPLAIN FORMAT=TREE SELECT SQL_SMALL_RESULT DISTINCT avg(id), JSON_ARRAYAGG(id) FROM tb1 t1
GROUP BY id2, id WITH ROLLUP ORDER BY 1, 2;
EXPLAIN
-> Sort: `avg(id)`, `JSON_ARRAYAGG(id)`  (rows=7.11)
    -> Table scan on <temporary>  (rows=7.11)
        -> Temporary table with deduplication  (rows=7.11)
            -> Group aggregate with rollup: avg(t1.id), json_arrayagg(t1.id)  (rows=19)
                -> Sort: t1.id2, t1.id  (rows=24)
                    -> Table scan on t1  (rows=24)

SELECT SQL_SMALL_RESULT SQL_BIG_RESULT DISTINCT avg(id), JSON_ARRAYAGG(id) FROM tb1 t1
GROUP BY id2, id WITH ROLLUP ORDER BY 1, 2;
avg(id)	JSON_ARRAYAGG(id)
1.0000	[1]
1.0000	[1, 1]
2.0000	[2]
3.0000	[3]
4.0000	[4]
5.0000	[5]
5.3333	[1, 1, 4, 7, 9, 10]
5.8000	[2, 3, 5, 8, 11]
6.0000	[6]
6.3333	[1, 3, 6, 7, 9, 12]
6.5000	[5, 8]
6.7083	[1, 1, 4, 7, 9, 10, 2, 3, 5, 8, 11, 1, 3, 6, 7, 9, 12, 7, 5, 8, 9, 12, 10, 11]
7.0000	[7]
8.0000	[8]
9.0000	[9]
10.0000	[10]
10.5000	[9, 12]
10.5000	[10, 11]
11.0000	[11]
12.0000	[12]
Warnings:
Warning	1235	This version of MySQL doesn't yet support 'sorting of non-scalar JSON values'
EXPLAIN FORMAT=TREE SELECT SQL_SMALL_RESULT SQL_BIG_RESULT DISTINCT avg(id), JSON_ARRAYAGG(id) FROM tb1 t1
GROUP BY id2, id WITH ROLLUP ORDER BY 1, 2;
EXPLAIN
-> Sort with duplicate removal: `avg(id)`, `JSON_ARRAYAGG(id)`  (rows=7.11)
    -> Table scan on <temporary>  (rows=19)
        -> Temporary table  (rows=19)
            -> Group aggregate with rollup: avg(t1.id), json_arrayagg(t1.id)  (rows=19)
                -> Sort: t1.id2, t1.id  (rows=24)
                    -> Table scan on t1  (rows=24)

#
# Bug#36625150 WL#16122: BIT values displayed differently with ORDER BY
#
CREATE TABLE t1(b BIT(5));
INSERT INTO t1 values (3), (1), (1), (3);
SELECT SQL_SMALL_RESULT DISTINCT b FROM t1 GROUP BY b ORDER BY b;
Catalog	Database	Table	Table_alias	Column	Column_alias	Type	Length	Max length	Is_null	Flags	Decimals	Charsetnr
def	test	t1	t1	b	b	16	5	1	Y	32	0	63
b
#
#
SELECT SQL_SMALL_RESULT DISTINCT b FROM t1 ORDER BY b;
Catalog	Database	Table	Table_alias	Column	Column_alias	Type	Length	Max length	Is_null	Flags	Decimals	Charsetnr
def	test	t1	t1	b	b	16	5	1	Y	32	0	63
b
#
#
SELECT SQL_SMALL_RESULT b FROM t1 GROUP BY b ORDER BY b;
Catalog	Database	Table	Table_alias	Column	Column_alias	Type	Length	Max length	Is_null	Flags	Decimals	Charsetnr
def	test	t1	t1	b	b	16	5	1	Y	32	0	63
b
#
#
DROP TABLE t1;
DROP TABLE tb1, tb2;
