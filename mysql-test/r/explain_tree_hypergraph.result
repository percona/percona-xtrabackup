#
# Bug #34513359 	Cost for field=dependent_subquery not included
#
CREATE TABLE num (n INT);
INSERT INTO num VALUES (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
CREATE TABLE t1 (a INT PRIMARY KEY, b INT);
INSERT INTO t1 SELECT n,n FROM num;
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
EXPLAIN FORMAT=TREE SELECT * FROM t1 x1
WHERE x1.b = (SELECT MAX(b) FROM t1 x2 WHERE x2.a>x1.a);
EXPLAIN
-> Filter: (x1.b = (select #2))  (rows=10)
    -> Table scan on x1  (rows=10)
    -> Select #2 (subquery in condition; dependent)
        -> Aggregate: max(x2.b)  (rows=1)
            -> Filter: (x2.a > x1.a)  (rows=3.33)
                -> Table scan on x2  (rows=10)

Warnings:
Note	1276	Field or reference 'test.x1.a' of SELECT #2 was resolved in SELECT #1
EXPLAIN FORMAT=TREE SELECT * FROM t1 x1
WHERE x1.b IN (SELECT MAX(b) FROM t1 x2 WHERE x2.a>x1.a);
EXPLAIN
-> Filter: <in_optimizer>(x1.b,<exists>(select #2))  (rows=10)
    -> Table scan on x1  (rows=10)
    -> Select #2 (subquery in condition; dependent)
        -> Filter: (<cache>(x1.b) = <ref_null_helper>(max(x2.b)))  (rows=1)
            -> Aggregate: max(x2.b)  (rows=1)
                -> Filter: (x2.a > x1.a)  (rows=3.33)
                    -> Table scan on x2  (rows=10)

Warnings:
Note	1276	Field or reference 'test.x1.a' of SELECT #2 was resolved in SELECT #1
EXPLAIN FORMAT=TREE SELECT * FROM t1 x1
WHERE x1.b = (SELECT MAX(b) FROM t1 x2 WHERE x2.a>5);
EXPLAIN
-> Filter: (x1.b = (select #2))  (rows=1)
    -> Table scan on x1  (rows=10)
    -> Select #2 (subquery in condition; run only once)
        -> Aggregate: max(x2.b)  (rows=1)
            -> Index range scan on x2 using PRIMARY over (5 < a)  (rows=4)

EXPLAIN FORMAT=TREE SELECT * FROM t1 x1
WHERE x1.b IN (SELECT MAX(b) FROM t1 x2 WHERE x2.a>5);
EXPLAIN
-> Filter: <in_optimizer>(x1.b,x1.b in (select #2))  (rows=10)
    -> Table scan on x1  (rows=10)
    -> Select #2 (subquery in condition; run only once)
        -> Filter: ((x1.b = `<materialized_subquery>`.`MAX(b)`))  (rows=1)
            -> Limit: 1 row(s)  (rows=1)
                -> Index lookup on <materialized_subquery> using <auto_distinct_key> (MAX(b) = x1.b)
                    -> Materialize with deduplication  (rows=1)
                        -> Aggregate: max(x2.b)  (rows=1)
                            -> Index range scan on x2 using PRIMARY over (5 < a)  (rows=4)

EXPLAIN FORMAT=TREE SELECT * FROM t1 x1
WHERE x1.b = (SELECT MAX(b) FROM t1 x2 WHERE x2.a>10*rand(0));
EXPLAIN
-> Filter: (x1.b = (select #2))  (rows=10)
    -> Table scan on x1  (rows=10)
    -> Select #2 (subquery in condition; uncacheable)
        -> Aggregate: max(x2.b)  (rows=1)
            -> Filter: (x2.a > (10 * rand(0)))  (rows=3.33)
                -> Table scan on x2  (rows=10)

EXPLAIN FORMAT=TREE SELECT * FROM t1 x1
WHERE x1.b IN (SELECT MAX(b) FROM t1 x2 WHERE x2.a>10*rand(0));
EXPLAIN
-> Filter: <in_optimizer>(x1.b,<exists>(select #2))  (rows=10)
    -> Table scan on x1  (rows=10)
    -> Select #2 (subquery in condition; dependent)
        -> Filter: (<cache>(x1.b) = <ref_null_helper>(max(x2.b)))  (rows=1)
            -> Aggregate: max(x2.b)  (rows=1)
                -> Filter: (x2.a > (10 * rand(0)))  (rows=3.33)
                    -> Table scan on x2  (rows=10)

EXPLAIN FORMAT=TREE SELECT SUM(x1.a) s FROM t1 x1
GROUP BY x1.b HAVING s>(SELECT MAX(x2.a) FROM t1 x2);
EXPLAIN
-> Filter: (s > (select #2))  (rows=3.16)
    -> Group aggregate: sum(x1.a)  (rows=3.16)
        -> Sort: x1.b  (rows=10)
            -> Table scan on x1  (rows=10)
    -> Select #2 (subquery in condition; run only once)
        -> Aggregate: max(x2.a)  (rows=1)
            -> Table scan on x2  (rows=10)

EXPLAIN FORMAT=TREE SELECT SUM(x1.a) s FROM t1 x1
GROUP BY x1.b HAVING s>(SELECT MAX(x2.a+RAND(0)) FROM t1 x2);
EXPLAIN
-> Filter: (s > (select #2))  (rows=3.16)
    -> Group aggregate: sum(x1.a)  (rows=3.16)
        -> Sort: x1.b  (rows=10)
            -> Table scan on x1  (rows=10)
    -> Select #2 (subquery in condition; uncacheable)
        -> Aggregate: max((x2.a + rand(0)))  (rows=1)
            -> Table scan on x2  (rows=10)

DROP TABLE num,t1;
#
# Bug#34114563 EXPLAIN ANALYZE: Use at least one significant digit for average
# of actual rows
#
CREATE TABLE num10 (n INT);
INSERT INTO num10 VALUES (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
CREATE TABLE t1(
a INT,
b INT,
c INT,
d INT,
e INT,
f INT,
g INT,
h INT,
KEY(d)
);
INSERT INTO t1
SELECT n%17, n% 19, n, n, n, n, n, n
FROM (SELECT d1.n+d2.n*10+d3.n*100 n FROM num10 d1, num10 d2, num10 d3) num1000;
ANALYZE TABLE t1 UPDATE HISTOGRAM ON a,b,c,d,e,f,g,h;
Table	Op	Msg_type	Msg_text
test.t1	histogram	status	Histogram statistics created for column 'a'.
test.t1	histogram	status	Histogram statistics created for column 'b'.
test.t1	histogram	status	Histogram statistics created for column 'c'.
test.t1	histogram	status	Histogram statistics created for column 'd'.
test.t1	histogram	status	Histogram statistics created for column 'e'.
test.t1	histogram	status	Histogram statistics created for column 'f'.
test.t1	histogram	status	Histogram statistics created for column 'g'.
test.t1	histogram	status	Histogram statistics created for column 'h'.
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
EXPLAIN FORMAT=TREE SELECT * FROM t1 WHERE c<720;
EXPLAIN
-> Filter: (t1.c < 720)  (rows=720)
    -> Table scan on t1  (rows=1000)

EXPLAIN FORMAT=TREE SELECT * FROM t1 x1, t1 x2, t1 x3 WHERE x1.c<721 AND x2.c<900;
EXPLAIN
-> Inner hash join (no condition)  (rows=649e+6)
    -> Inner hash join (no condition)  (rows=648900)
        -> Filter: (x2.c < 900)  (rows=900)
            -> Table scan on x2  (rows=1000)
        -> Hash
            -> Filter: (x1.c < 721)  (rows=721)
                -> Table scan on x1  (rows=1000)
    -> Hash
        -> Table scan on x3  (rows=1000)

EXPLAIN ANALYZE FORMAT=TREE SELECT * FROM t1 x1, t1 x2 WHERE x1.c=x2.d AND x1.d>900 AND x2.a=x2.b;
EXPLAIN
-> Nested loop inner join  (cost=140..815 rows=5.82) (actual rows=17 loops=1)
    -> Index range scan on x1 using d over (900 < d)  (cost=3.36..333 rows=99) (actual rows=99 loops=1)
    -> Filter: (x2.a = x2.b)  (cost=4.88..4.88 rows=0.0588) (actual rows=0.172 loops=99)
        -> Index lookup on x2 using d (d = x1.c)  (cost=4.82..4.82 rows=1) (actual rows=1 loops=99)

EXPLAIN FORMAT=TREE SELECT * FROM t1 x1, t1 x2, t1 x3 WHERE x1.c<921 AND x2.c<900;
EXPLAIN
-> Inner hash join (no condition)  (rows=829e+6)
    -> Inner hash join (no condition)  (rows=828900)
        -> Filter: (x1.c < 921)  (rows=921)
            -> Table scan on x1  (rows=1000)
        -> Hash
            -> Filter: (x2.c < 900)  (rows=900)
                -> Table scan on x2  (rows=1000)
    -> Hash
        -> Table scan on x3  (rows=1000)

EXPLAIN FORMAT=TREE SELECT * FROM t1 WHERE e=0 AND c=0;
EXPLAIN
-> Filter: ((t1.e = 0) and (t1.c = 0))  (rows=0.001)
    -> Table scan on t1  (rows=1000)

EXPLAIN FORMAT=TREE SELECT * FROM t1 WHERE e=0 AND c=0 AND f<999;
EXPLAIN
-> Filter: ((t1.e = 0) and (t1.c = 0) and (t1.f < 999))  (rows=999e-6)
    -> Table scan on t1  (rows=1000)

EXPLAIN FORMAT=TREE SELECT * FROM t1 x1, t1 x2 LIMIT 999999;
EXPLAIN
-> Limit: 999999 row(s)  (rows=999999)
    -> Inner hash join (no condition)  (rows=1e+6)
        -> Table scan on x1  (rows=1000)
        -> Hash
            -> Table scan on x2  (rows=1000)

EXPLAIN FORMAT=TREE SELECT * FROM t1 WHERE d=0 AND c=0 AND e=0 AND f=0 AND g=0;
EXPLAIN
-> Filter: ((t1.c = 0) and (t1.e = 0) and (t1.f = 0) and (t1.g = 0))  (rows=1e-12)
    -> Index lookup on t1 using d (d = 0)  (rows=1)

EXPLAIN FORMAT=TREE
SELECT * FROM t1 WHERE a=0 AND b=0 AND c=0 AND e=0 AND f=0 AND g=0 AND h=0;
EXPLAIN
-> Filter: ((t1.c = 0) and (t1.e = 0) and (t1.f = 0) and (t1.g = 0) and (t1.h = 0) and (t1.b = 0) and (t1.a = 0))  (rows=0)
    -> Table scan on t1  (rows=1000)

EXPLAIN FORMAT=TREE SELECT * FROM t1 x1, t1 x2, t1 x3 LIMIT 999500000;
EXPLAIN
-> Limit: 999500000 row(s)  (rows=1e+9)
    -> Inner hash join (no condition)  (rows=1e+9)
        -> Inner hash join (no condition)  (rows=1e+6)
            -> Table scan on x1  (rows=1000)
            -> Hash
                -> Table scan on x2  (rows=1000)
        -> Hash
            -> Table scan on x3  (rows=1000)

EXPLAIN FORMAT=TREE SELECT * FROM t1 x1, t1 x2, t1 x3 LIMIT 999499999;
EXPLAIN
-> Limit: 999499999 row(s)  (rows=999e+6)
    -> Inner hash join (no condition)  (rows=1e+9)
        -> Inner hash join (no condition)  (rows=1e+6)
            -> Table scan on x1  (rows=1000)
            -> Hash
                -> Table scan on x2  (rows=1000)
        -> Hash
            -> Table scan on x3  (rows=1000)

DROP TABLE num10,t1;
#
# Bug#34527697: EXPLAIN and EXPLAIN ANALYZE disagree on
#               covering index scans
#
CREATE TABLE t(
x INT,
y INT DEFAULT (x),
z VARCHAR(128) DEFAULT (REPEAT('z', 128)), KEY (x));
INSERT INTO t(x) VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10);
INSERT INTO t SELECT * FROM t;
INSERT INTO t SELECT * FROM t;
INSERT INTO t SELECT * FROM t;
INSERT INTO t SELECT * FROM t;
ANALYZE TABLE t;
Table	Op	Msg_type	Msg_text
test.t	analyze	status	OK
EXPLAIN FORMAT=TREE SELECT 1 FROM t;
EXPLAIN
-> Covering index scan on t using x  (rows=160)

EXPLAIN ANALYZE SELECT 1 FROM t;
EXPLAIN
-> Covering index scan on t using x  (rows=160) (actual rows=160 loops=1)

EXPLAIN FORMAT=TREE SELECT 1 FROM t WHERE x = 4;
EXPLAIN
-> Covering index lookup on t using x (x = 4)  (rows=16)

EXPLAIN ANALYZE SELECT 1 FROM t WHERE x = 4;
EXPLAIN
-> Covering index lookup on t using x (x = 4)  (rows=16) (actual rows=16 loops=1)

EXPLAIN FORMAT=TREE SELECT 1 FROM t WHERE x > 4;
EXPLAIN
-> Covering index range scan on t using x over (4 < x)  (rows=96)

EXPLAIN ANALYZE SELECT 1 FROM t WHERE x > 4;
EXPLAIN
-> Covering index range scan on t using x over (4 < x)  (rows=96) (actual rows=96 loops=1)

EXPLAIN FORMAT=TREE SELECT x FROM t ORDER BY MOD(x, 2);
EXPLAIN
-> Sort: (t.x % 2)  (rows=160)
    -> Covering index scan on t using x  (rows=160)

EXPLAIN ANALYZE SELECT x FROM t ORDER BY MOD(x, 2);
EXPLAIN
-> Sort: (t.x % 2)  (rows=160) (actual rows=160 loops=1)
    -> Covering index scan on t using x  (rows=160) (actual rows=160 loops=1)

EXPLAIN FORMAT=TREE SELECT t1.x FROM t t1, t t2 WHERE t1.x < t2.y;
EXPLAIN
-> Inner hash join (no condition), extra conditions: (t1.x < t2.y)  (rows=8532)
    -> Covering index scan on t1 using x  (rows=160)
    -> Hash
        -> Table scan on t2  (rows=160)

EXPLAIN ANALYZE SELECT t1.x FROM t t1, t t2 WHERE t1.x < t2.y;
EXPLAIN
-> Inner hash join (no condition), extra conditions: (t1.x < t2.y)  (rows=8532) (actual rows=11520 loops=1)
    -> Covering index scan on t1 using x  (rows=160) (actual rows=160 loops=1)
    -> Hash
        -> Table scan on t2  (rows=160) (actual rows=160 loops=1)

DROP TABLE t;
#
# Bug#34727172 EXPLAIN FORMAT=JSON returns invalid JSON
#              on INSERT statements with hypergraph
#
CREATE TABLE t (i INT);
INSERT INTO t VALUES (1), (2), (3);
EXPLAIN FORMAT=TREE INSERT INTO t VALUES (4), (5), (6);
EXPLAIN
-> Insert into t
    -> Rows fetched before execution

EXPLAIN FORMAT=TREE REPLACE INTO t VALUES (7), (8), (9);
EXPLAIN
-> Replace into t
    -> Rows fetched before execution

DROP TABLE t;
#
# Bug#35845129: Missing subqueries in EXPLAIN with hypergraph optimizer
#
CREATE TABLE t(x INT, y INT);
ANALYZE TABLE t;
Table	Op	Msg_type	Msg_text
test.t	analyze	status	OK
EXPLAIN FORMAT=TREE
SELECT x IN (SELECT x FROM t) FROM t GROUP BY x ORDER BY MAX(y);
EXPLAIN
-> Sort: `max(t.y)`  (rows=1)
    -> Stream results  (rows=1)
        -> Group aggregate: max(t.y)  (rows=1)
            -> Sort: t.x  (rows=1)
                -> Table scan on t  (rows=1)
-> Select #2 (subquery in projection; dependent)
    -> Filter: (<if>(outer_field_is_not_null, ((<cache>(t.x) = t.x) or (t.x is null)), true) and <if>(outer_field_is_not_null, <is_not_null_test>(t.x), true))  (rows=1)
        -> Table scan on t  (rows=1)

DROP TABLE t;
#
# Bug#36614948 No information about MRR in EXPLAIN with explain_json_format_version=2
#
SET @save_optimizer_switch = @@optimizer_switch;
SET optimizer_switch='mrr_cost_based=off,mrr=on';
CREATE TABLE t(x INT, y INT, z INT, KEY(x));
INSERT INTO t(x) VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10);
ANALYZE TABLE t;
Table	Op	Msg_type	Msg_text
test.t	analyze	status	OK
EXPLAIN FORMAT=TREE SELECT * FROM t WHERE x IN (3, 4, 6);
EXPLAIN
-> Index range scan (Multi-Range Read) on t using x over (x = 3) OR (x = 4) OR (x = 6)  (cost=0.885..2.66 rows=3)

DROP TABLE t;
SET @@optimizer_switch = @save_optimizer_switch;
# Bug#36773414: Explain format=tree does not display
#               information about semijoin strategy used
#
CREATE TABLE t(a INTEGER,b INTEGER);
INSERT INTO t VALUES(1,2),(2,3);
ANALYZE TABLE t;
Table	Op	Msg_type	Msg_text
test.t	analyze	status	OK
EXPLAIN FORMAT=tree SELECT a FROM t WHERE 4 IN (SELECT b+1 FROM t);
EXPLAIN
-> Nested loop inner join (FirstMatch)  (rows=2)
    -> Limit: 1 row(s)  (rows=1)
        -> Filter: (4 = (t.b + 1))  (rows=2)
            -> Table scan on t  (rows=2)
    -> Table scan on t  (rows=2)

EXPLAIN FORMAT=JSON INTO @var SELECT a FROM t WHERE 4 IN (SELECT b+1 FROM t);
SELECT
JSON_EXTRACT(@var, '$**.semijoin_strategy') AS first_match,
JSON_SEARCH(@var, 'one', '%FirstMatch%', NULL, '$**.operation') IS NOT NULL
AS operation_contains_firstmatch;
first_match	operation_contains_firstmatch
["firstmatch"]	1
EXPLAIN FORMAT=tree SELECT * FROM t WHERE b IN (SELECT a FROM t);
EXPLAIN
-> Hash semijoin (FirstMatch) (t.b = t.a)  (rows=0.283)
    -> Table scan on t  (rows=2)
    -> Hash
        -> Table scan on t  (rows=2)

EXPLAIN FORMAT=JSON INTO @var SELECT * FROM t WHERE b IN (SELECT a FROM t);
SELECT
JSON_EXTRACT(@var, '$**.semijoin_strategy') AS first_match,
JSON_SEARCH(@var, 'one', '%FirstMatch%', NULL, '$**.operation') IS NOT NULL
AS operation_contains_firstmatch;
first_match	operation_contains_firstmatch
["firstmatch"]	1
ALTER TABLE t ADD KEY(a,b);
ALTER TABLE t ADD KEY(b);
ANALYZE TABLE t;
Table	Op	Msg_type	Msg_text
test.t	analyze	status	OK
EXPLAIN FORMAT=tree SELECT b FROM t WHERE a IN ( SELECT t1.b FROM t AS t1);
EXPLAIN
-> Nested loop semijoin (FirstMatch)  (rows=1.41)
    -> Table scan on t  (rows=2)
    -> Covering index lookup on t1 using b (b = t.a)  (rows=1)

EXPLAIN FORMAT=JSON INTO @var SELECT b FROM t WHERE a IN ( SELECT t1.b FROM t AS t1);
SELECT
JSON_EXTRACT(@var, '$**.semijoin_strategy') AS first_match,
JSON_SEARCH(@var, 'one', '%FirstMatch%', NULL, '$**.operation') IS NOT NULL
AS operation_contains_firstmatch;
first_match	operation_contains_firstmatch
["firstmatch"]	1
EXPLAIN FORMAT=tree SELECT * FROM t WHERE a IN
(SELECT /*+ SEMIJOIN(LOOSESCAN) */ t1.a FROM t AS t1 JOIN t AS t2 ON t1.a=t2.b);
EXPLAIN
-> Nested loop inner join (LooseScan)  (rows=1.41)
    -> Remove duplicates from input grouped on t2.b  (rows=1.41)
        -> Nested loop inner join  (rows=2)
            -> Sort: t1.a  (rows=2)
                -> Table scan on t1  (rows=2)
            -> Covering index lookup on t2 using b (b = t1.a)  (rows=1)
    -> Covering index lookup on t using a (a = t2.b)  (rows=1)

EXPLAIN FORMAT=JSON INTO @var SELECT * FROM t WHERE a IN
(SELECT /*+ SEMIJOIN(LOOSESCAN) */ t1.a FROM t AS t1 JOIN t AS t2 ON t1.a=t2.b);
SELECT
JSON_EXTRACT(@var, '$**.semijoin_strategy') AS loosescan,
JSON_SEARCH(@var, 'one', '%LooseScan%', NULL, '$**.operation') IS NOT NULL
AS operation_contains_loosescan;
loosescan	operation_contains_loosescan
["loosescan"]	1
DROP TABLE t;
