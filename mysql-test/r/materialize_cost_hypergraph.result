CREATE TABLE t1(i INT, j INT);
INSERT INTO t1 VALUES (0,0),(1,1),(2,2),(3,3),(4,4);
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
#
# Bug#34302461: EXPLAIN cost and row estimates are wrong for UNION
#
# These two queries get the same plan and should therefore have the
# same row and cost estimates.
EXPLAIN FORMAT=TREE SELECT i FROM t1 UNION SELECT 7 ORDER BY i;
EXPLAIN
-> Sort: i  (cost=11.5..11.5 rows=6)
    -> Table scan on <union temporary>  (cost=3.94..8.88 rows=6)
        -> Union materialize with deduplication  (cost=2.95..2.95 rows=6)
            -> Table scan on t1  (cost=0.313..1.57 rows=5)
            -> Rows fetched before execution  (cost=0..0 rows=1)

EXPLAIN FORMAT=TREE SELECT * FROM (SELECT i FROM t1 UNION SELECT 7) d1
ORDER BY i;
EXPLAIN
-> Sort: d1.i  (cost=11.5..11.5 rows=6)
    -> Table scan on d1  (cost=3.94..8.88 rows=6)
        -> Union materialize with deduplication  (cost=2.95..2.95 rows=6)
            -> Table scan on t1  (cost=0.313..1.57 rows=5)
            -> Rows fetched before execution  (cost=0..0 rows=1)

# These two queries get the same plan and should therefore have the
# same row and cost estimates.
EXPLAIN FORMAT=TREE SELECT * FROM t1 UNION SELECT * FROM t1 ORDER BY i;
EXPLAIN
-> Sort: i  (cost=16.5..16.5 rows=10)
    -> Table scan on <union temporary>  (cost=6.5..11.9 rows=10)
        -> Union materialize with deduplication  (cost=5.9..5.9 rows=10)
            -> Table scan on t1  (cost=0.359..1.8 rows=5)
            -> Table scan on t1  (cost=0.359..1.8 rows=5)

EXPLAIN FORMAT=TREE SELECT * FROM (SELECT * FROM t1 UNION SELECT * FROM t1)
d1 ORDER BY i;
EXPLAIN
-> Sort: d1.i  (cost=16.5..16.5 rows=10)
    -> Table scan on d1  (cost=6.5..11.9 rows=10)
        -> Union materialize with deduplication  (cost=5.9..5.9 rows=10)
            -> Table scan on t1  (cost=0.359..1.8 rows=5)
            -> Table scan on t1  (cost=0.359..1.8 rows=5)

#
# Bug#33834146: 'EXPLAIN ANALYZE' cost + elapsed time not cumulative
# when using materialization
#
EXPLAIN FORMAT=TREE INSERT INTO t1 SELECT MAX(i), 3 FROM
(SELECT * FROM t1 ORDER BY j LIMIT 5) AS d1;
EXPLAIN
-> Insert into t1
    -> Table scan on <temporary>  (cost=18.1..18.1 rows=1)
        -> Temporary table  (cost=12.3..12.3 rows=1)
            -> Aggregate: max(d1.i)  (cost=12.1..12.1 rows=1)
                -> Table scan on d1  (cost=6.23..11 rows=5)
                    -> Materialize  (cost=5.05..5.05 rows=5)
                        -> Sort: t1.j, limit input to 5 row(s) per chunk  (cost=3.9..3.9 rows=5)
                            -> Table scan on t1  (cost=0.359..1.8 rows=5)

DROP TABLE t1;
