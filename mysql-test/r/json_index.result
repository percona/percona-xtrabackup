SET NAMES utf8;
#
# WL#8170: Expression analyzer for GC.
# Queries with GC and JSON_EXTRACT  compared to strings should use index
#
create table t1(
f1 json,
gc varchar(20) character set utf8mb4 as
(json_unquote(json_extract(f1,"$"))) stored,
key gc_idx(gc));
insert into t1(f1) values ('"qwe"'),('"rty"'),('"uiop"');
insert into t1(f1) values ('"zxc"'),('"vbn"'),('"mnb"');
insert into t1(f1) select f1 from t1;
insert into t1(f1) select f1 from t1;
insert into t1(f1) values ('"asd"'),('"asdf"'),('"asasas"');
set @save_opt_sw= @@optimizer_switch;
set @@optimizer_switch="index_condition_pushdown=off";
select f1 from t1 where gc = "asd";
f1
"asd"
explain select f1 from t1 where gc = "asd";
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ref	gc_idx	gc_idx	83	const	1	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1` from `test`.`t1` where (`test`.`t1`.`gc` = 'asd')
select f1 from t1 where json_extract(f1,"$") = "asd";
f1
"asd"
explain select f1 from t1 where json_extract(f1,"$") = "asd";
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ref	gc_idx	gc_idx	83	const	1	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1` from `test`.`t1` where (`test`.`t1`.`gc` = 'asd')
select f1 from t1 where "asd" = json_extract(f1,"$");
f1
"asd"
explain select f1 from t1 where "asd" = json_extract(f1,"$");
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ref	gc_idx	gc_idx	83	const	1	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1` from `test`.`t1` where ('asd' = `test`.`t1`.`gc`)
select f1 from t1 where gc > "z";
f1
"zxc"
"zxc"
"zxc"
"zxc"
explain select f1 from t1 where gc > "z";
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	range	gc_idx	gc_idx	83	NULL	4	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1` from `test`.`t1` where (`test`.`t1`.`gc` > 'z')
select f1 from t1 where json_extract(f1,"$") > "z";
f1
"zxc"
"zxc"
"zxc"
"zxc"
explain select f1 from t1 where json_extract(f1,"$") > "z";
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	range	gc_idx	gc_idx	83	NULL	4	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1` from `test`.`t1` where (`test`.`t1`.`gc` > 'z')
select f1 from t1 where gc > "v" and gc < "z";
f1
"vbn"
"vbn"
"vbn"
"vbn"
explain select f1 from t1 where gc > "v" and gc < "z";
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	range	gc_idx	gc_idx	83	NULL	4	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1` from `test`.`t1` where ((`test`.`t1`.`gc` > 'v') and (`test`.`t1`.`gc` < 'z'))
select f1 from t1 where json_extract(f1,"$") > "v" and json_extract(f1,"$") < "z";
f1
"vbn"
"vbn"
"vbn"
"vbn"
explain select f1 from t1 where json_extract(f1,"$") > "v" and json_extract(f1,"$") < "z";
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	range	gc_idx	gc_idx	83	NULL	4	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1` from `test`.`t1` where ((`test`.`t1`.`gc` > 'v') and (`test`.`t1`.`gc` < 'z'))
select f1 from t1 where gc between "v" and "z";
f1
"vbn"
"vbn"
"vbn"
"vbn"
explain select f1 from t1 where gc between "v" and "z";
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	range	gc_idx	gc_idx	83	NULL	4	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1` from `test`.`t1` where (`test`.`t1`.`gc` between 'v' and 'z')
select f1 from t1 where json_extract(f1,"$") between "v" and "z";
f1
"vbn"
"vbn"
"vbn"
"vbn"
Warnings:
Warning	1235	This version of MySQL doesn't yet support 'comparison of JSON in the BETWEEN operator'
explain select f1 from t1 where json_extract(f1,"$") between "v" and "z";
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	range	gc_idx	gc_idx	83	NULL	4	100.00	Using where
Warnings:
Warning	1235	This version of MySQL doesn't yet support 'comparison of JSON in the BETWEEN operator'
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1` from `test`.`t1` where (`test`.`t1`.`gc` between 'v' and 'z')
select f1 from t1 where gc in ("asd","asasas","asdf");
f1
"asasas"
"asd"
"asdf"
explain select f1 from t1 where gc in ("asd","asasas","asdf");
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	range	gc_idx	gc_idx	83	NULL	3	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1` from `test`.`t1` where (`test`.`t1`.`gc` in ('asd','asasas','asdf'))
select f1 from t1 where json_extract(f1,"$") in ("asd","asasas","asdf");
f1
"asasas"
"asd"
"asdf"
Warnings:
Warning	1235	This version of MySQL doesn't yet support 'comparison of JSON in the IN operator'
explain select f1 from t1 where json_extract(f1,"$") in ("asd","asasas","asdf");
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	range	gc_idx	gc_idx	83	NULL	3	100.00	Using where
Warnings:
Warning	1235	This version of MySQL doesn't yet support 'comparison of JSON in the IN operator'
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1` from `test`.`t1` where (`test`.`t1`.`gc` in ('asd','asasas','asdf'))
select f1 from t1 where json_unquote(json_extract(f1,"$"))="asd";
f1
"asd"
explain select f1 from t1 where json_unquote(json_extract(f1,"$"))="asd";
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ref	gc_idx	gc_idx	83	const	1	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`f1` AS `f1` from `test`.`t1` where (`test`.`t1`.`gc` = 'asd')
set @@optimizer_switch= @save_opt_sw;
drop table t1;
create table t1(f1 varchar(10), gc varchar(10) as (json_unquote(f1)) stored,
key gc_idx(gc));
insert into t1(f1) values ('"qwe"'),('"rty"'),('"uiop"');
select f1 from t1 where lower(f1)="qwe";
f1
drop table t1;
#
