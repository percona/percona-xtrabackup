#
# Bug#34402003: HYPERGRAPH BUG: Offload issue with execute statement.
#
CREATE TABLE t1(a INT);
CREATE TABLE t2(a INT);
CREATE TABLE t3(a INT);
INSERT INTO t1 VALUES (1),(2),(5);
INSERT INTO t2 VALUES (2);
INSERT INTO t3 VALUES (3);
ANALYZE TABLE t1, t2, t3;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
test.t2	analyze	status	OK
test.t3	analyze	status	OK
SET optimizer_trace='enabled=on';
PREPARE stmt FROM "EXPLAIN FORMAT=tree SELECT * FROM t1 LEFT JOIN t2 ON t1.a=t2.a JOIN t3 ON t1.a=5";
EXECUTE stmt;
EXPLAIN
-> Nested loop inner join  (cost=1.16..1.16 rows=0.3)
    -> Nested loop left join  (cost=0.91..0.91 rows=0.3)
        -> Filter: (t1.a = 5)  (cost=0.55..0.55 rows=0.3)
            -> Table scan on t1  (cost=0.08..0.25 rows=3)
        -> Filter: (t1.a = 5)  (cost=0.36..0.36 rows=0.01)
            -> Filter: (t2.a = 5)  (cost=0.35..0.35 rows=0.1)
                -> Table scan on t2  (cost=0.25..0.25 rows=1)
    -> Table scan on t3  (cost=0.25..0.25 rows=1)

SELECT
IF(TRACE LIKE '%Left join (extra join condition = (t1.a = 5) AND (t2.a = 5))%',
'OK', TRACE)
FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
IF(TRACE LIKE '%Left join (extra join condition = (t1.a = 5) AND (t2.a = 5))%',
'OK', TRACE)
OK
PREPARE stmt FROM "SELECT * FROM t1 LEFT JOIN t2 ON t1.a=t2.a JOIN t3 ON t1.a=5";
EXECUTE stmt;
a	a	a
5	NULL	3
SET optimizer_trace="enabled=off";
DROP TABLE t1,t2,t3;
CREATE TABLE t0 (a0 INTEGER);
CREATE TABLE t1 (a1 INTEGER);
CREATE TABLE t2 (a2 INTEGER);
CREATE TABLE t3 (a3 INTEGER);
INSERT INTO t0 VALUES (0),(1);
INSERT INTO t1 VALUES (0),(1);
INSERT INTO t2 VALUES (1);
INSERT INTO t3 VALUES (1);
EXPLAIN FORMAT=tree SELECT * FROM t0, t1 LEFT JOIN (t2,t3) ON a1=5 WHERE a0=a1 AND a0=1;
EXPLAIN
-> Nested loop left join  (cost=0.90..0.90 rows=0.04)
    -> Nested loop inner join  (cost=0.90..0.90 rows=0.04)
        -> Filter: (t0.a0 = 1)  (cost=0.45..0.45 rows=0.2)
            -> Table scan on t0  (cost=0.12..0.25 rows=2)
        -> Filter: (t1.a1 = 1)  (cost=0.45..0.45 rows=0.2)
            -> Table scan on t1  (cost=0.12..0.25 rows=2)
    -> Zero rows (Join condition rejects all rows)  (cost=0.00..0.00 rows=0)

SELECT * FROM t0, t1 LEFT JOIN (t2,t3) ON a1=5 WHERE a0=a1 AND a0=1;
a0	a1	a2	a3
1	1	NULL	NULL
DROP TABLE t0,t1,t2,t3;
#
# Bug#34401789: Enable constant propagation in conditions
#               for hypergraph optimizer
#
CREATE TABLE t1 (f1 INTEGER);
EXPLAIN FORMAT=tree
SELECT f1 FROM t1 GROUP BY f1 HAVING f1 = 10 AND f1 <> 11;
EXPLAIN
-> Filter: (t1.f1 = 10)  (cost=0.55..0.55 rows=0.1)
    -> Group (no aggregates)  (cost=0.45..0.45 rows=1)
        -> Sort: t1.f1  (cost=0.35..0.35 rows=1)
            -> Table scan on t1  (cost=0.25..0.25 rows=1)

DROP TABLE t1;
#
# Bug#34080394: Hypergraph Offload issue : Problem in
#               ExtractRequiredItemsForFilter.
#
CREATE TABLE t1 (f1 YEAR);
EXPLAIN FORMAT=tree SELECT * FROM t1 WHERE f1 = 1 AND f1 <> 11;
EXPLAIN
-> Filter: (t1.f1 = 2001)  (cost=0.35..0.35 rows=0.1)
    -> Table scan on t1  (cost=0.25..0.25 rows=1)

DROP TABLE t1;
#
# Bug#34504697: Hypergraph: Assertion
#               `!(used_tabs & (~read_tables & ~filter_for_table))'
#               failed
#
CREATE TABLE t1 (f1 INTEGER);
SELECT 1
FROM t1 LEFT JOIN (SELECT t2.*
FROM (t1 AS t2 INNER JOIN t1 AS t3 ON (t3.f1 = t2.f1))
WHERE (t3.f1 <> 1 OR t2.f1 > t2.f1)) AS dt
ON (t1.f1 = dt.f1);
1
DROP TABLE t1;
#
# Bug#34503695:Hypergraph: mysqld crash-signal 11
#              -CommonSubexpressionElimination
#
CREATE TABLE t1 (f1 INTEGER);
SELECT * FROM t1
WHERE t1.f1 NOT IN (SELECT t2.f1
FROM (t1 AS t2 JOIN t1 AS t3 ON (t3.f1 = t2.f1))
WHERE (t3.f1 <> t2.f1 OR t3.f1 < t2.f1));
f1
DROP TABLE t1;
#
# Bug#34527126: Some rapid tests in MTR fail with hypergraph
#               when run in --ps-protocol mode
#
CREATE TABLE t1(f1 INTEGER);
PREPARE ps FROM
"SELECT * FROM (WITH RECURSIVE qn AS (SELECT 1 FROM t1 UNION ALL
                                      SELECT 1 FROM t1 STRAIGHT_JOIN qn)
                                     SELECT * FROM qn) AS dt1,
                                     (SELECT COUNT(*) FROM t1) AS dt2";
EXECUTE ps;
ERROR HY000: In recursive query block of Recursive Common Table Expression 'qn', the recursive table must neither be in the right argument of a LEFT JOIN, nor be forced to be non-first with join order hints
DROP TABLE t1;
#
# Bug#34494877: WL#14449: Offload issue: RapidException (3):
#               rpdrqctr_transcode.c:1447 @ rpdoqc_
#
CREATE TABLE t(x INT, y INT);
INSERT INTO t VALUES (1, 10), (2, 20), (3, 30);
ANALYZE TABLE t;
Table	Op	Msg_type	Msg_text
test.t	analyze	status	OK
EXPLAIN FORMAT=TREE SELECT * FROM
t RIGHT JOIN
(SELECT MAX(y) AS m FROM t WHERE FALSE GROUP BY x) AS dt
ON t.x = dt.m;
EXPLAIN
-> Zero rows (Impossible WHERE)  (cost=0.00..0.00 rows=0)

SELECT * FROM
t RIGHT JOIN
(SELECT MAX(y) AS m FROM t WHERE FALSE GROUP BY x) AS dt
ON t.x = dt.m;
x	y	m
EXPLAIN FORMAT=TREE SELECT * FROM
t LEFT JOIN
(SELECT MAX(y) AS m FROM t WHERE FALSE GROUP BY x) AS dt
ON t.x = dt.m;
EXPLAIN
-> Nested loop left join  (rows=3)
    -> Table scan on t  (rows=3)
    -> Zero rows (Impossible WHERE)  (rows=0)

SELECT * FROM
t LEFT JOIN
(SELECT MAX(y) AS m FROM t WHERE FALSE GROUP BY x) AS dt
ON t.x = dt.m;
x	y	m
1	10	NULL
2	20	NULL
3	30	NULL
EXPLAIN FORMAT=TREE SELECT * FROM
t AS t1 LEFT JOIN
(t AS t2
INNER JOIN (SELECT MAX(y) AS m FROM t WHERE FALSE GROUP BY x) AS dt
ON t2.x = dt.m)
ON t1.x = t2.y;
EXPLAIN
-> Nested loop left join  (rows=3)
    -> Table scan on t1  (rows=3)
    -> Zero rows (impossible WHERE)  (rows=0)

SELECT * FROM
t AS t1 LEFT JOIN
(t AS t2
INNER JOIN (SELECT MAX(y) AS m FROM t WHERE FALSE GROUP BY x) AS dt
ON t2.x = dt.m)
ON t1.x = t2.y;
x	y	x	y	m
1	10	NULL	NULL	NULL
2	20	NULL	NULL	NULL
3	30	NULL	NULL	NULL
DROP TABLE t;
