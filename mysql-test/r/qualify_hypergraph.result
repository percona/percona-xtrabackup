CREATE TABLE t1 (
a int NOT NULL,
b int NOT NULL,
c double NOT NULL
);
INSERT INTO t1 VALUES (1,1,5),(1,1,2),(1,2,5),(2,1,4),(2,1,1),(2,2,2),(2,2,3),
(2,3,1),(2,3,1),(3,3,3),(3,3,5),(3,4,5),(4,4,5),(4,4,3),(5,3,1);
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
SELECT a, b, c, ROW_NUMBER() OVER (PARTITION BY a ORDER BY a,b,c) AS rnk
FROM t1 QUALIFY rnk>1;
a	b	c	rnk
1	1	5	2
1	2	5	3
2	1	4	2
2	2	2	3
2	2	3	4
2	3	1	5
2	3	1	6
3	3	5	2
3	4	5	3
4	4	5	2
SELECT a, b, c
FROM t1 QUALIFY ROW_NUMBER() OVER (PARTITION BY a ORDER BY a,b,c)>1;
a	b	c
1	1	5
1	2	5
2	1	4
2	2	2
2	2	3
2	3	1
2	3	1
3	3	5
3	4	5
4	4	5
SELECT a, b, c
FROM t1
QUALIFY ROW_NUMBER() OVER () >
(SELECT MIN(c) FROM t1 GROUP BY a  HAVING MAX(c) > 3);
ERROR 21000: Subquery returns more than 1 row
SELECT a, b, c
FROM t1
QUALIFY (MIN(a) OVER () + RANK() OVER () ) > 5;
a	b	c
SELECT a, b, c,
MIN(b) OVER (PARTITION BY b ORDER BY a DESC,b ASC,c DESC) AS mn
FROM t1
QUALIFY ( RANK() OVER () + mn) >5;
a	b	c	mn
SELECT a, b, c,
MIN(b) OVER (PARTITION BY b ORDER BY a DESC,b ASC,c DESC) AS mn,
RANK() OVER (PARTITION BY b ORDER BY a DESC,b ASC,c DESC) AS rnk
FROM t1
QUALIFY ( rnk + mn) >5;
a	b	c	mn	rnk
2	3	1	3	4
2	3	1	3	4
3	3	3	3	3
3	4	5	4	3
4	4	3	4	2
SELECT a, b,
MIN(b) OVER (PARTITION BY b ORDER BY a DESC,b ASC,c DESC) AS mn,
RANK() OVER (PARTITION BY b ORDER BY a DESC,b ASC,c DESC) AS rnk
FROM t1
QUALIFY ROW_NUMBER() OVER (PARTITION BY a ORDER BY b)>1;
a	b	mn	rnk
1	1	1	4
1	2	2	3
2	1	1	2
2	2	2	1
2	2	2	2
2	3	3	4
2	3	3	4
3	3	3	3
3	4	4	3
4	4	4	2
SELECT
a, b, ( SELECT sum(rnk)
FROM ( SELECT ROW_NUMBER() OVER (PARTITION BY a ORDER BY a,b,c) AS rnk
FROM t1 qualify rnk > t0.a
) as z
)
FROM (values row(1,10), row(2,20)) as t0(a,b);
a	b	( SELECT sum(rnk)
)
) as z
1	10	32
2	20	24
FROM ( SELECT ROW_NUMBER() OVER (PARTITION BY a ORDER BY a,b,c) AS rnk
FROM t1 qualify rnk > t0.a
##
## Syntax checks
##
SELECT  b
FROM t1
QUALIFY ROW_NUMBER() OVER (PARTITION BY a ORDER BY a)>1;
b
1
1
2
2
2
3
3
3
4
4
SELECT  b
FROM t1
QUALIFY ROW_NUMBER() OVER ()>1 and 2*b>2;
b
2
2
2
3
3
3
3
3
4
4
4
SELECT  b
FROM t1
QUALIFY ROW_NUMBER() OVER (PARTITION BY a ORDER BY a)>1 and c>2;
b
2
2
3
4
4
SELECT  b
FROM t1
QUALIFY ROW_NUMBER() OVER (PARTITION BY a ORDER BY a)>1 and a>2;
b
3
4
4
SELECT a, b, c, ROW_NUMBER() OVER () AS rnk
FROM t1
QUALIFY 2*rnk>1;
a	b	c	rnk
1	1	2	2
1	1	5	1
1	2	5	3
2	1	1	5
2	1	4	4
2	2	2	6
2	2	3	7
2	3	1	8
2	3	1	9
3	3	3	10
3	3	5	11
3	4	5	12
4	4	3	14
4	4	5	13
5	3	1	15
SELECT a, b, c, ROW_NUMBER() OVER () AS rnk
FROM t1
QUALIFY a+rnk>5;
a	b	c	rnk
2	1	1	5
2	1	4	4
2	2	2	6
2	2	3	7
2	3	1	8
2	3	1	9
3	3	3	10
3	3	5	11
3	4	5	12
4	4	3	14
4	4	5	13
5	3	1	15
SELECT a, b, c
FROM t1
QUALIFY AVG(ROW_NUMBER() OVER (PARTITION BY a ORDER BY a,b,c))>1;
ERROR HY000: You cannot use the window function 'row_number' in this context.'
SELECT a FROM t1 QUALIFY b> 10;
ERROR HY000: QUALIFY clause cannot be used without a window function.
SELECT a, b, ROW_NUMBER() OVER (PARTITION BY a ORDER BY a,b) AS rnk
FROM t1
QUALIFY c>1;
a	b	rnk
1	1	1
1	1	2
1	2	3
2	1	1
2	2	3
2	2	4
3	3	1
3	3	2
3	4	3
4	4	1
4	4	2
SELECT a, b, ROW_NUMBER() OVER (PARTITION BY a ORDER BY a,b) AS rnk
FROM t1
QUALIFY 2*a>1;
a	b	rnk
1	1	1
1	1	2
1	2	3
2	1	1
2	1	2
2	2	3
2	2	4
2	3	5
2	3	6
3	3	1
3	3	2
3	4	3
4	4	1
4	4	2
5	3	1
SELECT a
FROM t1
QUALIFY ROW_NUMBER() OVER (PARTITION BY a) + b > 0;
a
1
1
1
2
2
2
2
2
2
3
3
3
4
4
5
SELECT a, b, ROW_NUMBER() OVER (PARTITION BY a ORDER BY a,b,c) AS rnk
FROM t1
QUALIFY rnk>1 and c>2;
a	b	rnk
1	1	2
1	2	3
2	1	2
2	2	4
3	3	2
3	4	3
4	4	2
SELECT MAX(a)
FROM t1 GROUP BY b,c WITH ROLLUP
QUALIFY (MIN(a) OVER () + RANK() OVER () ) > 5;
ERROR 42000: Expression #1 of QUALIFY clause is not in GROUP BY clause and contains nonaggregated column 'test.t1.a' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by
SELECT MAX(a)
FROM t1 GROUP BY b,c WITH ROLLUP
QUALIFY (MIN(a) OVER () + RANK() OVER () ) >= 2;
ERROR 42000: Expression #1 of QUALIFY clause is not in GROUP BY clause and contains nonaggregated column 'test.t1.a' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by
SELECT MAX(a) FROM t1
GROUP BY b, 2*c WITH ROLLUP
HAVING AVG(c)>1
QUALIFY MIN(2*b) OVER () + RANK() OVER () > 3;
MAX(a)
SELECT 1 FROM t1
GROUP BY b, 2*c WITH ROLLUP
HAVING AVG(c)>1
QUALIFY MIN(2*b) OVER () + RANK() OVER () + MAX(a) > 4;
1
1
1
1
1
1
1
1
1
1
1
1
1
SELECT MAX(b) FROM t1
GROUP BY b, 2*c WITH ROLLUP
HAVING AVG(c)>1
QUALIFY MIN(2*b) OVER () + RANK() OVER () + MAX(a) > 4;
MAX(b)
1
1
2
2
2
3
3
3
4
4
4
4
SELECT MAX(a) FROM t1
GROUP BY b,c WITH ROLLUP
QUALIFY (MIN(a) OVER ()) > 1;
ERROR 42000: Expression #1 of QUALIFY clause is not in GROUP BY clause and contains nonaggregated column 'test.t1.a' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by
SELECT MAX(a)
FROM t1
GROUP BY b,c WITH ROLLUP
QUALIFY (MIN(a) OVER () + RANK() OVER () ) > 5;
ERROR 42000: Expression #1 of QUALIFY clause is not in GROUP BY clause and contains nonaggregated column 'test.t1.a' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by
SET @orig_sql_mode = @@sql_mode;
SET @@sql_mode     = '';
SELECT MAX(a)
FROM t1 GROUP BY b WITH ROLLUP
QUALIFY (MIN(c) OVER () + RANK() OVER () ) >= 2;
MAX(a)
2
2
4
5
5
SELECT MAX(a)
FROM t1 GROUP BY b,c WITH ROLLUP
QUALIFY (MIN(a) OVER () + RANK() OVER () ) >= 2;
MAX(a)
1
1
1
2
2
2
2
2
2
3
3
4
4
4
5
5
5
SELECT MAX(a)
FROM t1 GROUP BY b,c WITH ROLLUP
QUALIFY (MIN(a) OVER () + RANK() OVER () ) > 5;
MAX(a)
SELECT MAX(a) FROM t1
GROUP BY b,c WITH ROLLUP
QUALIFY (MIN(a) OVER ()) > 1;
MAX(a)
SELECT MAX(a)
FROM t1
GROUP BY b,c WITH ROLLUP
QUALIFY (MIN(a) OVER () + RANK() OVER () ) > 5;
MAX(a)
SELECT a FROM t1 GROUP BY b, 2*c WITH ROLLUP
HAVING AVG(c)>1
QUALIFY ROW_NUMBER() OVER () + MAX(a) > 4;
a
1
1
1
2
2
3
3
3
3
3
3
4
SELECT a FROM t1
GROUP BY b, 2*c WITH ROLLUP
QUALIFY LEAD(c,2) OVER () > 4;
a
1
2
2
2
2
3
3
3
4
SELECT a FROM t1
GROUP BY b, 2*c WITH ROLLUP
QUALIFY LAG(c,6) OVER () > 4;
a
2
3
3
4
SELECT b,c, MAX(a)
FROM t1 GROUP BY b,c WITH ROLLUP
QUALIFY LEAD(b) OVER(ORDER BY a,b,c) >1 AND b IS NULL;
b	c	MAX(a)
NULL	NULL	5
SET @@sql_mode = @orig_sql_mode;
DROP TABLE t1;
#
# Bug 35800175 - #wl15864-Query does not gets offloaded when QUALIFY does not use alias name
#
CREATE TABLE sales (salesperson_id INT, sale_amount DECIMAL(10, 2));
INSERT INTO sales (salesperson_id, sale_amount)
VALUES (1, 100.00), (2, 200.00), (1, 150.00),
(3, 300.00),(2, 120.00), (3, 250.00);
ANALYZE TABLE sales;
Table	Op	Msg_type	Msg_text
test.sales	analyze	status	OK
SELECT RANK() OVER () AS sales_rank
FROM sales QUALIFY SUM(sale_amount) > 300;
sales_rank
1
#
# Qualify with VIEW
#
CREATE VIEW v1 as
SELECT salesperson_id,   SUM(sale_amount) AS total_sales,
RANK() OVER (ORDER BY SUM(sale_amount) DESC) AS sales_rank
FROM sales GROUP BY salesperson_id
QUALIFY SUM(sale_amount) > 3000;
SHOW CREATE VIEW v1;
View	Create View	character_set_client	collation_connection
v1	CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v1` AS select `sales`.`salesperson_id` AS `salesperson_id`,sum(`sales`.`sale_amount`) AS `total_sales`,rank() OVER (ORDER BY sum(`sales`.`sale_amount`) desc )  AS `sales_rank` from `sales` group by `sales`.`salesperson_id` qualify (sum(`sales`.`sale_amount`) > 3000)	utf8mb4	utf8mb4_0900_ai_ci
SELECT * FROM v1;
salesperson_id	total_sales	sales_rank
SET @start_value_optimizer_switch = @@optimizer_switch;
SET optimizer_switch="hypergraph_optimizer=off";
SHOW CREATE VIEW v1;
View	Create View	character_set_client	collation_connection
v1	CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v1` AS select `sales`.`salesperson_id` AS `salesperson_id`,sum(`sales`.`sale_amount`) AS `total_sales`,rank() OVER (ORDER BY sum(`sales`.`sale_amount`) desc )  AS `sales_rank` from `sales` group by `sales`.`salesperson_id` qualify (sum(`sales`.`sale_amount`) > 3000)	utf8mb4	utf8mb4_0900_ai_ci
SELECT * FROM v1;
ERROR HY000: 'QUALIFY clause' can be used only if the hypergraph optimizer is enabled.
CREATE VIEW v2 as
SELECT SUM(sale_amount) AS total_sales,
RANK() OVER (ORDER BY SUM(sale_amount) DESC) AS sales_rank
FROM sales GROUP BY salesperson_id
QUALIFY SUM(sale_amount) > 3000;
SHOW CREATE VIEW v2;
View	Create View	character_set_client	collation_connection
v2	CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v2` AS select sum(`sales`.`sale_amount`) AS `total_sales`,rank() OVER (ORDER BY sum(`sales`.`sale_amount`) desc )  AS `sales_rank` from `sales` group by `sales`.`salesperson_id` qualify (sum(`sales`.`sale_amount`) > 3000)	utf8mb4	utf8mb4_0900_ai_ci
SELECT * FROM v2;
ERROR HY000: 'QUALIFY clause' can be used only if the hypergraph optimizer is enabled.
SET @@optimizer_switch = @start_value_optimizer_switch;
SHOW CREATE VIEW v2;
View	Create View	character_set_client	collation_connection
v2	CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v2` AS select sum(`sales`.`sale_amount`) AS `total_sales`,rank() OVER (ORDER BY sum(`sales`.`sale_amount`) desc )  AS `sales_rank` from `sales` group by `sales`.`salesperson_id` qualify (sum(`sales`.`sale_amount`) > 3000)	utf8mb4	utf8mb4_0900_ai_ci
SELECT * FROM v2;
total_sales	sales_rank
DROP VIEW v1, v2;
DROP TABLE sales;
#
# Bug 35809648 - #wl15864-Mysqld Crash-Assertion-Item_func::contributes_to_filter
#
CREATE TABLE t1 (pk INT);
CREATE TABLE t2 (pk INT, col_decimal_10_8 DECIMAL(10,8));
ANALYZE TABLE t1, t2;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
test.t2	analyze	status	OK
SET @start_value_optimizer_switch = @@optimizer_switch;
SET optimizer_switch="subquery_to_derived=on,hypergraph_optimizer=on";
SELECT  RANK() OVER () AS field3
FROM t1
WHERE ( SELECT  MAX( t2.col_decimal_10_8 ) AS derived_1
FROM  t2) IS NOT NULL
QUALIFY field3 <=> 'a';
field3
SET @@optimizer_switch = @start_value_optimizer_switch;
DROP TABLE t1, t2;
#
# Bug 35826727 - #wl15864-Mysqld-crash-Segmentation Fault- Item_ref::fix_fields
#
CREATE TABLE t1 (col_varchar137 VARCHAR(137), col_float FLOAT);
CREATE TABLE t2 (pk INT);
ANALYZE TABLE t1, t2;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
test.t2	analyze	status	OK
SELECT t1.col_varchar137 AS field1
FROM t1, LATERAL ( SELECT t1.col_float AS field2 FROM  t2 ) AS table6
QUALIFY field2 != 'USA';
ERROR HY000: QUALIFY clause cannot be used without a window function.
DROP TABLE t1, t2;
#
# Bug 35831314 - #wl15864-Mysqld Crash-Assertion-Item_func::contributes_to_filter
#
CREATE TABLE t1 (pk INT, col_float_key FLOAT );
CREATE TABLE t2 (col_varchar132 VARCHAR(132), col_timestamp_key TIMESTAMP);
ANALYZE TABLE t1, t2;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
test.t2	analyze	status	OK
SELECT CUME_DIST() OVER () AS field1
FROM t1
WHERE
EXISTS ( SELECT LEAST(t2.col_varchar132, t2.col_timestamp_key) AS SQ1_field1
FROM  t2
)
AND ( FLOOR(ATAN(t1.col_float_key) ) IS NULL )
QUALIFY field1 = 'V' COLLATE utf8mb4_icelandic_ci;
field1
DROP TABLE t1, t2;
#
# Bug 35846292 - #wl15864-Mysqld Crash-Item_func::contributes_to_filter
#
CREATE TABLE cc (col_time TIME, col_year YEAR, col_double_key DOUBLE,
col_char_255 CHAR(255));
ANALYZE TABLE cc;
Table	Op	Msg_type	Msg_text
test.cc	analyze	status	OK
SET @orig_sql_mode = @@sql_mode;
SET @@sql_mode     = '';
SELECT SUM( col_time + CAST(col_year AS FLOAT) ) AS field1,
ROW_NUMBER() OVER () AS field2
FROM cc
WHERE (12, 'H') IN ( SELECT
DENSE_RANK() OVER ( ORDER BY col_double_key ),
FIRST_VALUE(col_char_255)
OVER ( ROWS BETWEEN CURRENT ROW
AND UNBOUNDED FOLLOWING )
FROM cc )
QUALIFY field1 <=> 'M';
field1	field2
SET @@sql_mode = @orig_sql_mode;
DROP TABLE cc;
#
# Bug#36172350: Wrong result with QUALIFY referencing columns not present
#               in the SELECT list
#
CREATE TABLE t(id INT PRIMARY KEY, x INT, b BLOB);
INSERT INTO t(id, x) VALUES (1,1),(2,1),(3,1),(4,1),(5,0);
SELECT id, b FROM t GROUP BY id WINDOW w AS (ORDER BY id) QUALIFY x <> 1;
id	b
5	NULL
SELECT id, b, ROW_NUMBER() OVER w FROM t
GROUP BY id WINDOW w AS (ORDER BY id) QUALIFY x <> 1;
id	b	ROW_NUMBER() OVER w
5	NULL	5
SELECT id, b, ROW_NUMBER() OVER w FROM t
WINDOW w AS (ORDER BY id) QUALIFY x + SUM(x) OVER w <> 4;
id	b	ROW_NUMBER() OVER w
1	NULL	1
2	NULL	2
4	NULL	4
SELECT id, x, ROW_NUMBER() OVER w FROM t GROUP BY id, x
WINDOW w AS (ORDER BY id) QUALIFY x <> 1;
id	x	ROW_NUMBER() OVER w
5	0	5
SELECT id, x, ROW_NUMBER() OVER w FROM t GROUP BY id, x WITH ROLLUP
WINDOW w AS (ORDER BY id) QUALIFY x <> 1;
id	x	ROW_NUMBER() OVER w
5	0	10
SELECT id FROM t GROUP BY id, x WINDOW w AS (ORDER BY id) QUALIFY x <> 1;
id
5
SELECT id, x, ROW_NUMBER() OVER w FROM (SELECT * FROM t) AS dt
GROUP BY id, x WITH ROLLUP WINDOW w AS (ORDER BY id) QUALIFY x <> 1;
id	x	ROW_NUMBER() OVER w
5	0	10
SELECT id, ROW_NUMBER() OVER w FROM (SELECT * FROM t) AS dt
GROUP BY id, x WITH ROLLUP WINDOW w AS (ORDER BY id) QUALIFY x <> 1;
id	ROW_NUMBER() OVER w
5	10
DROP TABLE t;
#
# Bug#36313072: mysqld crash in Item_ref::real_item
#
CREATE TABLE t1 (f1 INTEGER);
SELECT NTILE(1) OVER() FROM (SELECT * FROM t1) as dt QUALIFY f1 AND FALSE;
NTILE(1) OVER()
DROP TABLE t1;
