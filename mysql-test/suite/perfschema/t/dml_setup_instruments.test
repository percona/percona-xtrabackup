# Tests for PERFORMANCE_SCHEMA

# The query result are not re producible,
# due to variations in platforms and plugins
# We still execute the select statement, for:
# - code coverage
# - make sure it does not crash
# - valgrind coverage

--disable_result_log
select * from performance_schema.setup_instruments;
--enable_result_log

# DEBUG_SYNC::mutex is dependent on the build (DEBUG only)

select * from performance_schema.setup_instruments
  where name like 'Wait/Synch/Mutex/sql/%'
  and name not in ('wait/synch/mutex/sql/DEBUG_SYNC::mutex')
  order by name limit 10;

# CRYPTO_dynlock_value::lock is dependent on the build (SSL)
# LOCK_named_pipe_full_access_group is dependent on the build (Windows only)

select * from performance_schema.setup_instruments
  where name like 'Wait/Synch/Rwlock/sql/%'
  and name not in (
  'wait/synch/rwlock/sql/CRYPTO_dynlock_value::lock',
  'wait/synch/rwlock/sql/LOCK_named_pipe_full_access_group')
  order by name limit 10;

# COND_handler_count is dependent on the build (Windows only)
# DEBUG_SYNC::cond is dependent on the build (DEBUG only)
# COND_main_thread_in_use is dependent on the build (non Windows)
# COND_start_signal_handler is dependent on the build (non Windows)

select * from performance_schema.setup_instruments
  where name like 'Wait/Synch/Cond/sql/%'
  and name not in (
    'wait/synch/cond/sql/COND_open',
    'wait/synch/cond/sql/COND_handler_count',
    'wait/synch/cond/sql/DEBUG_SYNC::cond',
    'wait/synch/cond/sql/COND_socket_listener_active',
    'wait/synch/cond/sql/COND_start_signal_handler')
  order by name limit 10;

--disable_result_log
select * from performance_schema.setup_instruments
  where name='Wait';
--enable_result_log

--disable_result_log
select * from performance_schema.setup_instruments
  where enabled='YES';
--enable_result_log

--error ER_TABLEACCESS_DENIED_ERROR
insert into performance_schema.setup_instruments
  set name='FOO', enabled='YES', timed='YES';

--error ER_WRONG_PERFSCHEMA_USAGE
update performance_schema.setup_instruments
  set name='FOO';

update performance_schema.setup_instruments
  set enabled='NO';

update performance_schema.setup_instruments
  set timed='NO';

--disable_result_log
select * from performance_schema.setup_instruments;
--enable_result_log

update performance_schema.setup_instruments
  set enabled='YES', timed='YES';

--error ER_TABLEACCESS_DENIED_ERROR
delete from performance_schema.setup_instruments;

--error ER_TABLEACCESS_DENIED_ERROR
delete from performance_schema.setup_instruments
  where name like 'Wait/Synch/%';

LOCK TABLES performance_schema.setup_instruments READ;
UNLOCK TABLES;

LOCK TABLES performance_schema.setup_instruments WRITE;
UNLOCK TABLES;

--echo
--echo # Bug#13813193 ASSERTION `TABLE->READ_SET ==
--echo # &TABLE->DEF_READ_SET' FAILED / MYSQL_UPDATE
--echo
UPDATE performance_schema.setup_instruments SET timed='NO'
ORDER BY RAND();

# PROPERTIES column

--error ER_WRONG_PERFSCHEMA_USAGE
update performance_schema.setup_instruments
  set PROPERTIES='singleton';

# Global instruments should not have controlled by default
# NOW() as fixme is to prevent recording 'exceptions' in .result
select NOW() as fixme, NAME, PROPERTIES, FLAGS
  from performance_schema.setup_instruments
  where NAME like 'memory/%'
  AND (find_in_set('global_statistics', PROPERTIES) != 0)
  AND (find_in_set('controlled_by_default', PROPERTIES) != 0);

# FLAGS column

select distinct FLAGS from performance_schema.setup_instruments
  ORDER BY FLAGS;

# 'controlled_by_default' are 'controlled'
select distinct FLAGS from performance_schema.setup_instruments
  WHERE (find_in_set('controlled_by_default', PROPERTIES) != 0);

# Not 'controlled_by_default' are not 'controlled'
select distinct FLAGS from performance_schema.setup_instruments
  WHERE (find_in_set('controlled_by_default', PROPERTIES) = 0);

select * from performance_schema.setup_instruments
  WHERE (FLAGS IS NULL) AND (NAME LIKE "memory/%");

select * from performance_schema.setup_instruments
  WHERE (FLAGS IS NOT NULL) AND (NAME NOT LIKE "memory/%");

--disable_result_log
# WARN_DATA_TRUNCATED, prints a row number
--error 1265
update performance_schema.setup_instruments
  set FLAGS='garbage' where name like "wait/%";
--enable_result_log

select distinct FLAGS from performance_schema.setup_instruments
  where name like "wait/%";

update performance_schema.setup_instruments
  set FLAGS = NULL where name like "wait/%";

select distinct FLAGS from performance_schema.setup_instruments
  where name like "wait/%";

update performance_schema.setup_instruments
  set FLAGS = '' where name like "wait/%";

select distinct FLAGS from performance_schema.setup_instruments
  where name like "wait/%";

update performance_schema.setup_instruments
  set FLAGS = 'controlled' where name like "wait/%";

select distinct FLAGS from performance_schema.setup_instruments
  where name like "wait/%";

--disable_result_log
# WARN_DATA_TRUNCATED, prints a row number
--error 1265
update performance_schema.setup_instruments
  set FLAGS = 'garbage' where name like "memory/%";
--enable_result_log

select distinct FLAGS from performance_schema.setup_instruments
  where name like "memory/%";

update performance_schema.setup_instruments
  set FLAGS = NULL where name like "memory/%";

select distinct FLAGS from performance_schema.setup_instruments
  where name like "memory/%";

update performance_schema.setup_instruments
  set FLAGS = '' where name like "memory/%";

select distinct FLAGS from performance_schema.setup_instruments
  where name like "memory/%";

# Set the controlled flag on everything,
# and see on which instruments it is actually set.
update performance_schema.setup_instruments
  set FLAGS = 'controlled' where name like "memory/%";

# Global instruments are never controlled,
select count(*) from performance_schema.setup_instruments
  where name like "memory/%"
  and (find_in_set('global_statistics', PROPERTIES) != 0)
  and (FLAGS = 'controlled');

# session instruments are controlled
select count(*) from performance_schema.setup_instruments
  where name like "memory/%"
  and (find_in_set('global_statistics', PROPERTIES) = 0)
  and (find_in_set('controlled', FLAGS) = 0);

# Test cleanup

update performance_schema.setup_instruments
  set enabled='YES', TIMED='YES';

update performance_schema.setup_instruments
  set FLAGS = '';

update performance_schema.setup_instruments
  set FLAGS = 'controlled'
  where (find_in_set('controlled_by_default', PROPERTIES));


