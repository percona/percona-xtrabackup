#########
# SETUP #
#########
UPDATE performance_schema.setup_loggers SET level='none';
INSTALL COMPONENT 'file://component_test_server_telemetry_logs_export';
INSTALL COMPONENT 'file://component_test_server_telemetry_logs_client';
##############
# Operations #
##############
# List available loggers
SELECT * FROM performance_schema.setup_loggers;
NAME	LEVEL	DESCRIPTION
logger/error/error_log	none	MySQL error logger
logger/test_logs_componentA/test1	info	Test logger #1
logger/test_logs_componentA/test2	info	Test logger #2
# No message should not be logged when level = none
UPDATE performance_schema.setup_loggers SET level='none';
SELECT * FROM performance_schema.setup_loggers;
NAME	LEVEL	DESCRIPTION
logger/error/error_log	none	MySQL error logger
logger/test_logs_componentA/test1	none	Test logger #1
logger/test_logs_componentA/test2	none	Test logger #2
SELECT test_emit_log("error", "message #1");
SELECT test_emit_log("info", "message #2");
# Message with level lower than error should not be logged when level = error
UPDATE performance_schema.setup_loggers SET level="error";
UPDATE performance_schema.setup_loggers SET level='none' WHERE name='logger/error/error_log';
SELECT test_emit_log("debug", "message #3");
SELECT test_emit_log("info", "message #4");
SELECT test_emit_log("warn", "message #5");
SELECT test_emit_log("error", "message #6");
# Test internal filtering by test component
SET GLOBAL test_server_telemetry_logs.filter_severity=-1;
SELECT test_emit_log("debug", "message #7");
SELECT test_emit_log("info", "message #8");
SELECT test_emit_log("warn", "message #9");
SELECT test_emit_log("error", "message #10");
SELECT test_emit_log("invalid", "message #11");
# Test complex logging with attributes
SET GLOBAL test_server_telemetry_logs.filter_severity=9999;
SELECT test_emit_log_with_attributes("error", "message #12");
test_emit_log_with_attributes("error", "message #12")
0
SELECT test_emit_log_with_attributes("invalid", "message #13");
test_emit_log_with_attributes("invalid", "message #13")
-1
# Test internal filtering by test component for complex log records
SET GLOBAL test_server_telemetry_logs.filter_severity=2;
UPDATE performance_schema.setup_loggers SET level="debug";
SELECT test_emit_log_with_attributes("debug", "message #14");
test_emit_log_with_attributes("debug", "message #14")
0
SET GLOBAL test_server_telemetry_logs.filter_severity=9999;
# Test C++ logging wrappers
UPDATE performance_schema.setup_loggers SET level="warn";
SELECT test_log_wrappers(1, "test");
test_log_wrappers(1, "test")
0
# Test for possible array holes when registering/unregistering loggers
SELECT * FROM performance_schema.setup_loggers;
NAME	LEVEL	DESCRIPTION
logger/error/error_log	warn	MySQL error logger
logger/test_logs_componentA/test1	warn	Test logger #1
logger/test_logs_componentA/test2	warn	Test logger #2
SELECT test_log_registration();
test_log_registration()
0
SELECT * FROM performance_schema.setup_loggers;
NAME	LEVEL	DESCRIPTION
logger/error/error_log	warn	MySQL error logger
logger/test_logs_componentA/test1	warn	Test logger #1
logger/test_logs_componentA/test2	warn	Test logger #2
logger/test_logs_componentB/test4	info	Test logger #4
# Test invalid operations (error handling)
SELECT test_invalid_operations();
test_invalid_operations()
0
SELECT test_invalid_operations_export();
test_invalid_operations_export()
0
# Test that MySQL error log entries are also emitted as telemetry logs
call mtr.add_suppression("Test message");
UPDATE performance_schema.setup_loggers SET level='warn' WHERE name='logger/error/error_log';
SELECT test_error_log();
test_error_log()
0
# Test reloading the components
UPDATE performance_schema.setup_loggers SET level="none";
UNINSTALL COMPONENT 'file://component_test_server_telemetry_logs_export';
INSTALL COMPONENT 'file://component_test_server_telemetry_logs_export';
UNINSTALL COMPONENT 'file://component_test_server_telemetry_logs_client';
INSTALL COMPONENT 'file://component_test_server_telemetry_logs_client';
# Restart server with restricted num. of instrument classes
# restart: --performance_schema_max_logger_classes=1
SHOW STATUS LIKE 'Performance_schema_logger_lost';
Variable_name	Value
Performance_schema_logger_lost	2
SHOW GLOBAL VARIABLES LIKE "performance_schema_max_logger_classes";
Variable_name	Value
performance_schema_max_logger_classes	1
# Restart server, test '--performance_schema_logger' parameter to change the default log level
# restart
SELECT name, level FROM performance_schema.setup_loggers;
name	level
logger/test_logs_componentA/test1	error
logger/test_logs_componentA/test2	debug
logger/error/error_log	none
SELECT test_error_log();
test_error_log()
0
###########
# CLEANUP #
###########
UNINSTALL COMPONENT 'file://component_test_server_telemetry_logs_client';
UNINSTALL COMPONENT 'file://component_test_server_telemetry_logs_export';
Component logs:
test_server_telemetry_logs_export_component_init init:
 - Initialized log service.
 - System variables registered.
 - Telemetry logs callback registered.
 - Telemetry logs UDFs registered.
End of init
test_server_telemetry_logs_client_component_init init:
 - Initialized log service.
 - Telemetry logs loggers registered.
 - Telemetry logs UDFs registered.
End of init
test_emit_log: log level=error not enabled! (message='message #1')
test_emit_log: log level=info not enabled! (message='message #2')
test_emit_log: log level=debug not enabled! (message='message #3')
test_emit_log: log level=info not enabled! (message='message #4')
test_emit_log: log level=warn not enabled! (message='message #5')
telemetry_log_cb(logger/test_logs_componentA/test1): Log message 'message #6' (level=1/error, attributes: )
test_emit_log: log level=debug not enabled! (message='message #7')
test_emit_log: log level=info not enabled! (message='message #8')
test_emit_log: log level=warn not enabled! (message='message #9')
telemetry_log_cb(logger/test_logs_componentA/test1): Custom filter message 'message #10' (level=1/error, filter_level=-1)
test_emit_log: Invalid level 'invalid' for message 'message #11'
telemetry_log_cb(logger/test_logs_componentA/test1): Log message 'message #12' (level=1/error, attributes: 'attr_string'='value'; 'attr_double'=0.500000; 'attr_int64'=-1001; 'attr_uint64'=42; 'attr_bool'=true; 'attr_int32'=-15; 'attr_uint32'=0; 'attr_str_view'='string')
test_emit_log_with_attributes: Invalid level 'invalid' for message 'message #13'
telemetry_log_cb(logger/test_logs_componentA/test1): Custom filter message 'message #14' (level=4/debug, filter_level=2)
telemetry_log_cb(logger/test_logs_componentA/test1): Log message 'Simple warning #1' (level=2/warn, attributes: )
telemetry_log_cb(logger/test_logs_componentA/test1): Log message 'Complex warning #1' (level=1/error, attributes: 'string'='some value'; 'uint64'=1020232; 'double'=3.140000)
Correct handling of duplicated loggers.
Correct handling of invalid loggers (name+category too long).
telemetry_log_cb(logger/test_logs_componentA/test1): Log message 'Test message' (level=1/error, attributes: 'name#01'='a'; 'name#02'='a'; 'name#03'='a'; 'name#04'='a'; 'name#05'='a'; 'name#06'='a'; 'name#07'='a'; 'name#08'='a'; 'name#09'='a'; 'name#10'='a'; 'name#11'='a'; 'name#12'='a'; 'name#13'='a'; 'name#14'='a'; 'name#15'='a'; 'name#16'='a'; 'name#17'='a'; 'name#18'='a'; 'name#19'='a'; 'name#20'='a'; 'name#21'='a'; 'name#22'='a'; 'name#23'='a'; 'name#24'='a'; 'name#25'='a'; 'name#26'='a'; 'name#27'='a'; 'name#28'='a'; 'name#29'='a'; 'name#30'='a'; 'name#31'='a'; 'name#32'='a'; 'name#33'='a'; 'name#34'='a'; 'name#35'='a'; 'name#36'='a'; 'name#37'='a'; 'name#38'='a'; 'name#39'='a'; 'name#40'='a'; 'name#41'='a'; 'name#42'='a'; 'name#43'='a'; 'name#44'='a'; 'name#45'='a'; 'name#46'='a'; 'name#47'='a'; 'name#48'='a'; 'name#49'='a'; 'name#50'='a'; 'name#51'='a'; 'name#52'='a'; 'name#53'='a'; 'name#54'='a'; 'name#55'='a'; 'name#56'='a'; 'name#57'='a'; 'name#58'='a'; 'name#59'='a'; 'name#60'='a'; 'name#61'='a'; 'name#62'='a'; 'name#63'='a'; 'name#64'='a')
Correct handling unregister of non-current log exporter.
telemetry_log_cb(logger/error/error_log): Log message 'Test message #15' (level=2/warn, attributes: 'err_code'=11071; 'err_symbol'='ER_LOG_PRINTF_MSG'; 'SQL_state'='HY000'; 'source_file'='server_logs_component.cc'; 'source_line'=12345; 'function'='test_error_log'; 'component'='component: test_server_telemetry_logs'; 'subsystem'='Server')
test_server_telemetry_logs_export_component_deinit:
 - Telemetry logs callbacks unregistered.
 - System variables unregistered.
 - UDFs unregistered.
 - Deinitialized log service.
End of deinit
test_server_telemetry_logs_export_component_init init:
 - Initialized log service.
 - System variables registered.
 - Telemetry logs callback registered.
 - Telemetry logs UDFs registered.
End of init
test_server_telemetry_logs_client_component_deinit:
 - Telemetry logs loggers unregistered.
 - UDFs unregistered.
 - Deinitialized log service.
End of deinit
test_server_telemetry_logs_client_component_init init:
 - Initialized log service.
 - Telemetry logs loggers registered.
 - Telemetry logs UDFs registered.
End of init
test_server_telemetry_logs_client_component_deinit:
 - Telemetry logs loggers unregistered.
 - UDFs unregistered.
 - Deinitialized log service.
End of deinit
test_server_telemetry_logs_export_component_deinit:
 - Telemetry logs callbacks unregistered.
 - System variables unregistered.
 - UDFs unregistered.
 - Deinitialized log service.
End of deinit
test_server_telemetry_logs_export_component_init init:
 - Initialized log service.
 - System variables registered.
 - Telemetry logs callback registered.
 - Telemetry logs UDFs registered.
End of init
test_server_telemetry_logs_client_component_init init:
 - Initialized log service.
register_loggers() failed to register: test2
 - Telemetry logs loggers registered.
 - Telemetry logs UDFs registered.
End of init
test_server_telemetry_logs_client_component_deinit:
 - Telemetry logs loggers unregistered.
 - UDFs unregistered.
 - Deinitialized log service.
End of deinit
test_server_telemetry_logs_export_component_deinit:
 - Telemetry logs callbacks unregistered.
 - System variables unregistered.
 - UDFs unregistered.
 - Deinitialized log service.
End of deinit
test_server_telemetry_logs_export_component_init init:
 - Initialized log service.
 - System variables registered.
 - Telemetry logs callback registered.
 - Telemetry logs UDFs registered.
End of init
test_server_telemetry_logs_client_component_init init:
 - Initialized log service.
 - Telemetry logs loggers registered.
 - Telemetry logs UDFs registered.
End of init
test_server_telemetry_logs_client_component_deinit:
 - Telemetry logs loggers unregistered.
 - UDFs unregistered.
 - Deinitialized log service.
End of deinit
test_server_telemetry_logs_export_component_deinit:
 - Telemetry logs callbacks unregistered.
 - System variables unregistered.
 - UDFs unregistered.
 - Deinitialized log service.
End of deinit
