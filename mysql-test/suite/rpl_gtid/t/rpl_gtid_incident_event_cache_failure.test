# ==== Purpose ====
#
# Verify that failure of cache creation while writing incident events are
# handled and the server considers
#
# ==== Implementation ====
#
# 1. A single statement on non-transactional table causes to log an incident
#    event without a GTID due to the fact that the stmt_cache is not big
#    enough to accommodate the changes.
#
# 2. Use debug simulation to simulate failure in cache creation. If there is
#    any error while creating such caches, then we expect binlog_error_action
#    to handle this when GTIDs are enabled.
#
# 3. Repeat the above steps when binlog_error_action is IGNORE_ERROR and
#    ABORT_SERVER.
#
# ==== References ====
#
# Bug #30566518: SLAVE STOPS WITH INTERMITTENT ERROR 1396: ERROR 'OPERATION
#                DROP USER FAILED FOR
# Bug #30324661: INVALID GRANT COMMAND BREAK GTID BASED REPLICATION

--source include/have_debug.inc
# Don't test this under valgrind, memory leaks will occur
--source include/not_valgrind.inc
# Avoid CrashReporter popup on Mac
--source include/not_crashrep.inc

# Test in this file is binlog format agnostic, thus no need
# to rerun it for every format.
--source include/have_binlog_format_row.inc
--source include/force_myisam_default.inc
--source include/have_myisam.inc
--source include/master-slave.inc

--let $old_binlog_stmt_cache_size= query_get_value(SHOW VARIABLES LIKE "binlog_stmt_cache_size", Value, 1)
--let $old_max_binlog_stmt_cache_size= query_get_value(SHOW VARIABLES LIKE "max_binlog_stmt_cache_size", Value, 1)
SET GLOBAL binlog_stmt_cache_size = 4096;
SET GLOBAL max_binlog_stmt_cache_size = 4096;

CREATE TABLE t1(c1 INT PRIMARY KEY, data TEXT(30000)) ENGINE=MyIsam;
--let $data= `SELECT CONCAT('"', repeat('a',2000), '"')`

# Sync the slave threads and stop the slave IO thread until the end of the
# test.
--source include/sync_slave_sql_with_master.inc
--source include/stop_slave_io.inc

--echo # Testing the failure of cache creation while writing incident events.
--echo #
--echo # Since generation of GTIDs is tightly coupled with IO caches, if there is any
--echo # failure in creating IO cache for writing GTIDs, we will allow
--echo # binlog_error_action to handle the error.
--echo #
--echo # A single statement on non-transactional table causes to log an incident
--echo # event without a GTID due to the fact that the stmt_cache is not big
--echo # enough to accommodate the changes.
--echo #

# Add a debug point on master so that cache creation fails.
--source include/rpl_connection_master.inc
--let $debug_point= simulate_cache_creation_failure
--source include/add_debug_point.inc

# Testing with binlog_error_action = IGNORE_ERROR.
SET GLOBAL binlog_error_action = IGNORE_ERROR;

--disable_query_log
--error ER_STMT_CACHE_FULL
eval INSERT INTO t1 (c1, data)
     VALUES (1, CONCAT($data, $data, $data, $data, $data, $data));
--enable_query_log

# Test to prove that binary log is disabled
--error ER_NO_BINARY_LOGGING
SHOW BINARY LOGS;

# Check that error is present in error log
--let $assert_file = $MYSQLTEST_VARDIR/log/mysqld.1.err
--let $assert_only_after = CURRENT_TEST: rpl.rpl_gtid_incident_event_cache_failure
--let $assert_select = Hence turning logging off for the whole duration of the MySQL server process.
--let $assert_match = .*Hence turning logging off for the whole duration of the MySQL server process.*
--let $assert_text = Found the message about the failure of cache creation in the error log.
--source include/assert_grep.inc

# Restart the master server so that binary log is enabled again and we can do
# the below test.
--enable_reconnect
--let $rpl_server_number= 1
--source include/rpl_restart_server.inc

# Testing with binlog_error_action = ABORT_SERVER.
# Check that server aborts and the client gets ER_BINLOG_LOGGING_IMPOSSIBLE
# when binlog_error_action= 'ABORT_SERVER'.
--source include/rpl_connection_master.inc
SET GLOBAL binlog_stmt_cache_size = 4096;
SET GLOBAL max_binlog_stmt_cache_size = 4096;

# Add a debug point so that cache creation fails.
--let $debug_point= simulate_cache_creation_failure
--source include/add_debug_point.inc

SET GLOBAL binlog_error_action = ABORT_SERVER;

--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect

--disable_query_log
--error ER_BINLOG_LOGGING_IMPOSSIBLE
eval INSERT INTO t1 (c1, data)
     VALUES (2, CONCAT($data, $data, $data, $data, $data, $data));
--enable_query_log

--echo # Restart the master server
--source include/wait_until_disconnected.inc
--enable_reconnect
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--source include/wait_until_connected_again.inc
--disable_reconnect

--let $rpl_server_number= 1
--source include/rpl_reconnect.inc

# Check that error is present in error log
--source include/rpl_connection_master.inc
--let $assert_file = $MYSQLTEST_VARDIR/log/mysqld.1.err
--let $assert_only_after = CURRENT_TEST: rpl.rpl_gtid_incident_event_cache_failure
--let $assert_select = Hence aborting the server
--let $assert_match = .*Hence aborting the server.*
--let $assert_text = Found the message about the failure of cache creation in the error log.
--source include/assert_grep.inc

# Start the slave IO thread.
--source include/rpl_connection_slave.inc
--source include/start_slave_io.inc

# Suppress the errors on master
--source include/rpl_connection_master.inc
CALL mtr.add_suppression("Attempting backtrace. You can use the following information to find out*");
CALL mtr.add_suppression("ERROR.*Could not create IO cache while writing an incident event to the binary log.*");

# Cleanup
--source include/rpl_connection_master.inc
DROP TABLE t1;

--source include/rpl_end.inc
