# ==== Purpose ====
#
# An XA transaction generates two transactions in the binary log:
#  1. XA BEGIN; DML; XA END; XA PREPARE;
#  2. XA [COMMIT|ROLLBACK];
#
# This test verifies that all possible combinations of GTID_NEXT for
# the two parts of the transaction are allowed (provided that
# GTID_MODE allows it), and that GTID ownership is maintained
# correctly. Specifically, ownership should be released between the
# two transactions and after the two transactions.
#
# ==== Implementation ====
#
# Execute the following:
#
# For COMMIT_OR_ROLLBACK in COMMIT, ROLLBACK:
#   For GTID1 in AUTOMATIC, GTID, ANONYMOUS:
#     For GTID2 in AUTOMATIC, GTID, ANONYMOUS, none:
#       SET GTID_NEXT = <GTID1>;
#       XA BEGIN;
#       DML;
#       XA END;
#       verify that no GTID is owned
#
#       if GTID2 != none:
#         SET GTID_NEXT = <GTID2>;
#       XA <COMMIT_OR_ROLLBACK>;
#       verify that no GTID is owned
#
# The two innermost loops are unrolled because it is not practical to
# implement such logic in mtr.  The body of the inner loop is
# implemented in extra/binlog_tests/gtid_next_xa.test.
#
# ==== References ====
#
# WL#6860: binlogging XA transactions
# - Test was created in this worklog.

# No need to run this test in multiple combinations.
--source include/have_binlog_format_statement.inc
--source include/not_gtid_enabled.inc

--let $rpl_gtid_utils= 1
--let $rpl_topology= none
--source include/rpl_init.inc
--source include/rpl_default_connections.inc

--let $rpl_gtid_mode= ON_PERMISSIVE
--source include/rpl_set_gtid_mode.inc

--connection master

CREATE TABLE t1 (a INT);

--let $xid= 1
--let $commit= COMMIT
--let $error= 0

--let $i= 0
while ($i < 2)
{

  --let $gtid1= AUTOMATIC
  --let $gtid2= AUTOMATIC
  --source extra/binlog_tests/gtid_next_xa.test

  --let $gtid1= AUTOMATIC
  --let $gtid2= $uuida:$xid
  --source extra/binlog_tests/gtid_next_xa.test

  --let $gtid1= AUTOMATIC
  --let $gtid2= ANONYMOUS
  --source extra/binlog_tests/gtid_next_xa.test

  --let $gtid1= AUTOMATIC
  --let $gtid2= none
  --source extra/binlog_tests/gtid_next_xa.test

  --let $gtid1= $uuida:$xid
  --let $gtid2= AUTOMATIC
  --source extra/binlog_tests/gtid_next_xa.test

  --let $gtid1= $uuida:$xid
  --let $gtid2= $uuidb:$xid
  --source extra/binlog_tests/gtid_next_xa.test

  --let $gtid1= $uuida:$xid
  --let $gtid2= ANONYMOUS
  --source extra/binlog_tests/gtid_next_xa.test

  --let $error= convert_error(ER_GTID_NEXT_TYPE_UNDEFINED_GROUP)
  --let $gtid1= $uuida:$xid
  --let $gtid2= none
  --source extra/binlog_tests/gtid_next_xa.test
  --let $error= 0

  --let $gtid1= ANONYMOUS
  --let $gtid2= AUTOMATIC
  --source extra/binlog_tests/gtid_next_xa.test

  --let $gtid1= ANONYMOUS
  --let $gtid2= $uuida:$xid
  --source extra/binlog_tests/gtid_next_xa.test

  --let $gtid1= ANONYMOUS
  --let $gtid2= ANONYMOUS
  --source extra/binlog_tests/gtid_next_xa.test

  --let $gtid1= ANONYMOUS
  --let $gtid2= none
  --source extra/binlog_tests/gtid_next_xa.test

  --inc $i
  --let $commit= ROLLBACK
}

DROP TABLE t1;

# rpl_init.inc saves GTID_MODE in the $gtid_mode variable
--let $rpl_gtid_mode= $gtid_mode
--source include/rpl_set_gtid_mode.inc

--source include/rpl_end.inc
