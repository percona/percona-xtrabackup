###############################################################################
# Bug#19928622: ASSERTION `! IS_SET()' FAILED. | ABORT IN
# DIAGNOSTICS_AREA::SET_OK_STATUS
#
# Test:
# =====
# Begin an XA transaction and execte a DML statement so that XA state becomes
# XA_ACTIVE. Execute the BINLOG command it should not cause any assert.
# Execution should be successful.
###############################################################################
--source include/have_log_bin.inc

CREATE TABLE t1(f1 int);

XA START'','';
INSERT INTO t1 VALUES(10);
BINLOG '
SOgWTg8BAAAAbgAAAHIAAAAAAAQANS42LjMtbTUtZGVidWctbG9nAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAABI6BZOEzgNAAgAEgAEBAQEEgAAVgAEGggAAAAICAgCAAAAAAVAYI8=';
XA END'';
XA PREPARE'';
XA COMMIT'';

#
# Bug#21942487 ASSERTION
# `STATIC_CAST<SQL_CMD_XA_COMMIT*>(THD->LEX->M_SQL_CMDQL_CMD)->
# GET_XA_OPT()
# The following block checks safety of processing of load masquaraded
# as it's out of mysqlbing. The XA transaction must complete.
#
SET @sav.pseudo_slave_mode= @@session.pseudo_slave_mode;
SELECT  @@session.pseudo_slave_mode;
# A warning out of the following query is improper and caused by a combination
# of the above BINLOG processing and side effect of BUG#15891524.
SET @@session.pseudo_slave_mode=1;
XA START 'xa';
INSERT INTO t1 VALUES(10);
BINLOG '
SOgWTg8BAAAAbgAAAHIAAAAAAAQANS42LjMtbTUtZGVidWctbG9nAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAABI6BZOEzgNAAgAEgAEBAQEEgAAVgAEGggAAAAICAgCAAAAAAVAYI8=';
XA END 'xa';
XA PREPARE 'xa';
XA COMMIT 'xa';
SET @@session.pseudo_slave_mode= @sav.pseudo_slave_mode;

DROP TABLE t1;

#
#  BUG#21053526 XA:'XA COMMIT..ONE PHASE' IS BINLOGGED INCORRECTLY AS 'XA PREPARE'
#

#
# This is actually the following test:
# SEQUENCE: XA BEGIN, XA END, XA COMMIT ONE PHASE
#
# The test validates that SHOW BINLOG EVENTS shows
# the correct info for the ONE PHASE statement
#
# This test does not test applying the output of
# mysqlbinlog, since that is already tested in
# mysql-test/extra/binlog_tests/binlog_xa_prepared.test
#

# clean up binary log so that the following operation
# does not have to scan through a long history of
# events in the log (potentially causing a failure).
RESET MASTER;

CREATE TABLE t1 (c1 INT);
XA BEGIN 'xa1';
INSERT INTO t1 VALUES (1);
XA END 'xa1';
XA COMMIT 'xa1' ONE PHASE;

--echo [Validate that SHOW BINLOG EVENTS shows the ONE PHASE statement.]
--let $wait_binlog_event= ONE PHASE
--source include/wait_for_binlog_event.inc

DROP TABLE t1;

# clean up the binary log at in the end of the test
# case as well.
RESET MASTER;
