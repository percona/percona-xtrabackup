# ==== Purpose ====
#
# This test case checks if the warning is emitted when transaction
# or statement write to tables of multiples engines having at least one
# non-transactional engine or non-composable engine during statement based
# replication.
#
# ==== Implementation ====
#
# 1. Create Tables with engines InnoDB and MyISAM.
# 2. Mix InnoDB and MyISAM and assert that a warning is emitted on the source and replica.
# 3. Test with triggers
# 4. Test with stored procedure
# 5. Cleanup
#
# ==== References ====
# WL#10495 : Replication Usability: Deprecate writing multiple engines
# when at least one is non-transactional or non-composable

--source include/big_test.inc
--source include/have_binlog_format_statement.inc
--source include/not_have_privilege_checks_user.inc
--source include/rpl/init_source_replica.inc

#suppress warning
call mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT");

--echo #
--echo # 1. Create Tables with engines InnoDB and MyISAM.
--echo #

CREATE TABLE t1 (c1 INT) ENGINE=InnoDB;
CREATE TABLE t2 (c1 INT) ENGINE=MyISAM;
CREATE TABLE t3 (c1 INT) ENGINE=MyISAM;
CREATE TABLE t4 (c1 INT) ENGINE=InnoDB;
CREATE TABLE t5 (c1 INT) ENGINE=MyISAM;

INSERT INTO t1 VALUES (1);
INSERT INTO t2 VALUES (1);
INSERT INTO t3 VALUES (1);
INSERT INTO t4 VALUES (1);
INSERT INTO t5 VALUES (1);

--echo #
--echo # 2. Mix InnoDB and MyISAM and assert that a warning is emitted on the source and replica.
--echo #

UPDATE t1,t2 SET t1.c1=2, t2.c1=2;

#check warning on source
--let $assert_text = 1 Warning Found on source error log
--let $assert_file = $MYSQLTEST_VARDIR/log/mysqld.1.err
--let $assert_select = Combining the storage engines
--let $assert_count = 1
--source include/assert_grep.inc

#Sync replica with warning
--source include/rpl/sync_to_replica.inc

#check warning on replica
--let $assert_text = 1 Warning Found on replica error log
--let $assert_file = $MYSQLTEST_VARDIR/log/mysqld.2.err
--let $assert_select = Combining the storage engines
--let $assert_count = 1
--source include/assert_grep.inc

--source include/rpl/connection_source.inc

--echo #
--echo # 3. Test with triggers
--echo #

DELIMITER |;

CREATE TRIGGER before_trigger BEFORE UPDATE ON t1 FOR EACH ROW
    BEGIN
        UPDATE t2 SET t2.c1 = 3;
    END|

CREATE TRIGGER after_trigger AFTER UPDATE ON t4 FOR EACH ROW
    BEGIN
        UPDATE t5 SET t5.c1 = 3;
    END|

DELIMITER ;|

UPDATE t1 SET t1.c1 = 3;
UPDATE t4 SET t4.c1 = 3;

--echo #
--echo # 4. Test with stored procedure
--echo #

DELIMITER |;

CREATE PROCEDURE proc()
BEGIN
   UPDATE t1,t3 SET t1.c1 = 4, t3.c1 = 4;
END|

DELIMITER ;|

CALL proc();

--echo #
--echo # 7. Cleanup
--echo #

DROP TRIGGER IF EXISTS before_trigger;
DROP TRIGGER IF EXISTS after_trigger;
DROP PROCEDURE IF EXISTS proc;
DROP TABLE t1,t2,t3,t4,t5;
--source include/rpl/deinit.inc
