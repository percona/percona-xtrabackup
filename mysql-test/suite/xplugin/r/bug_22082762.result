install plugin mysqlx soname "mysqlx.so";
call mtr.add_suppression("Plugin mysqlx reported: .Failed at SSL configuration: .SSL context is not usable without certificate and private key..");
call mtr.add_suppression("Plugin mysqlx reported: .SSL_CTX_load_verify_locations failed.");
call mtr.add_suppression("Error parsing message of type 12: args");
call mtr.add_suppression("Error handling message: args");
call mtr.add_suppression("InnoDB: Compute virtual column values failed");
RUN DROP DATABASE IF EXISTS xplugintest

0 rows affected
RUN DROP DATABASE IF EXISTS xplugintest_1

0 rows affected
RUN CREATE DATABASE xplugintest

1 rows affected
RUN CREATE DATABASE xplugintest_1

1 rows affected
RUN USE xplugintest

0 rows affected
send Mysqlx.Sql.StmtExecute {
  stmt: "create_collection"
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "xplugintest"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "table2"
      }
    }
  }
  namespace: "xplugin"
}

Mysqlx.Sql.StmtExecuteOk {
}

RUN DELETE FROM xplugintest.table2

0 rows affected
RUN INSERT INTO xplugintest.table2(doc) VALUES('{"F1":1, "F2":"abcd", "F3":1000, "_id":0}')

1 rows affected
send Mysqlx.Sql.StmtExecute {
  stmt: "create_collection_index"
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "xplugintest"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "table2"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "iX3"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_BOOL
      v_bool: true
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "$.F3"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "BIGINT"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_BOOL
      v_bool: true
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "$.F2"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "BLOB(767)"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_BOOL
      v_bool: true
    }
  }
  namespace: "xplugin"
}

Mysqlx.Sql.StmtExecuteOk {
}

RUN DELETE FROM xplugintest.table2

1 rows affected
RUN INSERT INTO xplugintest.table2(doc) VALUES('{"F2":"REQUIRED", "F3":"1", "KeyName_VeryLongKeyNameWithKeyNameLength_FiFtyFourAndEvenABitLonger": "abcdefgh", "_id":1}')

1 rows affected
send Mysqlx.Sql.StmtExecute {
  stmt: "create_collection_index"
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "xplugintest"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "table2"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "iXLong"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_BOOL
      v_bool: false
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "$.KeyName_VeryLongKeyNameWithKeyNameLength_FiFtyFourAndEvenABitLonger"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "BLOB(3000)"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_BOOL
      v_bool: false
    }
  }
  namespace: "xplugin"
}

Mysqlx.Sql.StmtExecuteOk {
}

RUN SHOW CREATE TABLE xplugintest.table2
Table	Create Table
table2	CREATE TABLE `table2` (
  `doc` json DEFAULT NULL,
  `_id` varchar(32) GENERATED ALWAYS AS (json_unquote(json_extract(`doc`,'$._id'))) STORED NOT NULL,
  `$ix_ib_r_755774C7760C6184F154B25E88F81712F65BC712` bigint(20) GENERATED ALWAYS AS (json_extract(`doc`,'$.F3')) VIRTUAL NOT NULL,
  `$ix_bt767_r_8870EF04DBC5C827B87C34BF582F39442A78BBD9` blob GENERATED ALWAYS AS (json_unquote(json_extract(`doc`,'$.F2'))) VIRTUAL NOT NULL,
  `$ix_bt3000_EED9F4FDE93464D65631C14643D3B9F9E401EA43` blob GENERATED ALWAYS AS (json_unquote(json_extract(`doc`,'$.KeyName_VeryLongKeyNameWithKeyNameLength_FiFtyFourAndEvenABitLonger'))) VIRTUAL,
  UNIQUE KEY `_id` (`_id`),
  UNIQUE KEY `iX3` (`$ix_ib_r_755774C7760C6184F154B25E88F81712F65BC712`,`$ix_bt767_r_8870EF04DBC5C827B87C34BF582F39442A78BBD9`(767)),
  KEY `iXLong` (`$ix_bt3000_EED9F4FDE93464D65631C14643D3B9F9E401EA43`(3000))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
0 rows affected
RUN SELECT * FROM xplugintest.table2
doc	_id	$ix_ib_r_755774C7760C6184F154B25E88F81712F65BC712	$ix_bt767_r_8870EF04DBC5C827B87C34BF582F39442A78BBD9	$ix_bt3000_EED9F4FDE93464D65631C14643D3B9F9E401EA43
{"F2": "REQUIRED", "F3": "1", "_id": 1, "KeyName_VeryLongKeyNameWithKeyNameLength_FiFtyFourAndEvenABitLonger": "abcdefgh"}	1	1	REQUIRED	abcdefgh
0 rows affected
Mysqlx.Ok {
  msg: "bye!"
}
ok
UNINSTALL PLUGIN mysqlx;
DROP DATABASE IF EXISTS xplugintest;
DROP DATABASE IF EXISTS xplugintest_1;
