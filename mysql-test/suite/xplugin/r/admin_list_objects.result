install plugin mysqlx soname "mysqlx.so";
call mtr.add_suppression("Plugin mysqlx reported: .Failed at SSL configuration: .SSL context is not usable without certificate and private key..");
call mtr.add_suppression("Plugin mysqlx reported: .SSL_CTX_load_verify_locations failed.");
RUN create schema xtest default charset 'utf8mb4'

1 rows affected
RUN use xtest

0 rows affected
RUN create table mytable (a int)

0 rows affected
RUN create table mytable2 (a int, doc json)

0 rows affected
RUN create view myview as select 1

0 rows affected
send Mysqlx.Sql.StmtExecute {
  stmt: "create_collection"
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "xtest"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "books"
      }
    }
  }
  namespace: "xplugin"
}


command ok
RUN create view fakecoll as select * from xtest.books


0 rows affected
send Mysqlx.Sql.StmtExecute {
  stmt: "list_objects"
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "xtest"
      }
    }
  }
  namespace: "xplugin"
}

Mysqlx.Resultset.ColumnMetaData {
  type: BYTES
  name: "name"
  original_name: ""
  table: ""
  original_table: ""
  schema: ""
  catalog: ""
  collation: 0
  fractional_digits: 0
  length: 0
  flags: 0
}

Mysqlx.Resultset.ColumnMetaData {
  type: BYTES
  name: "type"
  original_name: ""
  table: ""
  original_table: ""
  schema: ""
  catalog: ""
  collation: 0
  fractional_digits: 0
  length: 0
  flags: 0
}

Mysqlx.Resultset.Row {
  field: "fakecoll\000"
  field: "VIEW\000"
}

Mysqlx.Resultset.Row {
  field: "mytable\000"
  field: "TABLE\000"
}

Mysqlx.Resultset.Row {
  field: "mytable2\000"
  field: "TABLE\000"
}

Mysqlx.Resultset.Row {
  field: "myview\000"
  field: "VIEW\000"
}

Mysqlx.Resultset.Row {
  field: "books\000"
  field: "COLLECTION\000"
}

Mysqlx.Resultset.FetchDone {
}

Mysqlx.Sql.StmtExecuteOk {
}

send Mysqlx.Sql.StmtExecute {
  stmt: "list_objects"
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "invalid"
      }
    }
  }
  namespace: "xplugin"
}

Mysqlx.Error {
  severity: ERROR
  code: 1049
  msg: "Unknown database \'invalid\'"
  sql_state: "42000"
}

send Mysqlx.Sql.StmtExecute {
  stmt: "list_objects"
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "xtest"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "myt%"
      }
    }
  }
  namespace: "xplugin"
}

Mysqlx.Resultset.ColumnMetaData {
  type: BYTES
  name: "name"
  original_name: ""
  table: ""
  original_table: ""
  schema: ""
  catalog: ""
  collation: 0
  fractional_digits: 0
  length: 0
  flags: 0
}

Mysqlx.Resultset.ColumnMetaData {
  type: BYTES
  name: "type"
  original_name: ""
  table: ""
  original_table: ""
  schema: ""
  catalog: ""
  collation: 0
  fractional_digits: 0
  length: 0
  flags: 0
}

Mysqlx.Resultset.Row {
  field: "mytable\000"
  field: "TABLE\000"
}

Mysqlx.Resultset.Row {
  field: "mytable2\000"
  field: "TABLE\000"
}

Mysqlx.Resultset.FetchDone {
}

Mysqlx.Sql.StmtExecuteOk {
}

send Mysqlx.Sql.StmtExecute {
  stmt: "list_objects"
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "xtest"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "bla%"
      }
    }
  }
  namespace: "xplugin"
}

Mysqlx.Resultset.ColumnMetaData {
  type: BYTES
  name: "name"
  original_name: ""
  table: ""
  original_table: ""
  schema: ""
  catalog: ""
  collation: 0
  fractional_digits: 0
  length: 0
  flags: 0
}

Mysqlx.Resultset.ColumnMetaData {
  type: BYTES
  name: "type"
  original_name: ""
  table: ""
  original_table: ""
  schema: ""
  catalog: ""
  collation: 0
  fractional_digits: 0
  length: 0
  flags: 0
}

Mysqlx.Resultset.FetchDone {
}

Mysqlx.Sql.StmtExecuteOk {
}

RUN drop schema if exists xtest

5 rows affected
Mysqlx.Ok {
  msg: "bye!"
}
ok
uninstall plugin mysqlx;
