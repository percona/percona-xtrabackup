########### suite/xplugin/t/create_index_crud.test       #############
##                                                                   #
## This test runs aims index creation using crud calls               #
## Test covers                                                       #
##  - Create index with crud calls                                   #
##  - create with different data type(TEXT/INT) for doc field     #
#######################################################################



# create_collection_index

# Creates an index on a given document field. Indexes on documents are 
# created by first creating a virtual generated column that extracts 
# the field from the document to an indexable column and then creating 
# the index on that column. JSN_EXTRACT() is used to extract the field 
# value and JSN_UNQUOTE() to remove the quoting from strings. 
# User must specify the datatype that the field must be extracted as. 
# The default is TEXT(64).

# If a virtual column for the requested column already exists, it 
# will be reused for the newly created index. If an index of the same name
# exists for the table, an error will be returned.

# Indexes are created as follows:

# ALTER TABLE table ADD COLUMN (v_field_name GENERATED ALWAYS AS 
# (JSN_EXTRACT(document, '$.field_name ')) VIRTUAL, ADD INDEX 
# table_field ON table.v_field_name

# Arguments for create_collection_index
#   - schema name of table on which table to be created
#    - table name - 
#    - name of the index( optional)
#    - unique - whether the index should be a unique index
#    - field_path : the document path to the field to be indexed
#                   of doc column
#    - datatype - datatype of the index
#    - not_null - whether the generated column will be created as NOT NULL

# Pre Conditions
#    User must have Index privileges on the schema
#    User must have Alter privileges on the table
#    The indexed field must be of a simple type. Multi-value indexes are currently not supported.

--source suite/xplugin/include/xplugin_preamble.inc
call mtr.add_suppression("Error parsing message of type 12: args");
call mtr.add_suppression("Error handling message: args");
call mtr.add_suppression("InnoDB: Compute virtual column values failed");

## Test starts here
--write_file $MYSQL_TMP_DIR/mysqlx-in.tmp
-->sql
-- "Creating database for testcase"
DROP DATABASE IF EXISTS xplugintest;
DROP DATABASE IF EXISTS xplugintest_1;
CREATE DATABASE xplugintest;
CREATE DATABASE xplugintest_1;
USE xplugintest;
-->endsql

-- "Create index on table2 in xplugintest "

Mysqlx.Sql.StmtExecute {
  stmt: "create_collection"
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "xplugintest"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "table2"
      }
    }
  }
  namespace: "xplugin"
}
-->recv
-->sql
DELETE FROM xplugintest.table2;
INSERT INTO xplugintest.table2(doc) VALUES('{"F1":1, "F2":"abcd", "F3":1000, "_id":0}');
-->endsql
Mysqlx.Sql.StmtExecute {
  stmt: "create_collection_index"
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "xplugintest"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "table2"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "iX3"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_BOOL
      v_bool: true
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "$.F3"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "BIGINT"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_BOOL
      v_bool: true
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "$.F2"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "BLOB(767)"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_BOOL
      v_bool: true
    }
  }
  namespace: "xplugin"
}

-->recv
-->sql
DELETE FROM xplugintest.table2;
#Bug #22082762 (to be fixed)
INSERT INTO xplugintest.table2(doc) VALUES('{"F2":"REQUIRED", "F3":"1", "KeyName_VeryLongKeyNameWithKeyNameLength_FiFtyFourAndEvenABitLonger": "abcdefgh", "_id":1}');
-->endsql
Mysqlx.Sql.StmtExecute {
  stmt: "create_collection_index"
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "xplugintest"
      }
    }
  }
  args {        
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "table2"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "iXLong"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_BOOL
      v_bool: false
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "$.KeyName_VeryLongKeyNameWithKeyNameLength_FiFtyFourAndEvenABitLonger"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "BLOB(3000)"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_BOOL
      v_bool: false
    }
  }
  namespace: "xplugin"
}
-->recv

-->sql
SHOW CREATE TABLE xplugintest.table2;
SELECT * FROM xplugintest.table2;
-->endsql
EOF

--exec $MYSQLXTEST -u root --password='' --file=$MYSQL_TMP_DIR/mysqlx-in.tmp 2>&1
--remove_file $MYSQL_TMP_DIR/mysqlx-in.tmp

#
## Postamble
UNINSTALL PLUGIN mysqlx;
DROP DATABASE IF EXISTS xplugintest;
DROP DATABASE IF EXISTS xplugintest_1;
