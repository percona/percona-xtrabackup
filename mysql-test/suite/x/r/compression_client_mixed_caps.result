
## A. Execute the test using valid compression: deflate + combine mixed=false
#


## I. Send compression message to the server and verify successful execution
#     also show that neither "server_combine_mixed_messages" nor "server_max_combine_messages"
#     has influence on client compression messages
#
# 1. Send compression message containing single X Protocol message (StmtExecute)
# 2. Send compression message containing single X Protocol message (Expect.Open)
# 3. Send compression message containing multiple X Protocol message
#    of the same type (StmtExecute)
# 4. Send compression message containing multiple X Protocol message
#    of the different types (StmtExecute, Expect.Open)

#
# I.1
1
1
0 rows affected

#
# I.2
RUN recvok

#
# I.3
2
2
0 rows affected
3
3
0 rows affected
4
4
0 rows affected

#
# I.4
RUN recvok
5
5
0 rows affected

command ok
Mysqlx.Ok {
  msg: "bye!"
}
ok

## B. Execute the test using valid compression: deflate + combine mixed=true
#


## I. Send compression message to the server and verify successful execution
#     also show that neither "server_combine_mixed_messages" nor "server_max_combine_messages"
#     has influence on client compression messages
#
# 1. Send compression message containing single X Protocol message (StmtExecute)
# 2. Send compression message containing single X Protocol message (Expect.Open)
# 3. Send compression message containing multiple X Protocol message
#    of the same type (StmtExecute)
# 4. Send compression message containing multiple X Protocol message
#    of the different types (StmtExecute, Expect.Open)

#
# I.1
1
1
0 rows affected

#
# I.2
RUN recvok

#
# I.3
2
2
0 rows affected
3
3
0 rows affected
4
4
0 rows affected

#
# I.4
RUN recvok
5
5
0 rows affected

command ok
Mysqlx.Ok {
  msg: "bye!"
}
ok

## C. Execute the test using valid compression: deflate + combine mixed=true + limit-messages=1
#


## I. Send compression message to the server and verify successful execution
#     also show that neither "server_combine_mixed_messages" nor "server_max_combine_messages"
#     has influence on client compression messages
#
# 1. Send compression message containing single X Protocol message (StmtExecute)
# 2. Send compression message containing single X Protocol message (Expect.Open)
# 3. Send compression message containing multiple X Protocol message
#    of the same type (StmtExecute)
# 4. Send compression message containing multiple X Protocol message
#    of the different types (StmtExecute, Expect.Open)

#
# I.1
1
1
0 rows affected

#
# I.2
RUN recvok

#
# I.3
2
2
0 rows affected
3
3
0 rows affected
4
4
0 rows affected

#
# I.4
RUN recvok
5
5
0 rows affected

command ok
Mysqlx.Ok {
  msg: "bye!"
}
ok

## D. Execute the test using valid compression: deflate + combine mixed=true + limit-messages=2
#


## I. Send compression message to the server and verify successful execution
#     also show that neither "server_combine_mixed_messages" nor "server_max_combine_messages"
#     has influence on client compression messages
#
# 1. Send compression message containing single X Protocol message (StmtExecute)
# 2. Send compression message containing single X Protocol message (Expect.Open)
# 3. Send compression message containing multiple X Protocol message
#    of the same type (StmtExecute)
# 4. Send compression message containing multiple X Protocol message
#    of the different types (StmtExecute, Expect.Open)

#
# I.1
1
1
0 rows affected

#
# I.2
RUN recvok

#
# I.3
2
2
0 rows affected
3
3
0 rows affected
4
4
0 rows affected

#
# I.4
RUN recvok
5
5
0 rows affected

command ok
Mysqlx.Ok {
  msg: "bye!"
}
ok

## E. Execute the test using valid compression: lz4 + combine mixed=false
#


## I. Send compression message to the server and verify successful execution
#     also show that neither "server_combine_mixed_messages" nor "server_max_combine_messages"
#     has influence on client compression messages
#
# 1. Send compression message containing single X Protocol message (StmtExecute)
# 2. Send compression message containing single X Protocol message (Expect.Open)
# 3. Send compression message containing multiple X Protocol message
#    of the same type (StmtExecute)
# 4. Send compression message containing multiple X Protocol message
#    of the different types (StmtExecute, Expect.Open)

#
# I.1
1
1
0 rows affected

#
# I.2
RUN recvok

#
# I.3
2
2
0 rows affected
3
3
0 rows affected
4
4
0 rows affected

#
# I.4
RUN recvok
5
5
0 rows affected

command ok
Mysqlx.Ok {
  msg: "bye!"
}
ok

## F. Execute the test using valid compression: lz4 + combine mixed=true
#


## I. Send compression message to the server and verify successful execution
#     also show that neither "server_combine_mixed_messages" nor "server_max_combine_messages"
#     has influence on client compression messages
#
# 1. Send compression message containing single X Protocol message (StmtExecute)
# 2. Send compression message containing single X Protocol message (Expect.Open)
# 3. Send compression message containing multiple X Protocol message
#    of the same type (StmtExecute)
# 4. Send compression message containing multiple X Protocol message
#    of the different types (StmtExecute, Expect.Open)

#
# I.1
1
1
0 rows affected

#
# I.2
RUN recvok

#
# I.3
2
2
0 rows affected
3
3
0 rows affected
4
4
0 rows affected

#
# I.4
RUN recvok
5
5
0 rows affected

command ok
Mysqlx.Ok {
  msg: "bye!"
}
ok

## G. Execute the test using valid compression: lz4 + combine mixed=true + limit-messages=1
#


## I. Send compression message to the server and verify successful execution
#     also show that neither "server_combine_mixed_messages" nor "server_max_combine_messages"
#     has influence on client compression messages
#
# 1. Send compression message containing single X Protocol message (StmtExecute)
# 2. Send compression message containing single X Protocol message (Expect.Open)
# 3. Send compression message containing multiple X Protocol message
#    of the same type (StmtExecute)
# 4. Send compression message containing multiple X Protocol message
#    of the different types (StmtExecute, Expect.Open)

#
# I.1
1
1
0 rows affected

#
# I.2
RUN recvok

#
# I.3
2
2
0 rows affected
3
3
0 rows affected
4
4
0 rows affected

#
# I.4
RUN recvok
5
5
0 rows affected

command ok
Mysqlx.Ok {
  msg: "bye!"
}
ok

## H. Execute the test using valid compression: lz4 + combine mixed=true + limit-messages=2
#


## I. Send compression message to the server and verify successful execution
#     also show that neither "server_combine_mixed_messages" nor "server_max_combine_messages"
#     has influence on client compression messages
#
# 1. Send compression message containing single X Protocol message (StmtExecute)
# 2. Send compression message containing single X Protocol message (Expect.Open)
# 3. Send compression message containing multiple X Protocol message
#    of the same type (StmtExecute)
# 4. Send compression message containing multiple X Protocol message
#    of the different types (StmtExecute, Expect.Open)

#
# I.1
1
1
0 rows affected

#
# I.2
RUN recvok

#
# I.3
2
2
0 rows affected
3
3
0 rows affected
4
4
0 rows affected

#
# I.4
RUN recvok
5
5
0 rows affected

command ok
Mysqlx.Ok {
  msg: "bye!"
}
ok

## I. Execute the test using valid compression: zstd + combine mixed=false
#


## I. Send compression message to the server and verify successful execution
#     also show that neither "server_combine_mixed_messages" nor "server_max_combine_messages"
#     has influence on client compression messages
#
# 1. Send compression message containing single X Protocol message (StmtExecute)
# 2. Send compression message containing single X Protocol message (Expect.Open)
# 3. Send compression message containing multiple X Protocol message
#    of the same type (StmtExecute)
# 4. Send compression message containing multiple X Protocol message
#    of the different types (StmtExecute, Expect.Open)

#
# I.1
1
1
0 rows affected

#
# I.2
RUN recvok

#
# I.3
2
2
0 rows affected
3
3
0 rows affected
4
4
0 rows affected

#
# I.4
RUN recvok
5
5
0 rows affected

command ok
Mysqlx.Ok {
  msg: "bye!"
}
ok

## J. Execute the test using valid compression: zstd + combine mixed=true
#


## I. Send compression message to the server and verify successful execution
#     also show that neither "server_combine_mixed_messages" nor "server_max_combine_messages"
#     has influence on client compression messages
#
# 1. Send compression message containing single X Protocol message (StmtExecute)
# 2. Send compression message containing single X Protocol message (Expect.Open)
# 3. Send compression message containing multiple X Protocol message
#    of the same type (StmtExecute)
# 4. Send compression message containing multiple X Protocol message
#    of the different types (StmtExecute, Expect.Open)

#
# I.1
1
1
0 rows affected

#
# I.2
RUN recvok

#
# I.3
2
2
0 rows affected
3
3
0 rows affected
4
4
0 rows affected

#
# I.4
RUN recvok
5
5
0 rows affected

command ok
Mysqlx.Ok {
  msg: "bye!"
}
ok

## K. Execute the test using valid compression: zstd + combine mixed=true + limit-messages=1
#


## I. Send compression message to the server and verify successful execution
#     also show that neither "server_combine_mixed_messages" nor "server_max_combine_messages"
#     has influence on client compression messages
#
# 1. Send compression message containing single X Protocol message (StmtExecute)
# 2. Send compression message containing single X Protocol message (Expect.Open)
# 3. Send compression message containing multiple X Protocol message
#    of the same type (StmtExecute)
# 4. Send compression message containing multiple X Protocol message
#    of the different types (StmtExecute, Expect.Open)

#
# I.1
1
1
0 rows affected

#
# I.2
RUN recvok

#
# I.3
2
2
0 rows affected
3
3
0 rows affected
4
4
0 rows affected

#
# I.4
RUN recvok
5
5
0 rows affected

command ok
Mysqlx.Ok {
  msg: "bye!"
}
ok

## L. Execute the test using valid compression: zstd + combine mixed=true + limit-messages=2
#


## I. Send compression message to the server and verify successful execution
#     also show that neither "server_combine_mixed_messages" nor "server_max_combine_messages"
#     has influence on client compression messages
#
# 1. Send compression message containing single X Protocol message (StmtExecute)
# 2. Send compression message containing single X Protocol message (Expect.Open)
# 3. Send compression message containing multiple X Protocol message
#    of the same type (StmtExecute)
# 4. Send compression message containing multiple X Protocol message
#    of the different types (StmtExecute, Expect.Open)

#
# I.1
1
1
0 rows affected

#
# I.2
RUN recvok

#
# I.3
2
2
0 rows affected
3
3
0 rows affected
4
4
0 rows affected

#
# I.4
RUN recvok
5
5
0 rows affected

command ok
Mysqlx.Ok {
  msg: "bye!"
}
ok
