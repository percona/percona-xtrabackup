################################################################################
# === Purpose ===
# This test validates that, in a cluster group replication,
# a transaction retry on a transaction that is being applied through an
# asynchronous channel on a replica-cluster group primary should successfully
# execute the retried transaction.
#
# === Implementation ===
# 00. The test requires two servers: server1 and 2
# 01. Setup source-replica
# 02. Setup replica as replica-cluster primary
# 03. Initial setup on the source
# 04. Generate commit_order_deadlock on replica-cluster primary so that
#     transaction will be retried
# 05. Cleaning up
################################################################################

--source include/big_test.inc
--source include/have_debug_sync.inc
--source include/have_group_replication_xcom_communication_stack.inc
--source include/force_restart.inc

--echo
--echo ############################################################
--echo # 01. Setup source-replica
--source include/uninstall_group_replication_plugin.inc
--source include/master-slave.inc

--echo
--echo ############################################################
--echo # 02. Setup replica as replica-cluster primary
--source include/rpl_connection_slave.inc

--let $allow_rpl_inited= 1
--let $_group_replication_local_address= localhost:$SERVER_GR_PORT_1
--let $_group_replication_group_seeds= localhost:$SERVER_GR_PORT_1,localhost:$SERVER_GR_PORT_2
--let $restart_parameters=restart:--group_replication_group_name=$group_replication_group_name --group_replication_local_address=$_group_replication_local_address --group_replication_group_seeds=$_group_replication_group_seeds --group_replication_bootstrap_group=1 --group_replication_start_on_boot=1  --group_replication_single_primary_mode=1 --group_replication_enforce_update_everywhere_checks=0 --skip_slave_start=0
--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME $_group_replication_local_address GROUP_REPLICATION_LOCAL_ADDRESS $_group_replication_group_seeds GROUP_REPLICATION_GROUP_SEEDS
--source include/restart_mysqld.inc

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--source include/rpl_connection_slave.inc

--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc

--echo
--echo ############################################################
--echo # 03. Initial setup on the source
--source include/rpl_connection_master.inc

CREATE TABLE t1(c1 INT PRIMARY KEY, c2 INT, INDEX(c2)) ENGINE = InnoDB;
INSERT INTO t1 VALUES
    (1, NULL),
    (2, 2),
    (3, NULL),
    (4, 4),
    (5, NULL),
    (6, 6);

CREATE TABLE t2(a INT PRIMARY KEY);

--source include/sync_slave_sql_with_master.inc

--let $rpl_diff_statement = SELECT * FROM t1, t2
--let $mts_spco_gd_transaction_retries = 10
--source extra/rpl_tests/mts_spco_generate_deadlock_setup.inc

--echo
--echo ############################################################
--echo # 04. Generate commit_order_deadlock on replica-cluster
--echo #     primary so that transaction will be retried
--source include/rpl_connection_master.inc
INSERT INTO t1 VALUES(13, 13);

--let $mts_spco_gd_trx_blocking_worker_1 = INSERT INTO t1 VALUES(14, NULL)
--let $mts_spco_gd_trx_assigned_worker_2 = INSERT INTO t1 VALUES(15, NULL)
--let $mts_spco_gd_trx_blocking_client = SET GLOBAL read_only = ON
--let $mts_spco_gd_trx_to_client_unblocking_workers = SET GLOBAL read_only = OFF
--source extra/rpl_tests/mts_spco_generate_deadlock.inc

--echo
--echo ############################################################
--echo # 05. Cleanup
--let $restart_parameters=restart:--skip_slave_start=0
--source include/kill_and_restart_mysqld.inc

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--source include/rpl_connection_slave.inc
--source include/start_slave_sql.inc

--source include/rpl_connection_master.inc
DROP TABLE t1;
DROP TABLE t2;

--source include/install_group_replication_plugin.inc
--source include/rpl_end.inc

--source extra/rpl_tests/mts_spco_generate_deadlock_cleanup.inc
