###############################################################################
# This test verifies that clone operations that don't replace the server data
# can be executed on running group replication members.
# If the member is stopped, the member can execute replacing clone operations
#
# 0. The test requires two servers: M1 and M2.
# 1. Install the clone plugin on server 1
# 2. Bootstrap server1 and add some data
# 3. Restart server 2 with a monitoring process (mysqld_safe) if needed
# 4. Setup the server so group replication starts on boot
#    Install the clone plugin
#    Start group replication on the server
# 5. Clone operations that replace data are not allowed
#    on user sessions on active group members.
# 6. Local clone operations that use data dirs are allowed
#    on user sessions on active group members.
# 7. Remote clone operations that use data dirs are allowed
#    on user sessions on active group members.
# 8. If group replication is not running, clone operations that replace
#    data are allowed on user sessions on previous group members.
# 9. Cleanup
#

--source include/have_mysqld_monitoring_process.inc
--source include/have_clone_plugin.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

--echo
--echo ############################################################
--echo # 1. Install clone plugin on server1.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $server1_port= `SELECT @@GLOBAL.PORT`

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo
--echo ############################################################
--echo # 2. Bootstrap server1 and add some data

--source include/start_and_bootstrap_group_replication.inc

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);

--echo
--echo #######################################################################
--echo # 3. Restart server 2 with a monitoring process (mysqld_safe) if needed

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`
--let $_group_replication_start_on_boot= `SELECT @@GLOBAL.group_replication_start_on_boot`

--let $plugin_list= $GROUP_REPLICATION
--source include/spawn_monitoring_process.inc

--echo
--echo ############################################################
--echo # 4. Setup the server so group replication starts on boot
--echo #    Install the Clone plugin
--echo #    Start group replication on the server

--disable_query_log
--eval SET PERSIST group_replication_group_name= "$group_replication_group_name"
--eval SET PERSIST group_replication_local_address= "$_group_replication_local_address"
--eval SET PERSIST group_replication_group_seeds= "$_group_replication_group_seeds"

SET PERSIST group_replication_start_on_boot= ON;
--enable_query_log

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--source include/start_group_replication.inc

--echo
--echo ############################################################
--echo # 5. Clone operations that replace data are not allowed
--echo #    on user sessions on active group members.

--replace_result $server1_port SERVER1_PORT
--eval SET GLOBAL clone_valid_donor_list='localhost:$server1_port'
--replace_result $server1_port SERVER1_PORT
--error ER_CLONE_DISALLOWED
--eval CLONE INSTANCE FROM 'root'@localhost:$server1_port IDENTIFIED BY '';

--echo
--echo ############################################################
--echo # 6. Local clone operations that use data dirs are allowed
--echo #    on user sessions on active group members.

--let $CLONE_DATADIR = $MYSQL_TMP_DIR/data_new

--replace_result $CLONE_DATADIR CLONE_DATADIR
--eval CLONE LOCAL DATA DIRECTORY = '$CLONE_DATADIR'

--let $assert_text= Clone must be completed
--let $assert_cond= [SELECT state="Completed" FROM performance_schema.clone_status] = 1;
--source include/assert.inc

--force-rmdir $CLONE_DATADIR

--echo
--echo ############################################################
--echo # 7. Remote clone operations that use data dirs are allowed
--echo #    on user sessions on active group members.

--replace_result $server1_port SERVER1_PORT $CLONE_DATADIR CLONE_DATADIR
--eval CLONE INSTANCE FROM 'root'@localhost:$server1_port IDENTIFIED BY '' DATA DIRECTORY = '$CLONE_DATADIR'

--let $assert_text= Clone must be completed
--let $assert_cond= [SELECT state="Completed" FROM performance_schema.clone_status] = 1;
--source include/assert.inc

--force-rmdir $CLONE_DATADIR

--echo
--echo ############################################################
--echo # 8. If group replication is not running, clone operations that replace
--echo #  data are allowed on user sessions on previous group members.

--source include/stop_group_replication.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

INSERT INTO t1 VALUES (2);

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--replace_result $server1_port SERVER1_PORT
--eval CLONE INSTANCE FROM 'root'@localhost:$server1_port IDENTIFIED BY '';

--source include/wait_until_disconnected.inc

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--let $group_replication_member_state=ONLINE
--source include/gr_wait_for_member_state.inc

--let $assert_text= Clone must be completed
--let $assert_cond= [SELECT state="Completed" FROM performance_schema.clone_status] = 1;
--source include/assert.inc

# See if the data has been properly cloned in server2
--let $diff_tables=server1:test.t1 ,server2:test.t1
--source include/diff_tables.inc

--echo
--echo ############################################################
--echo # 9. Cleanup

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

UNINSTALL PLUGIN clone;

DROP TABLE test.t1;

--source include/rpl_sync.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

RESET PERSIST IF EXISTS group_replication_group_name;
RESET PERSIST IF EXISTS group_replication_local_address;
RESET PERSIST IF EXISTS group_replication_group_seeds;
RESET PERSIST IF EXISTS group_replication_start_on_boot;

--replace_result $_group_replication_start_on_boot START_ON_BOOT_VALUE
--eval SET GLOBAL group_replication_start_on_boot= $_group_replication_start_on_boot

UNINSTALL PLUGIN clone;

set session sql_log_bin=0;
call mtr.add_suppression("Clone removing all user data for provisioning: Started");
call mtr.add_suppression("Clone removing all user data for provisioning: Finished");
set session sql_log_bin=1;

--source include/clean_monitoring_process.inc

--source include/group_replication_end.inc
