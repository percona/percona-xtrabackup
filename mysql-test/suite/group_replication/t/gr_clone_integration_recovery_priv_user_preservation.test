# ==== Purpose ====
#
# This server proves that if correctly configured we can clone a
# a group replication member and its recovery settings for privilege
# checks users and require row format are preserved.
#
# ==== Implementation ====
#
# 0. The test requires two servers: M1 and M2 with group replication and clone
# 1. Install clone plugin on server1.
# 2. Set a privileged user for server 1 GR recovery channel
# 3. Bootstrap server1 and add some data
# 4. Restart server 2 with a monitoring process (mysqld_safe) if needed
# 5. Setup the server so group replication starts on boot
#    Install the Clone plugin
# 6. On a empty server2 start group replication
#    Wait for it to restart and come back
#    Check clone was completed
# 7. Check that the recovery privileged user was preserved
# 8. Cleanup
#
# ==== References ====
#
# Bug#29995256: PRIVILEGE_CHECKS_USER NOT CLONED FOR RECOVERY CHANNEL
#

--source include/big_test.inc
--source include/have_mysqld_monitoring_process.inc
--source include/have_clone_plugin.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

--echo #
--echo # 1. Install clone plugin on server1.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo #
--echo # 2. Set a privileged user for server 1 GR recovery channel

CREATE USER 'u1'@'localhost';
GRANT SESSION_VARIABLES_ADMIN, REPLICATION_APPLIER ON *.* TO 'u1'@'localhost';
GRANT CREATE,INSERT ON *.* TO 'u1'@'localhost';

CHANGE MASTER TO PRIVILEGE_CHECKS_USER = 'u1'@'localhost' FOR CHANNEL 'group_replication_recovery';

--echo #
--echo # 3. Bootstrap server1 and add some data

--source include/start_and_bootstrap_group_replication.inc

CREATE DATABASE db1;
CREATE TABLE db1.t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO db1.t1 VALUES (1);

--echo #
--echo # 4. Restart server 2 with a monitoring process (mysqld_safe) if needed

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`
--let $_group_replication_start_boot_save= `SELECT @@GLOBAL.group_replication_start_on_boot`

--let $plugin_list= $GROUP_REPLICATION
--source include/spawn_monitoring_process.inc

--echo #
--echo # 5. Setup the server so group replication starts on boot
--echo #    Install the Clone plugin

--disable_query_log
--eval SET PERSIST group_replication_group_name= "$group_replication_group_name"
--eval SET PERSIST group_replication_local_address= "$_group_replication_local_address"
--eval SET PERSIST group_replication_group_seeds= "$_group_replication_group_seeds"

SET PERSIST group_replication_start_on_boot= ON;
--enable_query_log

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo #
--echo # 6. On a empty server2 start group replication
--echo #    Wait for it to restart and come back
--echo #    Check clone was completed

--let $_group_replication_threshold_save= `SELECT @@GLOBAL.group_replication_clone_threshold`
SET GLOBAL group_replication_clone_threshold= 1;

START GROUP_REPLICATION;

--source include/wait_until_disconnected.inc

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--let $group_replication_member_state=ONLINE
--source include/gr_wait_for_member_state.inc

--let $assert_text= Clone must be completed
--let $assert_cond= [SELECT state="Completed" FROM performance_schema.clone_status] = 1;
--source include/assert.inc

# See if the data has been properly cloned in server2
--let $diff_tables=server1:db1.t1,server2:db1.t1
--source include/diff_tables.inc

--echo #
--echo # 7. Check that the recovery privileged user was preserved

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $slave_rl_info_count = `SELECT COUNT(*) FROM mysql.slave_relay_log_info WHERE channel_name="group_replication_recovery" AND Privilege_checks_username = "u1" AND Privilege_checks_hostname="localhost" AND Require_row_format=1`
--let $assert_text= Credentials on server 1 are preserved
--let $assert_cond= $slave_rl_info_count = 1
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $slave_rl_info_count = `SELECT COUNT(*) FROM mysql.slave_relay_log_info WHERE channel_name="group_replication_recovery" AND Privilege_checks_username = "u1" AND Privilege_checks_hostname="localhost" AND Require_row_format=1`
--let $assert_text= Credentials on server 2 were proprely cloned
--let $assert_cond= $slave_rl_info_count = 1
--source include/assert.inc

--let $perf_schema_count = `SELECT COUNT(*) FROM performance_schema.replication_applier_configuration WHERE channel_name= "group_replication_recovery" AND privilege_checks_user = "'u1'@'localhost'" AND require_row_format=1`
--let $assert_text= Performance schema values on server 2 are correct
--let $assert_cond= $perf_schema_count = 1
--source include/assert.inc

--echo #
--echo # 8. Cleanup

--eval SET GLOBAL group_replication_clone_threshold= $_group_replication_threshold_save

RESET PERSIST IF EXISTS group_replication_group_name;
RESET PERSIST IF EXISTS group_replication_local_address;
RESET PERSIST IF EXISTS group_replication_group_seeds;
RESET PERSIST IF EXISTS group_replication_start_on_boot;

DROP TABLE db1.t1;
DROP DATABASE db1;

--source include/rpl_sync.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

CHANGE MASTER TO PRIVILEGE_CHECKS_USER = NULL FOR CHANNEL 'group_replication_recovery';

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

CHANGE MASTER TO PRIVILEGE_CHECKS_USER = NULL FOR CHANNEL 'group_replication_recovery';

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

DROP USER u1@localhost;

UNINSTALL PLUGIN clone;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

UNINSTALL PLUGIN clone;

set session sql_log_bin=0;
call mtr.add_suppression("Due to the number of missing transactions being higher than the configured threshold of*");
call mtr.add_suppression("Clone removing all user data for provisioning: Started");
call mtr.add_suppression("Clone removing all user data for provisioning: Finished");
set session sql_log_bin=1;

--source include/clean_monitoring_process.inc

--replace_result $_group_replication_start_boot_save START_ON_BOOT_VALUE
--eval SET GLOBAL group_replication_start_on_boot= $_group_replication_start_boot_save

--source include/group_replication_end.inc
