###############################################################################
# This test evaluates that on critical scenarios like the execution of a
# concurrent DDL query on the donor, the joiner cloning process will fail.
# It also evaluates that on errors like this that happen when all the data was
# already removed from the joiner, no distributed recovery attempts occur.
#
# 1. Install clone plugin on server1.
# 2. Bootstrap server1 and add some data
# 3. Restart server 2 with a monitoring process (mysqld_safe) if needed
# 4. Setup the server so group replication starts on boot
#    Install the Clone plugin
# 5. On a empty server2 start group replication
#    Pause it and execute a DDL query on the donor
#    The clone process should fail on the joiner
# 6. Restart Group replication
#    The clone process should now be successful
# 7. Cleanup
#

--source include/have_debug.inc
--source include/big_test.inc
--source include/have_mysqld_monitoring_process.inc
--source include/have_clone_plugin.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

--echo
--echo ############################################################
--echo # 1. Install clone plugin on server1.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'
SET GLOBAL clone_ddl_timeout = 0;

--echo
--echo ############################################################
--echo # 2. Bootstrap server1 and add some data

--source include/start_and_bootstrap_group_replication.inc

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);

--echo
--echo #######################################################################
--echo # 3. Restart server 2 with a monitoring process (mysqld_safe) if needed

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`

--let $plugin_list= $GROUP_REPLICATION
--source include/spawn_monitoring_process.inc

--echo
--echo ############################################################
--echo # 4. Setup the server so group replication starts on boot
--echo #    Install the Clone plugin

--disable_query_log
--eval SET PERSIST group_replication_group_name= "$group_replication_group_name"
--eval SET PERSIST group_replication_local_address= "$_group_replication_local_address"
--eval SET PERSIST group_replication_group_seeds= "$_group_replication_group_seeds"

--let $_group_replication_start_on_boot_save= `SELECT @@GLOBAL.group_replication_start_on_boot`
SET PERSIST group_replication_start_on_boot= ON;
--enable_query_log

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo
--echo ############################################################
--echo # 5. On a empty server2 start group replication
--echo #    Pause it and execute a DDL query on the donor
--echo #    The clone process should fail on the joiner

--let $_group_replication_threshold_save= `SELECT @@GLOBAL.group_replication_clone_threshold`

SET GLOBAL group_replication_clone_threshold= 1;
SET GLOBAL clone_autotune_concurrency = OFF;
SET GLOBAL clone_max_concurrency = 1;
SET GLOBAL clone_ddl_timeout = 0;

SET @@GLOBAL.DEBUG='+d,gr_clone_wait';

START GROUP_REPLICATION;

SET DEBUG_SYNC = 'now WAIT_FOR gr_clone_paused';
SET @@GLOBAL.DEBUG='-d,gr_clone_wait';

--let $rpl_connection_name= server_1_1
--source include/rpl_connection.inc

--send ALTER TABLE t1 ADD COLUMN col2 int, ALGORITHM=COPY

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

# Wait until the ALTER TABLE is waiting for clone to bail out.
--let $wait_condition= SELECT PROCESSLIST_STATE="After create" FROM performance_schema.threads WHERE PROCESSLIST_INFO LIKE "ALTER TABLE t1 ADD COLUMN col2 int, ALGORITHM=COPY"
--source include/wait_condition.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET DEBUG_SYNC = 'now SIGNAL gr_clone_continue';

--let $group_replication_member_state=ERROR
--source include/gr_wait_for_member_state.inc

--let $assert_text= Clone should have failed
--let $assert_cond= [SELECT state="Failed" FROM performance_schema.clone_status] = 1;
--source include/assert.inc

# Verify in the log file that recovery cannot be executed
--let $assert_file= $MYSQLTEST_VARDIR/log/mysqld.2.err
--let $assert_only_after = CURRENT_TEST: group_replication.gr_clone_integration_ddl_error
--let $assert_text = Clone failed and no recovery is possible
--let $assert_select = Due to a critical cloning error or lack of donors, distributed recovery cannot be executed.
--let $assert_count = 1
--source include/assert_grep.inc

--echo
--echo ############################################################
--echo # 6. Restart Group replication
--echo #    The clone process should now be successful

--source include/stop_group_replication.inc

START GROUP_REPLICATION;

--source include/wait_until_disconnected.inc

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--let $group_replication_member_state=ONLINE
--source include/gr_wait_for_member_state.inc

# See if the data has been properly cloned in server2
--let $diff_tables=server1:test.t1 ,server2:test.t1
--source include/diff_tables.inc

--echo
--echo ############################################################
--echo # 7. Cleanup

--replace_result $_group_replication_threshold_save CLONE_THRESHOLD_VALUE
--eval SET GLOBAL group_replication_clone_threshold= $_group_replication_threshold_save

RESET PERSIST IF EXISTS group_replication_group_name;
RESET PERSIST IF EXISTS group_replication_local_address;
RESET PERSIST IF EXISTS group_replication_group_seeds;
RESET PERSIST IF EXISTS group_replication_start_on_boot;
--replace_result $_group_replication_start_on_boot_save START_ON_BOOT_VALUE
--eval SET GLOBAL group_replication_start_on_boot= $_group_replication_start_on_boot_save

--let $rpl_connection_name= server_1_1
--source include/rpl_connection.inc

--reap

DROP TABLE t1;

--source include/rpl_sync.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/clean_monitoring_process.inc

set session sql_log_bin=0;
call mtr.add_suppression("Clone removing all user data for provisioning: Started");
call mtr.add_suppression("Clone removing all user data for provisioning: Finished");
call mtr.add_suppression("Due to the number of missing transactions being higher than the configured threshold of 1, this member will start distributed recovery using clone.");
call mtr.add_suppression("Internal query: CLONE INSTANCE FROM \'root\'@\'127.0.0.1\':[0-9]+ IDENTIFIED BY \'\\*\\*\\*\\*\\*\' REQUIRE NO SSL; result in error. Error number:*");
call mtr.add_suppression("There was an issue when cloning from another server: Error number: 3862 Error message: Clone Donor Error: 3633 : Concurrent DDL is performed during clone operation. Please try again.");
call mtr.add_suppression("Due to a critical cloning error or lack of donors, distributed recovery cannot be executed. The member will now leave the group.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
set session sql_log_bin=1;

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

UNINSTALL PLUGIN clone;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

UNINSTALL PLUGIN clone;

--source include/group_replication_end.inc
