# ==== Purpose ====
#
# Verify that `REQUIRE_TABLE_PRIMARY_KEY_CHECK` option is settable for GR channels.
#
# ==== Implementation ====
#
# 1. Set `REQUIRE_TABLE_PRIMARY_KEY_CHECK` option for the applier channel
#    Start a member and check the `REQUIRE_TABLE_PRIMARY_KEY_CHECK` option is set
# 2. Stop the applier to block server 2 recovery
# 3. Set `REQUIRE_TABLE_PRIMARY_KEY_CHECK` option for the recovery channel
#    Start the member and check the `REQUIRE_TABLE_PRIMARY_KEY_CHECK` option is set
# 4. Cleanup
#
# ==== References ====
#
# WL#13239: Enable/disable primary key checks on slaves
#

--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

--echo
--echo # 1. Set `REQUIRE_TABLE_PRIMARY_KEY_CHECK` option for the applier channel
--echo #    Start a member and check the `REQUIRE_TABLE_PRIMARY_KEY_CHECK` option is set


--eval CHANGE MASTER TO REQUIRE_TABLE_PRIMARY_KEY_CHECK = OFF FOR CHANNEL "group_replication_applier"

--source include/start_and_bootstrap_group_replication.inc

--let $count = `SELECT COUNT(*) FROM performance_schema.replication_applier_configuration WHERE require_table_primary_key_check = 'OFF' AND channel_name = "group_replication_applier"`
--let $assert_text = require_table_primary_key_check in performance_schema.replication_applier_configuration is set to OFF for "group_replication_applier"
--let $assert_cond = 1 = $count
--source include/assert.inc

--echo
--echo # 2. Stop the applier to block server 2 recovery

--source include/gr_stop_applier_sql_thread.inc

--echo
--echo # 3. Set `REQUIRE_TABLE_PRIMARY_KEY_CHECK` option for the recovery channel
--echo #    Start the member and check the `REQUIRE_TABLE_PRIMARY_KEY_CHECK` option is set

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--eval CHANGE MASTER TO REQUIRE_TABLE_PRIMARY_KEY_CHECK = ON FOR CHANNEL "group_replication_recovery"

--let $group_replication_start_member_state= RECOVERING
--source include/start_group_replication.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.replication_applier_configuration WHERE require_table_primary_key_check = 'ON' AND channel_name = "group_replication_recovery"
--source include/wait_condition.inc

--let $count = `SELECT COUNT(*) FROM performance_schema.replication_applier_configuration WHERE require_table_primary_key_check = 'ON' AND channel_name = "group_replication_recovery"`
--let $assert_text = require_table_primary_key_check in performance_schema.replication_applier_configuration is set to ON for "group_replication_recovery"
--let $assert_cond = 1 = $count
--source include/assert.inc

--echo
--echo # 4. Cleanup

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/gr_start_applier_sql_thread.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc

--source include/group_replication_end.inc
