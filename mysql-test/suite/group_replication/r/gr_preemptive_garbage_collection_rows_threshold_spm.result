include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the connection metadata repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START REPLICA; see the 'START REPLICA Syntax' in the MySQL Manual for more information.
[connection server1]

############################################################
# 1. Deploy group with certification info periodic garbage
#    collection disabled and preemptive garbage collection
#    enabled in single-primary mode.
#    Block secondary "group_replication_applier" channel to
#    mimic a delayed server.
[connection server1]
SET @group_replication_preemptive_garbage_collection_saved= @@GLOBAL.group_replication_preemptive_garbage_collection;
SET @@GLOBAL.group_replication_preemptive_garbage_collection= ON;
SET @@GLOBAL.DEBUG= '+d,group_replication_certifier_broadcast_thread_big_period';
include/start_and_bootstrap_group_replication.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY AUTO_INCREMENT);
[connection server2]
SET @group_replication_preemptive_garbage_collection_saved= @@GLOBAL.group_replication_preemptive_garbage_collection;
SET @@GLOBAL.group_replication_preemptive_garbage_collection= ON;
SET @@GLOBAL.DEBUG= '+d,group_replication_certifier_broadcast_thread_big_period';
include/start_group_replication.inc
SET @@GLOBAL.DEBUG='+d,block_applier_updates';
include/assert.inc ['There was 1 certification info garbage collection runs']
[connection server1]
include/assert.inc ['There were 2 certification info garbage collection runs']

############################################################
# 2. Do some transactions so that we have 10000 write-sets on
#    certification info.
[connection server1]
include/assert.inc ['Count_transactions_rows_validating must be equal to 10000 on server1']
include/assert.inc [GTID_EXECUTED must contain the INSERTs on server1]
[connection server2]
SET DEBUG_SYNC = "now WAIT_FOR applier_read_blocked";
include/assert.inc [GTID_EXECUTED must not contain the INSERTs on server2]
include/include/rpl/assert_logical_timestamps.inc [0 0;1 3;1 4;1 5;1 6]

############################################################
# 3. Set group_replication_preemptive_garbage_collection_rows_threshold
#    to 10000 and check that certification info was garbage collected.
[connection server1]
SET @@GLOBAL.group_replication_preemptive_garbage_collection_rows_threshold= 10000;
include/assert.inc ['There were 3 certification info garbage collection runs']
[connection server2]
SET @@GLOBAL.group_replication_preemptive_garbage_collection_rows_threshold= 10000;
include/assert.inc ['There were 2 certification info garbage collection runs']

############################################################
# 4. Increase group_replication_preemptive_garbage_collection_rows_threshold
#    to 30000.
[connection server1]
SET @@GLOBAL.group_replication_preemptive_garbage_collection_rows_threshold= 30000;
[connection server2]
SET @@GLOBAL.group_replication_preemptive_garbage_collection_rows_threshold= 30000;

############################################################
# 5. Do more transactions so that we have 20000 write-sets on
#    certification info.
[connection server1]
include/assert.inc ['Count_transactions_rows_validating must be equal to 20000 on server1']
include/assert.inc [GTID_EXECUTED must contain the INSERTs on server1]
include/assert.inc ['Continue to be 3 certification info garbage collection runs']
[connection server2]
include/assert.inc [GTID_EXECUTED must not contain the INSERTs on server2]
include/assert.inc ['Continue to be 2 certification info garbage collection runs']
include/include/rpl/assert_logical_timestamps.inc [0 0;1 3;1 4;1 5;1 6;6 7;6 8]

############################################################
# 6. Do a transaction that generates 3000 write-sets, since 30000
#    is equal to group_replication_preemptive_garbage_collection_rows_threshold
#    these write-sets will not be added to certification info.
[connection server1]
include/assert.inc ['Count_transactions_rows_validating must be equal to 20000 on server1']
include/assert.inc [GTID_EXECUTED must contain the INSERTs on server1]
[connection server2]
include/assert.inc ['Count_transactions_rows_validating must be equal to 20000 on server1']
include/assert.inc [GTID_EXECUTED must not contain the INSERTs on server2]
include/include/rpl/assert_logical_timestamps.inc [0 0;1 3;1 4;1 5;1 6;6 7;6 8;8 9]

############################################################
# 7. Clean up.
[connection server2]
SET @@GLOBAL.DEBUG='-d,block_applier_updates';
SET DEBUG_SYNC = "now SIGNAL resume_applier_read";
[connection server1]
DROP TABLE t1;
include/rpl/sync.inc
[connection server2]
include/stop_group_replication.inc
SET @@GLOBAL.group_replication_preemptive_garbage_collection= @group_replication_preemptive_garbage_collection_saved;
SET @@GLOBAL.group_replication_preemptive_garbage_collection_rows_threshold= DEFAULT;
SET @@GLOBAL.DEBUG= '-d,group_replication_certifier_broadcast_thread_big_period';
SET DEBUG_SYNC= 'RESET';
[connection server1]
include/stop_group_replication.inc
SET @@GLOBAL.group_replication_preemptive_garbage_collection= @group_replication_preemptive_garbage_collection_saved;
SET @@GLOBAL.group_replication_preemptive_garbage_collection_rows_threshold= DEFAULT;
SET @@GLOBAL.DEBUG= '-d,group_replication_certifier_broadcast_thread_big_period';
include/group_replication_end.inc
