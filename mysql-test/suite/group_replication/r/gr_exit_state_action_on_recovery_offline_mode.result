
#########################################################################
# 0) Setup group of 2 members (M1 and M2) but only start GR on M2.
#########################################################################

include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the connection metadata repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START REPLICA; see the 'START REPLICA Syntax' in the MySQL Manual for more information.
[connection server1]
[connection server1]
SET @saved_recovery_retry_count = @@GLOBAL.group_replication_recovery_retry_count;
SET @@GLOBAL.group_replication_recovery_retry_count = 1;
SET @saved_exit_state_action = @@GLOBAL.group_replication_exit_state_action;
SET @@GLOBAL.group_replication_exit_state_action = OFFLINE_MODE;
SET sql_log_bin = 0;
CREATE USER 'user1'@'localhost';
SET sql_log_bin = 1;
SET sql_log_bin = 0;
CREATE TABLE t1 (a INT PRIMARY KEY);
INSERT INTO t1 VALUES (1);
SET sql_log_bin = 1;
[connection server2]
include/start_and_bootstrap_group_replication.inc
[connection server1]
SET sql_log_bin = 0;
call mtr.add_suppression("read failed");
call mtr.add_suppression("Replica SQL for channel 'group_replication_recovery': Error 'Table 't1'*");
call mtr.add_suppression("Replica SQL for channel 'group_replication_recovery': Worker [0-9] failed executing transaction*");
call mtr.add_suppression("Replica SQL for channel 'group_replication_recovery': ... The replica coordinator and worker threads are stopped,*");
call mtr.add_suppression("Replica: Table 't1' already exists Error_code:*");
call mtr.add_suppression("Maximum number of retries when trying to connect to a donor reached. Aborting group replication incremental recovery.");
call mtr.add_suppression("Fatal error during the incremental recovery process of Group Replication. The server will leave the group.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression("Error while starting the group replication incremental recovery receiver/applier threads");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("The server was automatically set into offline mode after an error was detected.");
SET sql_log_bin = 1;

#########################################################################
# 1) Force error during the catch-up phase of M1.
#########################################################################

[connection server2]
CREATE TABLE t1 (a INT PRIMARY KEY);
[connection server1]
include/start_group_replication.inc

#########################################################################
# 2) Verify that M1 goes into ERROR state and to offline mode.
#########################################################################

include/gr_wait_for_member_state.inc

# WL#15855: System variable metadata and attribute data
# Validate that the member set custom reason for entiering offline mode

# Check that the 'reason' attribute is visible in P_S
SELECT * FROM performance_schema.global_variable_attributes;
VARIABLE_NAME	ATTR_NAME	ATTR_VALUE
offline_mode	reason	(GR) leave group on failure
super_read_only	reason	(GR) start
# Validate new session gets rejected with a custom message (including Health Monitor's reason)
connect(localhost,user1,,test,SOURCE_PORT,SOURCE_SOCKET);
ERROR HY000: The server is currently in offline mode since TIMESTAMP, reason: (GR) leave group on failure
include/assert_and_disable_read_only.inc
include/assert_and_disable_offline_mode.inc
[connection server2]
include/rpl/gr_wait_for_number_of_members.inc

#########################################################################
# 3) Cleanup.
#########################################################################

[connection server1]
include/stop_group_replication.inc
SET SESSION sql_log_bin= 0;
DROP TABLE t1;
DROP USER 'user1'@'localhost';
SET SESSION sql_log_bin= 1;
include/start_group_replication.inc
DROP TABLE t1;
SET @@GLOBAL.group_replication_exit_state_action = @saved_exit_state_action;
SET @@GLOBAL.group_replication_recovery_retry_count = @saved_recovery_retry_count;
include/group_replication_end.inc
