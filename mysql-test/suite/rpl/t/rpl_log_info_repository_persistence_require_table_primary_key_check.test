# ==== Purpose ====
#
# This test checks that the slave parameter REQUIRE_TABLE_PRIMARY_KEY_CHECK is persisted
# and also upgraded correctly using either table or files.
#
# ==== Requirements ====
#
# + TC1: **REQUIRE_TABLE_PRIMARY_KEY_CHECK** configuration exists in table/file.
# + TC2: **REQUIRE_TABLE_PRIMARY_KEY_CHECK** configuration survives a server restart.
# + TC3: Verify that the column is added when doing an upgrade from 5.7
# + TC4: Verify that the column value is 'STREAM' for all channels.
# + TC5: Verify that TC4 is true when upgrading from Table repositories
# + TC6: Verify that TC4 is true when upgrading from File repositories
# + TC7: Verify that RESET REPLICA has no observable effects for `REQUIRE_TABLE_PRIMARY_KEY_CHECK`.
# + TC8: Verify that RESET REPLICA ALL has observable effects for `REQUIRE_TABLE_PRIMARY_KEY_CHECK`.
#
# ==== Implementation ====
#
# 0. Check if a privilege checks user exists and adapt the test if so.
#    Create a test auxiliary include file to avoid step repetition.
#
# 1. Basic operations with REQUIRE_TABLE_PRIMARY_KEY_CHECK
#
# 1.1. Set REQUIRE_TABLE_PRIMARY_KEY_CHECK to ON
#      Check the performance_schema table and applier metadata repository are
#      correct
# 1.2. Set REQUIRE_TABLE_PRIMARY_KEY_CHECK to OFF
#      Check the performance_schema table and applier metadata repository are
#      correct
# 1.3. Set REQUIRE_TABLE_PRIMARY_KEY_CHECK to STREAM
#      Check the performance_schema table and applier metadata repository are
#      correct
# 1.4. Set REQUIRE_TABLE_PRIMARY_KEY_CHECK to GENERATE
#      Check the performance_schema table and applier metadata repository are
#      correct
#
# 2. Table to Table upgrades
#
# 2.1 Upgrade the server while using Table repositories
#     Have 3 channels:
#       1. A channel with no privileged user (ch1)
#       2. A group_replication channel (group_replication_recovery)
#       3. A channel with a privileged user (default channel)
#     REQUIRE_TABLE_PRIMARY_KEY_CHECK is set to STREAM for all channels
#
# 3. Error scenario: Test when the stored configuration for a GR channel is invalid
#
# 4. RESET REPLICA tests
#
# 4.1. Change REQUIRE_TABLE_PRIMARY_KEY_CHECK to ON
#      Execute a RESET REPLICA command.
#      The option should not be affected
#      It also survives a server restart
# 4.2. Execute a RESET REPLICA ALL command.
#      The table line was removed.
#      On recreation the value is STREAM for the default channel
# 4.3. Make RESET REPLICA fail due to persistence issues
#      Check that errors on slave info persistence are gracefully handled
#
# 5. Cleanup
#
# ==== References ====
#
# WL#13239: Enable/disable primary key checks on slaves

--source include/big_test.inc
--source include/have_debug.inc
--source include/not_group_replication_plugin.inc
# This test is unrelated to log format
--source include/have_binlog_format_row.inc
--source include/not_replica_parallel_workers.inc
--source include/rpl/init_source_replica.inc

--echo
--echo # 0. Check if a privilege checks user exists and adapt the test if so.
--echo #    Create a test auxiliary include file to avoid step repetition.

--source include/rpl/connection_replica.inc

# The privilege checks user is only used as a grep starting point.
# Determine the hostname of the privilege checks user of the replication channel.
# If privilege checks user does not exist, it will be set to 'root'@'localhost'.

--let $_privilege_checks_user= query_get_value(select * from performance_schema.replication_applier_configuration,PRIVILEGE_CHECKS_USER,1)
if ( $_privilege_checks_user != NULL)
{
  --let $_privilege_checks_user_at_index= `SELECT LOCATE('@', "$_privilege_checks_user")`
  --let $_privilege_checks_user_host= `SELECT SUBSTRING("$_privilege_checks_user", $_privilege_checks_user_at_index + 1)`
  --let $_privilege_checks_user_host = `SELECT LTRIM(RTRIM($_privilege_checks_user_host))`
}
if ( $_privilege_checks_user == NULL)
{
  --let $_privilege_checks_user_host= localhost
}

--write_file $MYSQL_TMP_DIR/check_require_table_primary_key_check_in_repo.inc END_OF_PROCEDURE

  if ($require_table_primary_key_check_value == '')
  {
    --die !!!ERROR IN TEST: you must set $require_table_primary_key_check_value
  }
  if ($require_table_primary_key_check_file_value == '')
  {
    --die !!!ERROR IN TEST: you must set $require_table_primary_key_check_file_value
  }

  SELECT REQUIRE_TABLE_PRIMARY_KEY_CHECK FROM mysql.slave_relay_log_info;

  --let $expected_value = `SELECT REQUIRE_TABLE_PRIMARY_KEY_CHECK FROM mysql.slave_relay_log_info`
  --let $assert_text = Check mysql.slave_relay_log_info
  --let $assert_cond = "$expected_value" = "$require_table_primary_key_check_file_value"
  --source include/assert.inc

  --let $count = `SELECT COUNT(*) FROM performance_schema.replication_applier_configuration WHERE REQUIRE_TABLE_PRIMARY_KEY_CHECK = '$require_table_primary_key_check_value'`
  --let $assert_text = REQUIRE_TABLE_PRIMARY_KEY_CHECK for default channel "" in performance_schema.replication_applier_configuration is $require_table_primary_key_check_value
  --let $assert_cond = $count = 1
  --source include/assert.inc
END_OF_PROCEDURE

--let $MYSQLD_DATADIR= `select @@datadir`

# 1. Basic operations with REQUIRE_TABLE_PRIMARY_KEY_CHECK

--echo
--echo # 1.1. Set REQUIRE_TABLE_PRIMARY_KEY_CHECK to ON
--echo #      Check the performance_schema table and applier metadata repository
--echo #      are correct

STOP REPLICA;

--disable_query_log
if ( $_privilege_checks_user == NULL)
{
  CHANGE REPLICATION SOURCE TO PRIVILEGE_CHECKS_USER = 'root'@'localhost', REQUIRE_TABLE_PRIMARY_KEY_CHECK = ON;
}
if ( $_privilege_checks_user != NULL)
{
  CHANGE REPLICATION SOURCE TO REQUIRE_TABLE_PRIMARY_KEY_CHECK = ON;
}
--enable_query_log

START REPLICA;

--let $require_table_primary_key_check_value = ON
--let require_table_primary_key_check_file_value = ON
--source $MYSQL_TMP_DIR/check_require_table_primary_key_check_in_repo.inc

--echo
--echo # 1.2. Set REQUIRE_TABLE_PRIMARY_KEY_CHECK to OFF
--echo #      Check the performance_schema table and applier metadata repository
--echo #      are correct

STOP REPLICA;

CHANGE REPLICATION SOURCE TO REQUIRE_TABLE_PRIMARY_KEY_CHECK = OFF;

START REPLICA;

--let $require_table_primary_key_check_value = OFF
--let require_table_primary_key_check_file_value = OFF
--source $MYSQL_TMP_DIR/check_require_table_primary_key_check_in_repo.inc

--echo
--echo # 1.3. Set REQUIRE_TABLE_PRIMARY_KEY_CHECK to STREAM
--echo #      Check the performance_schema table and applier metadata repository
--echo #      are correct

STOP REPLICA;

CHANGE REPLICATION SOURCE TO REQUIRE_TABLE_PRIMARY_KEY_CHECK = STREAM;

START REPLICA;

--let $require_table_primary_key_check_value = STREAM
--let require_table_primary_key_check_file_value = STREAM
--source $MYSQL_TMP_DIR/check_require_table_primary_key_check_in_repo.inc

--echo
--echo # 1.4. Set REQUIRE_TABLE_PRIMARY_KEY_CHECK to GENERATE
--echo #      Check the performance_schema table and applier metadata repository
--echo #      are correct

STOP REPLICA;

CHANGE REPLICATION SOURCE TO REQUIRE_TABLE_PRIMARY_KEY_CHECK = GENERATE;

START REPLICA;

--let $require_table_primary_key_check_value = GENERATE
--let require_table_primary_key_check_file_value = GENERATE
--source $MYSQL_TMP_DIR/check_require_table_primary_key_check_in_repo.inc

STOP REPLICA;

# 2. Table to Table upgrades

--echo
--echo # 2.1 Upgrade the server while using Table repositories
--echo #     Have 3 channels:
--echo #       1. A channel with no privileged user (ch1)
--echo #       2. A group_replication channel (group_replication_recovery)
--echo #       3. A channel with a privileged user (default channel)
--echo #     REQUIRE_TABLE_PRIMARY_KEY_CHECK is set to STREAM for all channels

# For runs where GTID mode is OFF we enable it so we can configure the GR recovery channel
--let $rpl_gtid_mode= ON
--let $rpl_server_numbers= 2
--let $rpl_set_enforce_gtid_consistency= 1
--let $rpl_skip_sync= 1
--let $no_extra_info = 1
--source include/rpl/set_gtid_mode.inc

CHANGE REPLICATION SOURCE TO SOURCE_HOST="localhost", SOURCE_PORT=12 FOR CHANNEL "ch1" ;
--disable_warnings
CHANGE REPLICATION SOURCE TO SOURCE_USER="root" FOR CHANNEL "group_replication_recovery";
--enable_warnings
CHANGE REPLICATION SOURCE TO SOURCE_HOST="localhost", SOURCE_PORT=12, PRIVILEGE_CHECKS_USER = 'root'@'localhost' FOR CHANNEL "";

# Revert the table to 11 lines (pre upgrade)
ALTER TABLE mysql.slave_relay_log_info DROP COLUMN Require_table_primary_key_check;
UPDATE mysql.slave_relay_log_info SET Number_of_lines = 11;

--let $rpl_server_number = 2
--let $rpl_server_parameters = --skip_replica_start --upgrade=FORCE
--let $explicit_default_wait_counter = 15000
--source include/rpl/restart_server.inc

--let $count = `SELECT COUNT(*) FROM performance_schema.replication_applier_configuration WHERE REQUIRE_TABLE_PRIMARY_KEY_CHECK = 'STREAM'`
--let $assert_text = Check the number of channels with REQUIRE_TABLE_PRIMARY_KEY_CHECK set to STREAM
--let $assert_cond = $count = 3
--source include/assert.inc

--let $count = `SELECT COUNT(*) FROM mysql.slave_relay_log_info WHERE REQUIRE_TABLE_PRIMARY_KEY_CHECK = 'STREAM'`
--let $assert_text = Check that mysql.slave_relay_log_info entries all have REQUIRE_TABLE_PRIMARY_KEY_CHECK set to STREAM
--let $assert_cond = $count = 3
--source include/assert.inc

RESET REPLICA ALL FOR CHANNEL "ch1";

if ($gtid_mode_on == 0) {
  --let $rpl_gtid_mode = 0
  --let $rpl_set_enforce_gtid_consistency = 0
}
--let $no_extra_info = 1
--source include/rpl/set_gtid_mode.inc

# Error scenarios

--echo
--echo # 3. Error scenario: Test when the stored configuration for a GR channel is invalid

UPDATE mysql.slave_relay_log_info SET Require_table_primary_key_check='GENERATE' WHERE Channel_name="group_replication_recovery";

--let $rpl_server_number = 2
--let $rpl_server_parameters = --skip_replica_start
--source include/rpl/restart_server.inc

--let $slave_sql_errno= convert_error(ER_REQUIRE_TABLE_PRIMARY_KEY_CHECK_GENERATE_WITH_GR_IN_REPO)
--let $wait_condition= SELECT COUNT(*)>=1 FROM performance_schema.error_log WHERE error_code='MY-0$slave_sql_errno' AND data LIKE "%Replication configuration appears to be corrupted. On Group Replication channel%"
--source include/wait_condition.inc

RESET REPLICA ALL FOR CHANNEL "group_replication_recovery";

# 4. RESET REPLICA tests

--echo
--echo # 4.1. Change REQUIRE_TABLE_PRIMARY_KEY_CHECK to ON
--echo #      Execute a RESET REPLICA command.
--echo #      The option should not be affected
--echo #      It also survives a server restart

CHANGE REPLICATION SOURCE TO REQUIRE_TABLE_PRIMARY_KEY_CHECK = ON;

--let $count = `SELECT COUNT(*) FROM mysql.slave_relay_log_info WHERE REQUIRE_TABLE_PRIMARY_KEY_CHECK = 'ON'`
--let $assert_text = Check entry for default channel "" in mysql.slave_relay_log_info
--let $assert_cond = $count = 1
--source include/assert.inc

RESET REPLICA;

--let $count = `SELECT COUNT(*) FROM mysql.slave_relay_log_info WHERE REQUIRE_TABLE_PRIMARY_KEY_CHECK = 'ON'`
--let $assert_text = Check entry for default channel "" in mysql.slave_relay_log_info
--let $assert_cond = $count = 1
--source include/assert.inc

--let $rpl_server_number = 2
--let $rpl_server_parameters = --skip_replica_start
--let $explicit_default_wait_counter = 15000
--source include/rpl/restart_server.inc

--let $count = `SELECT COUNT(*) FROM mysql.slave_relay_log_info WHERE REQUIRE_TABLE_PRIMARY_KEY_CHECK = 'ON'`
--let $assert_text = Check entry for default channel "" in mysql.slave_relay_log_info
--let $assert_cond = $count = 1
--source include/assert.inc

--echo
--echo # 4.2. Execute a RESET REPLICA ALL command.
--echo #      The table line was removed.
--echo #      On recreation the value is STREAM for the default channel

RESET REPLICA ALL;

--let $count = `SELECT COUNT(*) FROM mysql.slave_relay_log_info`
--let $assert_text = Check entry for default channel "" in mysql.slave_relay_log_info
--let $assert_cond = $count = 0
--source include/assert.inc

CHANGE REPLICATION SOURCE TO SOURCE_HOST="localhost";

--let $count = `SELECT COUNT(*) FROM mysql.slave_relay_log_info WHERE REQUIRE_TABLE_PRIMARY_KEY_CHECK = 'STREAM'`
--let $assert_text = The default channel "" in mysql.slave_relay_log_info has the default value STREAM
--let $assert_cond = $count = 1
--source include/assert.inc

--echo
--echo # 4.3. Make RESET REPLICA fail due to persistence issues
--echo #      Check that errors on slave info persistence are gracefully handled

CHANGE REPLICATION SOURCE TO SOURCE_HOST="localhost", REQUIRE_TABLE_PRIMARY_KEY_CHECK = OFF FOR CHANNEL "";

--let $count = `SELECT COUNT(*) FROM mysql.slave_relay_log_info WHERE REQUIRE_TABLE_PRIMARY_KEY_CHECK = 'OFF'`
--let $assert_text = Check entry for default channel "" in mysql.slave_relay_log_info
--let $assert_cond = $count = 1
--source include/assert.inc

SET @@GLOBAL.DEBUG = '+d,rpl_rli_clear_info_error';

--error ER_CONNECTION_METADATA
RESET REPLICA;

--let $count = `SELECT COUNT(*) FROM mysql.slave_relay_log_info WHERE REQUIRE_TABLE_PRIMARY_KEY_CHECK = 'OFF'`
--let $assert_text = Check entry for default channel "" is unchanged in mysql.slave_relay_log_info
--let $assert_cond = $count = 1
--source include/assert.inc

--echo
--echo # 5. Cleanup

SET @@GLOBAL.DEBUG = '-d,rpl_rli_clear_info_error';
RESET REPLICA ALL;

--remove_file $MYSQL_TMP_DIR/check_require_table_primary_key_check_in_repo.inc

CALL mtr.add_suppression("Error reading relay log configuration.");
CALL mtr.add_suppression("Replica: Failed to initialize the connection metadata structure for channel ''; its record may still be present in the applier metadata repository*");
CALL mtr.add_suppression("Failed to create or recover replication info repositories.");
CALL mtr.add_suppression("Replica SQL for channel '': Replica failed to initialize applier metadata structure from the repository,*");
CALL mtr.add_suppression("Replication configuration appears to be corrupted. On Group Replication channel 'group_replication_recovery'*");
CALL mtr.add_suppression("Replica: Failed to initialize the connection metadata structure for channel 'group_replication_recovery'*");
CALL mtr.add_suppression("Error writing relay log configuration.");

--disable_warnings
--disable_query_log
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_PORT=$MASTER_MYPORT, SOURCE_USER='root'
--enable_query_log
--enable_warnings

START REPLICA;

--let $rpl_channel_name=
--let $rpl_skip_sync= 1
--source include/rpl/deinit.inc
