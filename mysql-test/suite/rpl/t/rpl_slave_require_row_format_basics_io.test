# ==== Purpose ====
# This test evaluates the behavior of a slave channel when running with
# Require_row_format enabled.
#
# ==== Requirements ====
#
# If configured with Require_row_format = 1 a channel shall error out and stop
# when it detects on its IO thread:
#
# TC1. A DML transaction not logged with row based logging
# TC2. A LOAD DATA, INTVAR, RAND or USER_VAR event
# TC3. A CREATE/DROP TEMPORARY TABLE statement
#
# ==== Implementation ====
#
#  0. Add suppressions for the test.
#     Create a test include.
#     Create tables for the test
#  1.  Log a DML transaction using statement based logging (TC1)
#  1.1 Check the slave IO thread fails
#  2.  Log a transaction with a LOAD DATA event (TC2)
#  2.1 Check the slave IO thread fails
#  3.  Log a transaction with a USER_VAR event (TC2)
#  3.1 Check the slave IO thread fails
#  4.  Log a transaction with a RAND event (TC2)
#  4.1 Check the slave IO thread fails
#  5.  Log a transaction with a INTVAR event (TC2)
#  5.1 Check the slave IO thread fails
#  6.  Log a transaction with a CREATE TEMPORARY TABLE query (TC3)
#  6.1 Check the slave IO thread fails
#  7.  Log a transaction with a DROP TEMPORARY TABLE query (TC3)
#  7.1 Check the slave IO thread fails
#
#  Positive testing
#
#  8. Log a simple DML transaction with row format
#  8.1 Check the slave IO thread is running and the data is replicated
#  9. Log a XA transaction with row format
#  9.1 Check the slave IO thread is running and the data is replicated
#  10. Log a transaction with row format and binlog_rows_query_log_events=1
#  10.1 Check the slave IO thread is running and the data is replicated
#  11. Log a transaction with a save point in row format
#  11.1 Check the slave IO thread is running and the data is replicated
#  12. Log a event creation that needs a USER_VAR event in row format
#  12.1 Check the slave IO thread is running and the data is replicated
#
#  13. Cleanup
#
#  ==== Related Worklog ====
#
#  WL #12968 : Configure replication applier to require row-based replication

-- source include/have_binlog_format_statement.inc
-- source include/master-slave.inc

--echo #
--echo # 0. Add suppressions for the test.
--echo #    Create a test include.
--echo #    Create tables for the test

# Suppressions

call mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT");
call mtr.add_suppression("Slave I/O for channel '': The queue event failed for channel '' as an invalid event according to REQUIRE_ROW_FORMAT was found.*");
call mtr.add_suppression("Slave I/O for channel '': Relay log write failure: could not queue event from master*");

# Test include

--write_file $MYSQL_TMP_DIR/check_slave_IO_error.inc END_OF_PROCEDURE

  --source include/rpl_connection_slave.inc

  CHANGE MASTER TO REQUIRE_ROW_FORMAT = 1;

  START SLAVE;

  --let $generic_queue_error_number= convert_error(ER_SLAVE_RELAY_LOG_WRITE_FAILURE)
  --let $row_format_queue_error_number= convert_error(ER_RPL_SLAVE_QUEUE_EVENT_FAILED_INVALID_NON_ROW_FORMAT)
  --let $slave_io_errno= $generic_queue_error_number,$row_format_queue_error_number
  --let $show_slave_io_error= 1
  --source include/wait_for_slave_io_error.inc

  STOP SLAVE;

  --let $assert_text = The slave stopped as there was an error in the IO thread with REQUIRE_ROW_FORMAT
  --let $assert_file = $MYSQLTEST_VARDIR/tmp/rpl_slave_require_row_format_basics_io.2.err
  --let $assert_select = The queue event failed for channel '' as an invalid event according to REQUIRE_ROW_FORMAT was found.
  --let $assert_count = $error_count
  --source include/assert_grep.inc

  --let $assert_text = $assert_message_text
  --source include/assert.inc

  --echo # No issues when REQUIRE_ROW_FORMAT = 0

  CHANGE MASTER TO REQUIRE_ROW_FORMAT = 0;

  --source include/start_slave.inc

  --source include/rpl_connection_master.inc

  --source include/sync_slave_sql_with_master.inc

  --echo # Reset for next step

  --source include/stop_slave.inc

  RESET SLAVE;
  RESET MASTER;

  --source include/rpl_connection_master.inc

  RESET MASTER;

  --inc $error_count

END_OF_PROCEDURE

--let $error_count = 1

--write_file $MYSQL_TMP_DIR/check_slave_IO_success.inc END_OF_PROCEDURE

  --source include/rpl_connection_slave.inc

  START SLAVE;

  --source include/rpl_connection_master.inc

  --source include/sync_slave_sql_with_master.inc

  --let $assert_text= Verify the IO_THREAD is ON
  --let $service_state= `SELECT service_state FROM performance_schema.replication_connection_status WHERE channel_name=""`
  --let $assert_cond= "ON" = "$service_state"
  --source include/assert.inc

  --let $assert_text= Verify the SQL_THREAD is ON
  --let $service_state= `SELECT service_state FROM performance_schema.replication_applier_status WHERE channel_name=""`
  --let $assert_cond= "ON" = "$service_state"
  --source include/assert.inc

  --let $assert_text= $assert_message_text
  --let $assert_cond= $assert_cond_query
  --source include/assert.inc

  --echo # Reset for next step

  --source include/stop_slave.inc

  --source include/rpl_connection_master.inc

END_OF_PROCEDURE

# Create tables for testing

--source include/rpl_connection_master.inc

CREATE TABLE t1 (i INT);
CREATE TABLE t2 (c1 TEXT);
CREATE TABLE t3 (j INT PRIMARY KEY AUTO_INCREMENT);

--source include/sync_slave_sql_with_master.inc
--source include/stop_slave.inc

--echo #
--echo # 1. Log a DML transaction using statement based logging (TC1)

--source include/rpl_connection_master.inc

INSERT INTO t1 VALUES (0);

--echo #
--echo # 1.1 Check the slave IO thread fails

--let $assert_cond= [ SELECT COUNT(*) = 0 FROM t1 ]
--let $assert_message_text = Nothing was insert on the table
--source $MYSQL_TMP_DIR/check_slave_IO_error.inc

--echo #
--echo # 2. Log a transaction with a LOAD DATA event (TC2)

LOAD DATA INFILE '../../std_data/words.dat' INTO TABLE t2;

--echo #
--echo # 2.1 Check the slave IO thread fails

--let $assert_cond= [SELECT COUNT(*) = 0 FROM t2]
--let $assert_message_text = Nothing was insert on the table
--source $MYSQL_TMP_DIR/check_slave_IO_error.inc

--echo #
--echo # 3. Log a transaction with a USER_VAR event (TC2)

--eval SET @v= 10
--eval INSERT INTO t1 VALUES (@v)

--echo #
--echo # 3.1 Check the slave IO thread fails

--let $assert_cond= [SELECT COUNT(*) = 1 FROM t1]
--let $assert_message_text = Nothing was insert on the table
--source $MYSQL_TMP_DIR/check_slave_IO_error.inc

--echo #
--echo # 4. Log a transaction with a RAND event (TC2)

INSERT INTO t1 VALUES (Rand());

--echo #
--echo # 4.1 Check the slave IO thread fails

--let $assert_cond= [SELECT COUNT(*) = 2 FROM t1]
--let $assert_message_text = Nothing was insert on the table
--source $MYSQL_TMP_DIR/check_slave_IO_error.inc

--echo #
--echo # 5. Log a transaction with a INTVAR event (TC2)

INSERT INTO t3 VALUES();

--echo #
--echo # 5.1 Check the slave IO thread fails

--let $assert_cond= [SELECT COUNT(*) = 0 FROM t3]
--let $assert_message_text = Nothing was insert on the table
--source $MYSQL_TMP_DIR/check_slave_IO_error.inc

--echo #
--echo # 6. Log a transaction with a CREATE TEMPORARY TABLE query (TC3)

# Mixed case to test the boundary test cases
create temporary TABLE temp1 (k INT PRIMARY KEY);

--echo #
--echo # 6.1 Check the slave IO thread fails

--let $assert_cond= [SELECT COUNT(*) = 0 FROM INFORMATION_SCHEMA.INNODB_TEMP_TABLE_INFO]
--let $assert_message_text = No temporary table was created
--source $MYSQL_TMP_DIR/check_slave_IO_error.inc

--echo #
--echo # 7. Log a transaction with a DROP TEMPORARY TABLE query (TC3)

DROP TEMPORARY TABLE IF EXISTS temp1;

--echo #
--echo # 7.1 Check the slave IO thread fails

--let $assert_cond= [SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.INNODB_TEMP_TABLE_INFO]
--let $assert_message_text = There is still a temporary table
--source $MYSQL_TMP_DIR/check_slave_IO_error.inc

#
# Positive testing
#

--source include/rpl_connection_master.inc

--let $binlog_format_master_value = `SELECT @@binlog_format`
SET SESSION binlog_format=ROW;

--source include/rpl_connection_slave.inc

--let $binlog_format_slave_value = `SELECT @@binlog_format`
SET GLOBAL binlog_format=ROW;

CHANGE MASTER TO REQUIRE_ROW_FORMAT = 1;

--source include/rpl_connection_master.inc

--echo #
--echo # 8. Log a simple DML transaction with row format

CREATE TABLE t4 (i INT);

INSERT INTO t4 VALUES(1);

--echo #
--echo # 8.1 Check the slave IO thread is running and the data is replicated

--let $assert_cond_query= [SELECT COUNT(*) = 1 FROM t4]
--let $assert_message_text = The insert was successful
--source $MYSQL_TMP_DIR/check_slave_IO_success.inc

--echo #
--echo # 9. Log a XA transaction with row format

XA START 'trx1';
INSERT INTO t4 VALUES (2);
XA END 'trx1';
XA PREPARE 'trx1';
XA COMMIT 'trx1';

--echo #
--echo # 9.1 Check the slave IO thread is running and the data is replicated

--let $assert_cond_query= [SELECT COUNT(*) = 2 FROM t4]
--let $assert_message_text = The XA transaction was successful
--source $MYSQL_TMP_DIR/check_slave_IO_success.inc

--echo #
--echo # 10. Log a transaction with row format and binlog_rows_query_log_events=1

--let $binlog_rows_query_log_events_value = `SELECT @@binlog_rows_query_log_events`
SET GLOBAL binlog_rows_query_log_events=1;

INSERT INTO t4 VALUES(3);

--echo #
--echo # 10.1 Check the slave IO thread is running and the data is replicated

--let $assert_cond_query= [SELECT COUNT(*) = 3 FROM t4]
--let $assert_message_text = The insert was successful
--source $MYSQL_TMP_DIR/check_slave_IO_success.inc

--replace_result $binlog_rows_query_log_events_value BINLOG_ROWS_QUERY_LOG_EVENTS
--eval SET GLOBAL binlog_rows_query_log_events=$binlog_rows_query_log_events_value

--echo #
--echo # 11. Log a transaction with a save point in row format

BEGIN;
INSERT INTO t4 VALUES(4);
SAVEPOINT a;
INSERT INTO t4 VALUES(5);
ROLLBACK TO SAVEPOINT a;
COMMIT;

--echo #
--echo # 11.1 Check the slave IO thread is running and the data is replicated

--let $assert_cond_query= [SELECT COUNT(*) = 4 FROM t4]
--let $assert_message_text = Only one insert was successful
--source $MYSQL_TMP_DIR/check_slave_IO_success.inc

--echo #
--echo # 12. Log a event creation that needs a USER_VAR event in row format

# CREATE EVENT
set @secs=100;
DELIMITER |;
CREATE EVENT event_with_sysdate_and_user_variables
ON SCHEDULE EVERY @secs MINUTE STARTS sysdate()
ON COMPLETION PRESERVE
DO BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION
SELECT CONCAT('SAMPLE MSG');
END |
DELIMITER ;|

--echo #
--echo # 12.1 Check the slave IO thread is running and the data is replicated

--let $assert_cond_query= [SELECT COUNT(*) = 4 FROM t4]
--let $assert_message_text = Only one insert was successful
--source $MYSQL_TMP_DIR/check_slave_IO_success.inc

--echo #
--echo # 13. Cleanup

--remove_file $MYSQL_TMP_DIR/check_slave_IO_error.inc
--remove_file $MYSQL_TMP_DIR/check_slave_IO_success.inc

--source include/rpl_connection_master.inc

--replace_result $binlog_format_master_value BINLOG_FORMAT
--eval SET GLOBAL binlog_format=$binlog_format_master_value

--source include/rpl_connection_slave.inc

--replace_result $binlog_format_slave_value BINLOG_FORMAT
--eval SET GLOBAL binlog_format=$binlog_format_slave_value

--source include/start_slave.inc

--source include/rpl_connection_master.inc

DROP TABLE t1;
DROP TABLE t2;
DROP TABLE t3;
DROP TABLE t4;
DROP EVENT event_with_sysdate_and_user_variables;

--source include/sync_slave_sql_with_master.inc

--source include/rpl_end.inc
