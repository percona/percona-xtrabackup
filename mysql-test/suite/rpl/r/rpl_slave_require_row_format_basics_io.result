include/master-slave.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection master]
#
# 0. Add suppressions for the test.
#    Create a test include.
#    Create tables for the test
call mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT");
call mtr.add_suppression("Slave I/O for channel '': The queue event failed for channel '' as an invalid event according to REQUIRE_ROW_FORMAT was found.*");
call mtr.add_suppression("Slave I/O for channel '': Relay log write failure: could not queue event from master*");
[connection master]
CREATE TABLE t1 (i INT);
CREATE TABLE t2 (c1 TEXT);
CREATE TABLE t3 (j INT PRIMARY KEY AUTO_INCREMENT);
include/sync_slave_sql_with_master.inc
include/stop_slave.inc
#
# 1. Log a DML transaction using statement based logging (TC1)
[connection master]
INSERT INTO t1 VALUES (0);
#
# 1.1 Check the slave IO thread fails
[connection slave]
CHANGE MASTER TO REQUIRE_ROW_FORMAT = 1;
START SLAVE;
include/wait_for_slave_io_error.inc [errno=13122,13507]
Last_IO_Error = 'Relay log write failure: could not queue event from master'
STOP SLAVE;
include/assert_grep.inc [The slave stopped as there was an error in the IO thread with REQUIRE_ROW_FORMAT]
include/assert.inc [Nothing was insert on the table]
# No issues when REQUIRE_ROW_FORMAT = 0
CHANGE MASTER TO REQUIRE_ROW_FORMAT = 0;
include/start_slave.inc
[connection master]
include/sync_slave_sql_with_master.inc
# Reset for next step
include/stop_slave.inc
RESET SLAVE;
RESET MASTER;
[connection master]
RESET MASTER;
#
# 2. Log a transaction with a LOAD DATA event (TC2)
LOAD DATA INFILE '../../std_data/words.dat' INTO TABLE t2;
#
# 2.1 Check the slave IO thread fails
[connection slave]
CHANGE MASTER TO REQUIRE_ROW_FORMAT = 1;
START SLAVE;
include/wait_for_slave_io_error.inc [errno=13122,13507]
Last_IO_Error = 'Relay log write failure: could not queue event from master'
STOP SLAVE;
include/assert_grep.inc [The slave stopped as there was an error in the IO thread with REQUIRE_ROW_FORMAT]
include/assert.inc [Nothing was insert on the table]
# No issues when REQUIRE_ROW_FORMAT = 0
CHANGE MASTER TO REQUIRE_ROW_FORMAT = 0;
include/start_slave.inc
[connection master]
include/sync_slave_sql_with_master.inc
# Reset for next step
include/stop_slave.inc
RESET SLAVE;
RESET MASTER;
[connection master]
RESET MASTER;
#
# 3. Log a transaction with a USER_VAR event (TC2)
SET @v= 10;
INSERT INTO t1 VALUES (@v);
#
# 3.1 Check the slave IO thread fails
[connection slave]
CHANGE MASTER TO REQUIRE_ROW_FORMAT = 1;
START SLAVE;
include/wait_for_slave_io_error.inc [errno=13122,13507]
Last_IO_Error = 'Relay log write failure: could not queue event from master'
STOP SLAVE;
include/assert_grep.inc [The slave stopped as there was an error in the IO thread with REQUIRE_ROW_FORMAT]
include/assert.inc [Nothing was insert on the table]
# No issues when REQUIRE_ROW_FORMAT = 0
CHANGE MASTER TO REQUIRE_ROW_FORMAT = 0;
include/start_slave.inc
[connection master]
include/sync_slave_sql_with_master.inc
# Reset for next step
include/stop_slave.inc
RESET SLAVE;
RESET MASTER;
[connection master]
RESET MASTER;
#
# 4. Log a transaction with a RAND event (TC2)
INSERT INTO t1 VALUES (Rand());
Warnings:
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statement is unsafe because it uses a system function that may return a different value on the slave.
#
# 4.1 Check the slave IO thread fails
[connection slave]
CHANGE MASTER TO REQUIRE_ROW_FORMAT = 1;
START SLAVE;
include/wait_for_slave_io_error.inc [errno=13122,13507]
Last_IO_Error = 'Relay log write failure: could not queue event from master'
STOP SLAVE;
include/assert_grep.inc [The slave stopped as there was an error in the IO thread with REQUIRE_ROW_FORMAT]
include/assert.inc [Nothing was insert on the table]
# No issues when REQUIRE_ROW_FORMAT = 0
CHANGE MASTER TO REQUIRE_ROW_FORMAT = 0;
include/start_slave.inc
[connection master]
include/sync_slave_sql_with_master.inc
# Reset for next step
include/stop_slave.inc
RESET SLAVE;
RESET MASTER;
[connection master]
RESET MASTER;
#
# 5. Log a transaction with a INTVAR event (TC2)
INSERT INTO t3 VALUES();
#
# 5.1 Check the slave IO thread fails
[connection slave]
CHANGE MASTER TO REQUIRE_ROW_FORMAT = 1;
START SLAVE;
include/wait_for_slave_io_error.inc [errno=13122,13507]
Last_IO_Error = 'Relay log write failure: could not queue event from master'
STOP SLAVE;
include/assert_grep.inc [The slave stopped as there was an error in the IO thread with REQUIRE_ROW_FORMAT]
include/assert.inc [Nothing was insert on the table]
# No issues when REQUIRE_ROW_FORMAT = 0
CHANGE MASTER TO REQUIRE_ROW_FORMAT = 0;
include/start_slave.inc
[connection master]
include/sync_slave_sql_with_master.inc
# Reset for next step
include/stop_slave.inc
RESET SLAVE;
RESET MASTER;
[connection master]
RESET MASTER;
#
# 6. Log a transaction with a CREATE TEMPORARY TABLE query (TC3)
create temporary TABLE temp1 (k INT PRIMARY KEY);
#
# 6.1 Check the slave IO thread fails
[connection slave]
CHANGE MASTER TO REQUIRE_ROW_FORMAT = 1;
START SLAVE;
include/wait_for_slave_io_error.inc [errno=13122,13507]
Last_IO_Error = 'Relay log write failure: could not queue event from master'
STOP SLAVE;
include/assert_grep.inc [The slave stopped as there was an error in the IO thread with REQUIRE_ROW_FORMAT]
include/assert.inc [No temporary table was created]
# No issues when REQUIRE_ROW_FORMAT = 0
CHANGE MASTER TO REQUIRE_ROW_FORMAT = 0;
include/start_slave.inc
[connection master]
include/sync_slave_sql_with_master.inc
# Reset for next step
include/stop_slave.inc
Warnings:
Warning	3022	This operation may not be safe when the slave has temporary tables. The tables will be kept open until the server restarts or until the tables are deleted by any replicated DROP statement. Suggest to wait until slave_open_temp_tables = 0.
RESET SLAVE;
RESET MASTER;
[connection master]
RESET MASTER;
#
# 7. Log a transaction with a DROP TEMPORARY TABLE query (TC3)
DROP TEMPORARY TABLE IF EXISTS temp1;
#
# 7.1 Check the slave IO thread fails
[connection slave]
CHANGE MASTER TO REQUIRE_ROW_FORMAT = 1;
START SLAVE;
include/wait_for_slave_io_error.inc [errno=13122,13507]
Last_IO_Error = 'Relay log write failure: could not queue event from master'
STOP SLAVE;
include/assert_grep.inc [The slave stopped as there was an error in the IO thread with REQUIRE_ROW_FORMAT]
include/assert.inc [There is still a temporary table]
# No issues when REQUIRE_ROW_FORMAT = 0
CHANGE MASTER TO REQUIRE_ROW_FORMAT = 0;
include/start_slave.inc
[connection master]
include/sync_slave_sql_with_master.inc
# Reset for next step
include/stop_slave.inc
RESET SLAVE;
RESET MASTER;
[connection master]
RESET MASTER;
[connection master]
SET SESSION binlog_format=ROW;
[connection slave]
SET GLOBAL binlog_format=ROW;
CHANGE MASTER TO REQUIRE_ROW_FORMAT = 1;
[connection master]
#
# 8. Log a simple DML transaction with row format
CREATE TABLE t4 (i INT);
INSERT INTO t4 VALUES(1);
#
# 8.1 Check the slave IO thread is running and the data is replicated
[connection slave]
START SLAVE;
[connection master]
include/sync_slave_sql_with_master.inc
include/assert.inc [Verify the IO_THREAD is ON]
include/assert.inc [Verify the SQL_THREAD is ON]
include/assert.inc [The insert was successful]
# Reset for next step
include/stop_slave.inc
[connection master]
#
# 9. Log a XA transaction with row format
XA START 'trx1';
INSERT INTO t4 VALUES (2);
XA END 'trx1';
XA PREPARE 'trx1';
XA COMMIT 'trx1';
#
# 9.1 Check the slave IO thread is running and the data is replicated
[connection slave]
START SLAVE;
[connection master]
include/sync_slave_sql_with_master.inc
include/assert.inc [Verify the IO_THREAD is ON]
include/assert.inc [Verify the SQL_THREAD is ON]
include/assert.inc [The XA transaction was successful]
# Reset for next step
include/stop_slave.inc
[connection master]
#
# 10. Log a transaction with row format and binlog_rows_query_log_events=1
SET GLOBAL binlog_rows_query_log_events=1;
INSERT INTO t4 VALUES(3);
#
# 10.1 Check the slave IO thread is running and the data is replicated
[connection slave]
START SLAVE;
[connection master]
include/sync_slave_sql_with_master.inc
include/assert.inc [Verify the IO_THREAD is ON]
include/assert.inc [Verify the SQL_THREAD is ON]
include/assert.inc [The insert was successful]
# Reset for next step
include/stop_slave.inc
[connection master]
SET GLOBAL binlog_rows_query_log_events=BINLOG_ROWS_QUERY_LOG_EVENTS;
#
# 11. Log a transaction with a save point in row format
BEGIN;
INSERT INTO t4 VALUES(4);
SAVEPOINT a;
INSERT INTO t4 VALUES(5);
ROLLBACK TO SAVEPOINT a;
COMMIT;
#
# 11.1 Check the slave IO thread is running and the data is replicated
[connection slave]
START SLAVE;
[connection master]
include/sync_slave_sql_with_master.inc
include/assert.inc [Verify the IO_THREAD is ON]
include/assert.inc [Verify the SQL_THREAD is ON]
include/assert.inc [Only one insert was successful]
# Reset for next step
include/stop_slave.inc
[connection master]
#
# 12. Log a event creation that needs a USER_VAR event in row format
set @secs=100;
CREATE EVENT event_with_sysdate_and_user_variables
ON SCHEDULE EVERY @secs MINUTE STARTS sysdate()
ON COMPLETION PRESERVE
DO BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION
SELECT CONCAT('SAMPLE MSG');
END |
#
# 12.1 Check the slave IO thread is running and the data is replicated
[connection slave]
START SLAVE;
[connection master]
include/sync_slave_sql_with_master.inc
include/assert.inc [Verify the IO_THREAD is ON]
include/assert.inc [Verify the SQL_THREAD is ON]
include/assert.inc [Only one insert was successful]
# Reset for next step
include/stop_slave.inc
[connection master]
#
# 13. Cleanup
[connection master]
SET GLOBAL binlog_format=BINLOG_FORMAT;
[connection slave]
SET GLOBAL binlog_format=BINLOG_FORMAT;
include/start_slave.inc
[connection master]
DROP TABLE t1;
DROP TABLE t2;
DROP TABLE t3;
DROP TABLE t4;
DROP EVENT event_with_sysdate_and_user_variables;
include/sync_slave_sql_with_master.inc
include/rpl_end.inc
