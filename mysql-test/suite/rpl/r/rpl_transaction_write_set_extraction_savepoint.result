include/master-slave.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection master]

############################################################
#  1. Assert that option transaction_write_set_extraction is
#     indeed set.
include/assert.inc [The value for transaction_write_set_extraction should be MURMUR32]

############################################################
#  2. Create a table for the test case.
CREATE TABLE t1 (c1 INT PRIMARY KEY);

############################################################
#  3. Validate that error is thrown when SAVEPOINT is used
#     when option transaction-write-set-extraction is set to
#     a value different of OFF on a regular transaction.
BEGIN;
INSERT INTO t1 VALUES(0);
SAVEPOINT my_savepoint;
ERROR HY000: The MySQL server is running with the --transaction-write-set-extraction!=OFF option so it cannot execute this statement
ROLLBACK TO SAVEPOINT my_savepoint;
ERROR 42000: SAVEPOINT my_savepoint does not exist
RELEASE SAVEPOINT my_savepoint;
ERROR 42000: SAVEPOINT my_savepoint does not exist
ROLLBACK;

############################################################
#  4. Validate that error is thrown when SAVEPOINT is used
#     when option transaction-write-set-extraction is set to
#     a value different of OFF on a stored procedure.
CREATE PROCEDURE test.sp1(IN i INT)
BEGIN
START TRANSACTION;
SAVEPOINT my_savepoint_sp;
ROLLBACK;
END|
CALL test.sp1(1);
ERROR HY000: The MySQL server is running with the --transaction-write-set-extraction!=OFF option so it cannot execute this statement
DROP PROCEDURE test.sp1;

############################################################
#  5. Clean up.
DROP TABLE t1;
include/rpl_end.inc
