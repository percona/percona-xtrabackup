--source include/have_debug.inc
--source include/have_debug_sync.inc

# 
# Bug#23209797 SEGMENTATION FAULT WHILE GETTING GET_SCHEMA_TABLES_RESULT()
# Make sure information_schema.tmp_tables_* tables are not
# directly accessible to users, except for SHOW COMMANDS.
#

CREATE TEMPORARY TABLE t1 (f1 int, f2 int primary key, UNIQUE KEY (f1));
SHOW COLUMNS FROM t1;
SHOW INDEXES FROM t1;
--error ER_UNKNOWN_TABLE
SELECT * FROM information_schema.tmp_tables_columns;
--error ER_UNKNOWN_TABLE
SELECT * FROM information_schema.tmp_tables_keys;
DROP TEMPORARY TABLE t1;


#
# Bug#23210930 ASSERTION `THD->GET_TRANSACTION()->IS_EMPTY(TRANSACTION_CTX::STMT)' FAILED.
# Make sure the INFORMATION_SCHEMA system views are usable in
# prepared statement.
#

CREATE TABLE t1 (f1 int);
SELECT TABLE_SCHEMA, TABLE_NAME, TABLE_TYPE
  FROM information_schema.tables WHERE table_name='t1';

LOCK TABLE t1 READ;
SELECT TABLE_SCHEMA, TABLE_NAME, TABLE_TYPE
   FROM information_schema.tables WHERE table_name='t1';
PREPARE st2 FROM
  "SELECT TABLE_SCHEMA, TABLE_NAME, TABLE_TYPE FROM
   information_schema.tables WHERE table_name='t1'";
EXECUTE st2;
DEALLOCATE PREPARE st2;
UNLOCK TABLES;

DROP TABLE t1;

#
# Bug #28165060   MYSQL IS TRYING TO PERFORM A CONSISTENT READ BUT THE READ
# VIEW IS NOT ASSIGNED!
#

CREATE DATABASE abc;
CREATE TABLE abc.memorytable (id INT NOT NULL) ENGINE=MEMORY;
--source include/restart_mysqld.inc
--disable_result_log
# The following command would cause a assert, without the fix.
SELECT * FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'abc';
--enable_result_log
DROP DATABASE abc;

--echo #
--echo # Bug#30769965
--echo # duplicate entry for key 'primary' when querying
--echo # information_schema.tables
--echo #
--echo # When we run I_S query, we attempt to update the table
--echo # 'mysql.table_stats'.  There exists no entry in mysql.table_stats
--echo # for table db1.t1, when I_S query started execution. Once the I_S
--echo # query starts execution it sees only the snapshot image of
--echo # mysql.table_stats. Meanwhile I_S query is still executing, there
--echo # can be a thread that creates a table db1.t1. The I_S query being
--echo # executed first would attempt to update the dynamic statistics for
--echo # db1.t1.  This can lead to DUPLICATE KEY error.

--echo #
--echo # Test using InnoDB table.
--echo #

CREATE TABLE t0 (c0 INT);
INSERT INTO t0 VALUES (1),(2),(3),(4),(5);
INSERT INTO t0 SELECT * FROM t0;
INSERT INTO t0 SELECT * FROM t0;
INSERT INTO t0 SELECT * FROM t0;
INSERT INTO t0 SELECT * FROM t0;

--echo # Wait just before inserting dynamic statistics for t0.
connect (con1, localhost, root,,);
SET DEBUG_SYNC='before_insert_into_dd SIGNAL parked WAIT_FOR cont1';
send SELECT TABLE_NAME, ENGINE, TABLE_ROWS
       FROM INFORMATION_SCHEMA.TABLES WHERE table_name='t0';

--echo # In another connection, query I_S.TABLES to cause
--echo # dynamic statistics to be inserted before con1.
connection default;
SET DEBUG_SYNC= 'now WAIT_FOR parked';
SELECT TABLE_NAME, ENGINE, TABLE_ROWS
  FROM INFORMATION_SCHEMA.TABLES WHERE table_name='t0';

SET DEBUG_SYNC= 'now SIGNAL cont1';

connection con1;
# Without this fix we would have expected a ER_DUP_ENTRY warning here.
--reap

# Verify that we have latest statistics stored.
SELECT TABLE_NAME, ENGINE, TABLE_ROWS
  FROM INFORMATION_SCHEMA.TABLES WHERE table_name='t0';

--echo # Cleanup
connection default;
DROP TABLE t0;
disconnect con1;
SET GLOBAL DEBUG=DEFAULT;
SET DEBUG_SYNC = 'RESET';

--echo #
--echo # Testing MYISAM table path.
--echo #

CREATE TABLE t0 (c0 INT) ENGINE=MyISAM;
INSERT INTO t0 VALUES (1),(2),(3),(4),(5);
INSERT INTO t0 SELECT * FROM t0;
INSERT INTO t0 SELECT * FROM t0;
INSERT INTO t0 SELECT * FROM t0;
INSERT INTO t0 SELECT * FROM t0;

--echo # Wait just before inserting dynamic statistics for t0.
connect (con1, localhost, root,,);
SET DEBUG_SYNC='before_insert_into_dd SIGNAL parked WAIT_FOR cont1';
send SELECT TABLE_NAME, ENGINE, TABLE_ROWS
       FROM INFORMATION_SCHEMA.TABLES WHERE table_name='t0';

--echo # In another connection, query I_S.TABLES to cause
--echo # dynamic statistics to be inserted before con1.
connection default;
SET DEBUG_SYNC= 'now WAIT_FOR parked';
SELECT TABLE_NAME, ENGINE, TABLE_ROWS
  FROM INFORMATION_SCHEMA.TABLES WHERE table_name='t0';

SET DEBUG_SYNC= 'now SIGNAL cont1';

connection con1;
# Without this fix we would have expected a ER_DUP_ENTRY error here.
--reap

# Verify that we have latest statistics stored.
SELECT TABLE_NAME, ENGINE, TABLE_ROWS
  FROM INFORMATION_SCHEMA.TABLES WHERE table_name='t0';

--echo # Cleanup
connection default;
DROP TABLE t0;
disconnect con1;
SET GLOBAL DEBUG=DEFAULT;
SET DEBUG_SYNC = 'RESET';
