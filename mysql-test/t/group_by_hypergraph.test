--source include/have_hypergraph.inc
--source include/elide_costs.inc

--echo #
--echo # Bug#32980875: WL#14422: ASSERTION `FALSE' FAILED|SQL/BASIC_ROW_ITERATORS.H
--echo #

# This should have been a unit test in hypergraph_optimizer-t.cc, but
# the unit test framework does not currently allow creating temporary
# tables.
#
# We want to test that the hypergraph optimizer doesn't try to do
# sort-ahead on an aggregate.
#
# We expect the hypergraph optimizer to set up a plan like this:
#
# -> Remove duplicates from input grouped on t.x, `MIN(t2.x)`
#   -> Stream results
#       -> Group aggregate: min(t2.x)
#           -> Sort: t2.x
#               -> Inner hash join (t1.x = t2.x)
#                   -> Table scan on t1
#                   -> Hash
#                       -> Table scan on t2
#
# Before, it would set up this plan, which tried to sort on MIN(t2.x)
# before the aggregation had happened:
#
# -> Remove duplicates from input grouped on t1.x, min(t2.x)
#   -> Stream results
#       -> Group aggregate: min(t2.x)
#           -> Sort: t1.x, min(t2.x)
#               -> Inner hash join (t1.x = t2.x)
#                   -> Table scan on t1
#                   -> Hash
#                       -> Table scan on t2
#
# Note that because MIN(t2.x) is functionally dependent on the GROUP BY
# expression (which happens to be t2.x as well here), we avoid a sort
# in the final DISTINCT pass. We further shuffle the SELECT expressions
# around a bit (putting the MIN() first) to demonstrate that our sorting of
# expressions in an interesting grouping is robust.
#
# Of course, we should have been able to remove the entire DISTINCT operation,
# and if we wrote t2.x instead of t1.x, we would be able to do that. However,
# the interesting order framework does not track uniqueness (so can not do it),
# and the hard-coded DISTINCT removal, which runs before the join optimizer,
# does not take functional dependencies into account, so it does not know that
# t1.x (in the SELECT list) = t2.x (in the GROUP BY list).

CREATE TABLE t (x INTEGER);
INSERT INTO t VALUES (1), (2), (3);
ANALYZE TABLE t;
--replace_regex $elide_metrics
EXPLAIN FORMAT=TREE
 SELECT DISTINCT MIN(t2.x), t1.x
 FROM t t1 JOIN t t2 USING (x)
 GROUP BY t2.x;
DROP TABLE t;


--echo #
--echo # Bug #34670701 Too many ROLLUP rows with hypergraph
--echo #

CREATE TABLE t1(
  a INT,
  b INT,
  c INT,
  d INT,
  e INT,
    PRIMARY KEY(a,b),
  KEY ix1 (c,d)
);

INSERT INTO t1 VALUES (0,0,0,0,1), (1,0,1,0,1), (0,1,2,0,1), (2,0,2,0,1), (4,0,0,0,1);
ANALYZE TABLE t1;

# When we use ROLLUP, we can scan ix1 if the group-by terms form a (correctly ordered)
# prefix of [c,d,a,b] and the primary key for a prefix of [a,b]. Otherwise, we must sort.

# All of these need sort.

--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT a,c,d,sum(e) FROM t1 GROUP BY a,c,d WITH ROLLUP;

--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT a,d,c,sum(e) FROM t1 GROUP BY a,d,c WITH ROLLUP;

--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT c,a,d,sum(e) FROM t1 GROUP BY c,a,d WITH ROLLUP;

--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT d,a,c,sum(e) FROM t1 GROUP BY d,a,c WITH ROLLUP;

--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT c,d,b,sum(e) FROM t1 GROUP BY c,d,b WITH ROLLUP;

--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT d,c,a,sum(e) FROM t1 GROUP BY d,c,a WITH ROLLUP;

--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT b,a,sum(e) FROM t1 GROUP BY b,a WITH ROLLUP;

--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT b,sum(e) FROM t1 GROUP BY b WITH ROLLUP;

# For these queries, the group-by key form a prefix of  [c,d,a,b]
# (in that order). Therefore they can scan ix1.

--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT c,sum(e) FROM t1 GROUP BY c WITH ROLLUP;

SELECT c,sum(e) FROM t1 GROUP BY c WITH ROLLUP;

--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT c,d,sum(e) FROM t1 GROUP BY c,d WITH ROLLUP;

SELECT c,d,sum(e) FROM t1 GROUP BY c,d WITH ROLLUP;

--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT c,d,a,sum(e) FROM t1 GROUP BY c,d,a WITH ROLLUP;

SELECT c,d,a,sum(e) FROM t1 GROUP BY c,d,a WITH ROLLUP;

--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT c,d,a,b,sum(e) FROM t1 GROUP BY c,d,a,b WITH ROLLUP;

SELECT c,d,a,b,sum(e) FROM t1 GROUP BY c,d,a,b WITH ROLLUP;

# For these queries, the group-by terms for a prefix of the primary index.
# So we can scan that.

--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT a,sum(e) FROM t1 GROUP BY a WITH ROLLUP;

SELECT a,sum(e) FROM t1 GROUP BY a WITH ROLLUP;

--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT a,b,sum(e) FROM t1 GROUP BY a,b WITH ROLLUP;

SELECT a,b,sum(e) FROM t1 GROUP BY a,b WITH ROLLUP;

#No ROLLUP. We scan ix1 since it covers the group-by fields.
--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT d,a,c,sum(e) FROM t1 GROUP BY d,a,c;

SELECT d,a,c,sum(e) FROM t1 GROUP BY d,a,c;

#No ROLLUP. We scan ix1 since it covers the group-by fields.
--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT a,d,c,sum(e) FROM t1 GROUP BY a,d,c;

SELECT a,d,c,sum(e) FROM t1 GROUP BY a,d,c;

#No ROLLUP. We scan the primary index since it covers the group-by fields.
--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT b,a,sum(e) FROM t1 GROUP BY b,a;

SELECT b,a,sum(e) FROM t1 GROUP BY b,a;

#No ROLLUP. No index covers the group-by fields, therefore we must sort.
--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT a,c,e,sum(d) FROM t1 GROUP BY a,c,e;

DROP TABLE t1;

--echo #
--echo # Bug #33968442: Hypergraph gives too high row estimates for GROUP BY
--echo #

CREATE TABLE num10 (n INT);
INSERT INTO num10 VALUES (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);

CREATE VIEW num1000 AS
SELECT d1.n+d2.n*10+d3.n*100 n FROM num10 d1, num10 d2, num10 d3;

CREATE TABLE t1(
  a INT,
  b INT,
  c INT,
  d INT,
  e INT,
  f INT,
  g INT,
  h INT,
  i INT,
  j INT,
  k INT,
  l INT,
  PRIMARY KEY(a,b),
  KEY ix1 (c,d),
  KEY ix2 (d,a,c),
  KEY ix3 (g,h,i,j),
  KEY ix4 (k,j,l),
  KEY ix5 (k,l)
);

INSERT INTO t1
  SELECT n/100,n%100,n%5,n%7,n%11,n%13,n%10,n%10,n%10,n%10,n%10,n%10
  FROM num1000;

ANALYZE TABLE t1;

# Estimate result size using primary index.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 GROUP BY a;

# Estimate result size using ix1.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 GROUP BY c;

# Estimate result size using ix1.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 GROUP BY d,c;

# Estimate result size using ix2.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 GROUP BY d,a;

# Estimate result size using ix1 or ix2.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 GROUP BY c,d,a;

# Estimate result size using:
# - ix1 or ix2 for d,c,a.
# - ix1 or ix2 for d,c
# - ix2 d
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 GROUP BY d,a,c WITH ROLLUP;

# Estimate result size using:
# - ix1 or ix2 for c,d,a.
# - ix1 for c,d
# - ix1 for c
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 GROUP BY c,d,a WITH ROLLUP;

# Estimate result size using:
# - ix1 or ix2 for c,a,d.
# - ix1 and PRIMARY for c,a
# - ix1 for c
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 GROUP BY c,a,d WITH ROLLUP;

# Estimate result size using ix1 and PRIMARY.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 GROUP BY c,a;

# Estimate result size using ix1 (for c) and t1 row count.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 GROUP BY c,b;

# Estimate result size using t1 row count.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 GROUP BY e,f;

# Estimate result size using ix3 and ix5 (not one-field prefix of ix4).
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 GROUP BY g,h,i,j,k,l;

ANALYZE TABLE t1 UPDATE HISTOGRAM ON a,b,c,d,e,f,g,h,i;
ANALYZE TABLE t1;

# Estimate result size using histogram.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 GROUP BY e;

# Estimate result size using histograms.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 GROUP BY e,f;

# Estimate result size using histograms, and then cap to input set size.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 WHERE b>95 GROUP BY e,f;

# Estimate result size using input row count.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 GROUP BY c+0,e+0;

# Estimate result size using input row count.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 WHERE b>95 GROUP BY c+0,e+0;

# Estimate result size using primary index (for a), histogram (for e)
# and t1 row count for 'c+0'.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 GROUP BY a,e,c+0;

CREATE TABLE t2 (
  c1 INT,
  c2 INT,
  c3 INT,
  PRIMARY KEY(c1,c2)
);

INSERT INTO t2 SELECT n%5,n/5,n%3 FROM num10;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON c3;
ANALYZE TABLE t2;

# Estimate result size using primary index.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1,t2 GROUP BY c1;

# Estimate result size using t2 row count.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1,t2 GROUP BY c2;

# Estimate result size using histogram.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1,t2 GROUP BY c3;

# Estimate result size using primary index (a) and histogram (c3).
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1,t2 GROUP BY a,c3;

DROP VIEW num1000;
DROP TABLE num10, t1, t2;

--echo #
--echo # Bug#34844509: Assertion `receiver.HasSecondaryEngineCostHook()' failed
--echo #

CREATE TABLE t (
col1 INT, col2 INT, col3 INT, col4 INT, col5 INT, col6 INT,
col7 INT, col8 INT, col9 INT, col10 INT, col11 INT, col12 INT,
col13 INT, col14 INT, col15 INT, col16 INT, col17 INT, col18 INT,
col19 INT, col20 INT, col21 INT, col22 INT, col23 INT, col24 INT,
col25 INT, col26 INT, col27 INT, col28 INT, col29 INT, col30 INT,
col31 INT, col32 INT, col33 INT, col34 INT, col35 INT, col36 INT,
col37 INT, col38 INT, col39 INT, col40 INT, col41 INT, col42 INT,
col43 INT, col44 INT, col45 INT, col46 INT, col47 INT, col48 INT,
col49 INT, col50 INT, col51 INT, col52 INT, col53 INT, col54 INT,
col55 INT, col56 INT, col57 INT, col58 INT, col59 INT, col60 INT,
col61 INT, col62 INT, col63 INT, col64 INT,
KEY (col1, col2), KEY (col2, col3), KEY (col3), KEY (col4), KEY (col5),
KEY (col6), KEY (col7), KEY (col8), KEY (col9), KEY (col10),
KEY (col11), KEY (col12), KEY (col13), KEY (col14), KEY (col15),
KEY (col16), KEY (col17), KEY (col18), KEY (col19), KEY (col20),
KEY (col21), KEY (col22), KEY (col23), KEY (col24), KEY (col25),
KEY (col26), KEY (col27), KEY (col28), KEY (col29), KEY (col30),
KEY (col31), KEY (col32), KEY (col33), KEY (col34), KEY (col35),
KEY (col36), KEY (col37), KEY (col38), KEY (col39), KEY (col40),
KEY (col41), KEY (col42), KEY (col43), KEY (col44), KEY (col45),
KEY (col46), KEY (col47), KEY (col48), KEY (col49), KEY (col50),
KEY (col51), KEY (col52), KEY (col53), KEY (col54), KEY (col55),
KEY (col56), KEY (col57), KEY (col58), KEY (col59), KEY (col60),
KEY (col61), KEY (col62), KEY (col63), KEY (col64));

ANALYZE TABLE t;

--source include/turn_off_only_full_group_by.inc
--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT DISTINCT * FROM t GROUP BY col1 + col2;
--source include/restore_sql_mode_after_turn_off_only_full_group_by.inc

DROP TABLE t;


##########
# temp table aggregation in hypergraph optimizer.
##########

--echo # Note: Some of the query results below are susceptible to plan changes.
--echo # This can happen when selecting columns that we do not group by or aggregate over.

--source include/turn_off_only_full_group_by.inc

create table tb1(id int , id2 int, primary key (id));
insert into tb1 values (1, 10), (2, 11), (3, 12), (4, 10), (5, 11), (6, 12), (7, 10), (8, 11), (9, 12), (10, 10), (11, 11), (12, 12);
analyze table tb1;
select sql_small_result avg(id) , id2 from tb1 where id2 != 5 group by id2;
select sql_small_result avg(id) , id2 + 2 from tb1 group by id2;
select sql_small_result avg(id), any_value(id) from tb1 group by id2;
select sql_small_result 2000 + avg(id) * 100 , avg(id*2) a , id2 * 4 i from tb1 group by id2 * 4 order by a desc;
let $query=
  select sql_small_result 2000 + avg(id) * 100 , avg(id*2) a , id2 * 4 i from tb1 group by id2 * 4 having i  < 48 order by a desc;
eval $query;
--replace_regex $elide_costs
eval EXPLAIN FORMAT=TREE $query;

# eq_ref subquery having outer references
create table tb2(id int , id3 int, primary key (id));
insert into tb2 select * from tb1;
analyze table tb2;
select sql_small_result id2, (select avg(tb1.id) + id3 from tb2 where tb2.id = tb1.id2) from tb1 group by id2;
# table joins
select sql_small_result tb2.id, tb2.id3, id2, avg(tb1.id) from tb1, tb2 group by id2;

drop table tb2;

# This tests tmp slice usage during temp-table initialization.
select sql_small_result ROUND(RAND(100)*10) r2, sum(1) r1 from tb1 group by id2  HAVING r1 = 4 and r2=2 ;
select sql_small_result ROUND(RAND(100)*10) r2, sum(1) r1 from tb1 group by id2  HAVING r1 = 4 and (select r2=2);
select sql_small_result ROUND(RAND(100)*any_value(id)) r2, sum(1) r1 from tb1 group by id2  HAVING r1 = 4 and r2=2 ;
select sql_small_result id, ROUND(RAND(100)*10) r2, sum(1) r1 from tb1 group by id2  HAVING r1 = 4 and any_value(id)=2;
select sql_small_result ROUND(RAND(100)*10) r2, sum(1) r1 , id from tb1 group by id2  HAVING r1 = 4 and (select any_value(id)=2) ;

# Aggregate, group column and non-group column together in a single select item.
select sql_small_result id2, avg(id) + id, (select avg(id) + id), avg(id) + id2, (select avg(id) + id2) from tb1 group by id2;
# Distinct with aggregate.
select sql_small_result distinct round(avg(id)/10-.2) from tb1 group by id2 order by id;
# Aggregate in derived tables.
select * from (select * from tb1 where id %3 = 0) even,
  lateral (select sql_small_result avg(id2) a from tb1 where id > even.id group by id2 ) l
  where even.id != l.a;

# Combination of multiple aggs and group ids in subquery.
create table tb2(a int , b int);
insert into tb2 values (1, 10), (2, 11), (1, 13);
select sql_small_result (select count(*) from tb2 where b + 5 > avg(tb1.id) + tb1.id2) e from tb1 group by id2 ;
drop table tb2;

# Two temp tables
let $query=
  select sql_small_result SQL_BUFFER_RESULT 2000 + avg(id) * 100 , avg(id*2) a , id2 * 4 i from tb1 group by id2 * 4 having i  < 48 order by a desc;
eval $query;
--replace_regex $elide_costs
eval EXPLAIN FORMAT=TREE $query;

# Aggs and window functions in the same stmt, with multiple temp tables under sort.
CREATE TABLE t(txt TEXT, i INT);
INSERT INTO t VALUES ('z', 12), ('m', 81), ('q', 9), ('e', 7),
                     ('z', 2), ('m', 8), ('q', 19), ('e', 17),
                     ('a', 92), ('b', 8), ('b', 0), ('c', 2);
select sql_small_result txt, AVG(i) a, row_number() over() r FROM t GROUP BY txt order by a, txt;
select sql_small_result txt, AVG(i), row_number() over() FROM t GROUP BY txt order by AVG(i);
select sql_small_result txt, AVG(i)+2 a , row_number() over() FROM t GROUP BY txt order by -a;
select sql_small_result txt, AVG(i)+2 a, (SELECT AVG(i) + 2) b, row_number() over() FROM t GROUP BY txt order by -b;
select sql_small_result txt, AVG(i)+2 a, (SELECT AVG(i) + 2) b, row_number() over() FROM t GROUP BY txt order by b;
select sql_small_result txt, AVG(i)+2 a, row_number() over()  FROM t GROUP BY txt order by a;
select sql_small_result txt, AVG(i) a, row_number() over()  FROM t GROUP BY txt order by a;
select sql_small_result txt, AVG(i) * 2 a, row_number() over()  FROM t GROUP BY txt order by txt;
select sql_small_result txt, AVG(i) a, row_number() over()  FROM t GROUP BY txt order by txt;
select sql_small_result txt, AVG(i) a , row_number() over() r FROM t GROUP BY txt order by 0-a;
select sql_small_result txt, AVG(i) a , row_number() over() r FROM t GROUP BY txt order by a;
select sql_small_result txt, AVG(i) a , row_number() over() r FROM t GROUP BY txt order by txt;
drop table t;

# Expressions and subqueries in group-by clause.
select sql_small_result round(stddev(id2),5) from tb1 t1 group by (id + id2)%5;
select sql_small_result round(stddev(id2),5) from tb1 t1 group by (select (id + id2)%5);
select sql_small_result round(stddev(id2),5) from tb1 t1 group by (select (t2.id + t2.id2)%5 from tb1 t2 where t2.id = t1.id);

# Item_ref_null_helper should not lose the null info.
create table t1 (oref int, grp int, ie int) ;
insert into t1 (oref, grp, ie) values (1, 1, 1), (1, 1, 1), (1, 2, NULL), (2, 1, 3), (3, 1, 4), (3, 2, NULL);
create table t2 (oref int, a int);
insert into t2 values (1, 1), (2, 2), (3, 3), (4, NULL), (2, NULL);
ANALYZE TABLE t1, t2;
# Item_ref_null_helper containing aggregate
select a, oref, a in (select sql_small_result max(ie)  from t1
  where oref=t2.oref group by grp) Z from t2;
# Item_ref_null_helper containing non-aggregate
select a, oref, a in (select sql_small_result any_value(ie) from t1 where oref=t2.oref
  group by grp having max(ie) is null or max(ie) is not null) Z from t2;
drop table t1, t2;

# Bug#36313478: WL#15809: Wrong result (NULL) when using GROUP BY on empty set
# Verify that the result remains empty even when group-by is pruned away.
# (The "alias1.pk IS NULL" below causes the pruning)
create table tb2(pk int, col_int int, col_varchar varchar(1), PRIMARY KEY (pk));
select count(alias2.col_int) as field1, alias1.pk as field2 from tb2 as alias1
  right join tb2 as alias2 on alias1.col_varchar = alias2.col_varchar
  where (alias2.col_int = alias1.col_int and alias1.pk IS NULL) group by field2;
drop table tb2;

--echo #
--echo # Bug#36388816: 'm_index_cursor.is_positioned()' in temptable::Handler::position at src/handler
--echo #
CREATE TABLE t1 (pk INTEGER, f1 INTEGER, f2 LONGTEXT, f3 VARCHAR(10),
                 f4 TIMESTAMP, PRIMARY KEY(pk));
INSERT INTO t1 VALUES (1, NULL,  'fsfd', NULL, NULL),
                      (2, 34, 'fsfsfd', NULL, "1993-07-20 08:10:46");
SELECT MIN(t1.f1) AS field1 FROM (t1 JOIN (t1 t2) ON (TRUE),
  LATERAL (SELECT t2.f3 AS field2 FROM t1 t3 WHERE (t2.f3 <=> t2.f4)
           GROUP BY field2 ORDER BY t1.f2) AS t4)
  GROUP BY field2 ORDER BY field1;
DROP TABLE t1;

--echo #
--echo # Bug#36668257: Assertion `!OrderItemsReferenceUnavailableTables(path....
--echo #
SELECT SQL_SMALL_RESULT avg(id) - 6.6 AS field1, id2  FROM tb1 GROUP BY id2
  ORDER BY abs(field1);
SELECT SQL_BIG_RESULT   avg(id) - 6.6 AS field1, id2  FROM tb1 GROUP BY id2
  ORDER BY abs(field1);

# Temptable aggregates should not be used with ROLLUP.
let $query=
  select avg(id) , id2 from tb1 where id2 != 5 group by id2 with rollup;
eval $query;
--replace_regex $elide_costs
eval EXPLAIN FORMAT=TREE $query;

# Temptable aggregates should not be used when the usual aggregate functions
# are used as Window functions.
let $query=
  select avg(id2*2)  over(), id2 from tb1 group by id2;
eval $query;
--replace_regex $elide_costs
eval EXPLAIN FORMAT=TREE $query;

# If temptable aggregate is not supported (e.g. json aggs), it should not be
# used, even if forced.
--replace_regex $elide_costs
EXPLAIN FORMAT=TREE select sql_small_result avg(id), JSON_ARRAYAGG(id) from tb1 t1 group by id2 ;
--replace_regex $elide_costs
EXPLAIN FORMAT=TREE select sql_small_result avg(id) from tb1 group by 'abcd';

# Force the streaming agg plan.
--replace_regex $elide_costs
EXPLAIN FORMAT=TREE select sql_big_result avg(id) from tb1 t1 group by id2;

# Force temp table agg plan.
# Forcing should work even when streaming agg would not need a Sort plan.
--replace_regex $elide_costs
EXPLAIN FORMAT=TREE select sql_small_result avg(id2) from tb1 t1 group by id;
# Forcing should work when both plans are possible.
truncate tb1; # This will make temp-table agg costlier.
analyze table tb1;
--replace_regex $elide_costs
EXPLAIN FORMAT=TREE select sql_small_result avg(id) from tb1 t1 group by id2;

#cleanup
--source include/restore_sql_mode_after_turn_off_only_full_group_by.inc
drop table tb1;

--source include/disable_hypergraph.inc
