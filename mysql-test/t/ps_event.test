--echo #
--echo # WL#16298: Allow EVENT statements to be prepared explicitly
--echo #


CREATE TABLE t1(
  id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  user VARCHAR(288) DEFAULT (CURRENT_USER())
);

PREPARE ce FROM 'CREATE EVENT e1 ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 0 SECOND ENABLE DO BEGIN INSERT INTO t1 (id) VALUE (NULL); END';
EXECUTE ce;

let $wait_condition = SELECT COUNT(*) = 1 FROM t1;
--source include/wait_condition.inc

SELECT * FROM t1;

DEALLOCATE PREPARE ce;

DELIMITER $;
CREATE PROCEDURE event_creator()
BEGIN
PREPARE ce FROM 'CREATE EVENT e1 ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 0 SECOND ENABLE DO BEGIN INSERT INTO t1 (id) VALUE (NULL); END';

EXECUTE ce;
DEALLOCATE PREPARE ce;
END$
DELIMITER ;$

CALL event_creator();
let $wait_condition = SELECT COUNT(*) = 2 FROM t1;
--source include/wait_condition.inc
SELECT * FROM t1;

--error ER_NON_DML_DYNAMIC_PARAMETERS
PREPARE ce FROM 'CREATE EVENT e1 ON SCHEDULE AT ? ENABLE DO BEGIN INSERT INTO t1 (id) VALUE (NULL); END';

PREPARE ae FROM 'ALTER EVENT e1 DISABLE';
--error ER_EVENT_DOES_NOT_EXIST
EXECUTE ae;
DEALLOCATE PREPARE ae;

PREPARE de FROM 'DROP EVENT e1';

--error ER_EVENT_DOES_NOT_EXIST
EXECUTE de;
DEALLOCATE PREPARE de;

--echo # Cleanup

DROP PROCEDURE event_creator;

DROP TABLE t1;

--error ER_EVENT_INTERVAL_NOT_POSITIVE_OR_TOO_BIG
PREPARE ps FROM 'CREATE EVENT e1 ON SCHEDULE EVERY (SELECT \'abcdef\' UNION SELECT \'abcdef\') SECOND DO SELECT 1';

PREPARE ps FROM 'CREATE EVENT e1 ON SCHEDULE EVERY (SELECT \'abcdef\' UNION SELECT \'abcdef\')+10 SECOND DO SELECT 1';
EXECUTE ps;
DEALLOCATE PREPARE ps;
DROP EVENT e1;


SET @event_statement =
CONCAT('CREATE EVENT e1 ON SCHEDULE EVERY 1 SECOND STARTS NOW() DO',
       ' BEGIN',
       ' SELECT GET_LOCK(\'e1_lock\', 60); SELECT RELEASE_LOCK(\'e1_lock\');',
       ' INSERT INTO t2 SELECT * FROM t1;',
       ' END');
PREPARE ps FROM @event_statement;
EXECUTE ps;
DEALLOCATE PREPARE ps;
DROP EVENT e1;

--echo # With EXIT HANDLER in event body
SET @event_statement =
CONCAT('CREATE EVENT e1 ON SCHEDULE EVERY 1 SECOND STARTS NOW() DO',
       ' BEGIN',
       ' DECLARE EXIT HANDLER FOR 1136 BEGIN INSERT INTO t3 VALUES (1); END;',
       ' SELECT GET_LOCK(\'e1_lock\', 60); SELECT RELEASE_LOCK(\'e1_lock\');',
       ' INSERT INTO t2 SELECT * FROM t1;',
       ' END');

PREPARE ps FROM @event_statement;
EXECUTE ps;
DEALLOCATE PREPARE ps;
DROP EVENT e1;

--echo #
--echo # Issue first observed in MLE tests where prepare of CREATE EVENT done inside an SP fails with parse error
--echo # which triggers ASAN read of heap after free.
--echo #

--echo # Behavior with normal CREATE EVENT statement
--error ER_PARSE_ERROR
CREATE EVENT e1 ON SCHEDULE EVERY 10 SECOND STARTS NOW() ENDS NOW() + INTERVAL 21 SECOND ON COMPLETION NOT PRESERVE DO SELECT * FROM  LIMIT 1;

--echo # Behavior with normal prepare
--error ER_PARSE_ERROR
PREPARE stmt FROM 'CREATE EVENT e1 ON SCHEDULE EVERY 10 SECOND STARTS NOW() ENDS NOW() + INTERVAL 21 SECOND ON COMPLETION NOT PRESERVE DO SELECT * FROM  LIMIT 1';

DELIMITER $;
CREATE PROCEDURE p1()
BEGIN
   PREPARE stmt FROM 'CREATE EVENT e1 ON SCHEDULE EVERY 10 SECOND STARTS NOW() ENDS NOW() + INTERVAL 21 SECOND ON COMPLETION NOT PRESERVE DO SELECT * FROM  LIMIT 1';
END;
$
DELIMITER ;$

--echo # Verify same behavior when prepare is done inside an SP
--error ER_PARSE_ERROR
CALL p1();

DROP PROCEDURE p1;


--echo # Repeated ps execution

PREPARE ce FROM 'CREATE EVENT e1 ON SCHEDULE EVERY 1 SECOND DO SELECT 1';
EXECUTE ce;
DROP EVENT IF EXISTS e1;
EXECUTE ce;
DROP EVENT IF EXISTS e1;
DEALLOCATE PREPARE ce;

DELIMITER $;
CREATE PROCEDURE event_creator2()
BEGIN
DECLARE CONTINUE HANDLER FOR 1539 SELECT 'Event does not exist' AS 'Error handled:';
DECLARE CONTINUE HANDLER FOR 1537 SELECT 'Event already exists' AS 'Error handled:';

PREPARE ce FROM 'CREATE EVENT e1 ON SCHEDULE EVERY 1 SECOND DO SELECT 1';
PREPARE ae FROM 'ALTER EVENT e1 ON SCHEDULE EVERY 1 SECOND DO SELECT 2';
PREPARE de FROM 'DROP EVENT e1';

# Event does not exist
EXECUTE ae;
# Event does not exist
EXECUTE de;

EXECUTE ce;
# Event already exists
EXECUTE ce;

EXECUTE ae;

EXECUTE de;
# Event does not exist
EXECUTE de;

DEALLOCATE PREPARE ce;
DEALLOCATE PREPARE ae;
DEALLOCATE PREPARE de;
END$
DELIMITER ;$

CALL event_creator2();

DROP PROCEDURE event_creator2;

--echo # Repeated execution from concatenated statement variable

SET @event_statement = CONCAT(
       'CREATE EVENT e1 ON SCHEDULE EVERY 1 SECOND STARTS NOW() DO',
       ' BEGIN',
       ' INSERT INTO t2 SELECT * FROM t1;',
       ' END');
PREPARE ps FROM @event_statement;
EXECUTE ps;
--error ER_EVENT_ALREADY_EXISTS
EXECUTE ps;
DROP EVENT e1;

DEALLOCATE PREPARE ps;

--echo # Execution of PS created in SP outside SP
DELIMITER $;
CREATE PROCEDURE event_creator()
BEGIN
PREPARE ce FROM 'CREATE EVENT e1 ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 0 SECOND ENABLE DO BEGIN INSERT INTO t1 (id) VALUE (NULL); END';
END$
DELIMITER ;$

CALL event_creator();
EXECUTE ce;
DROP EVENT e1;
EXECUTE ce;
DROP EVENT e1;
DEALLOCATE PREPARE ce;
DROP PROCEDURE event_creator;